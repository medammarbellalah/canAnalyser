
F4_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000573c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006f8  080058cc  080058cc  000158cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005fc4  08005fc4  00020138  2**0
                  CONTENTS
  4 .ARM          00000008  08005fc4  08005fc4  00015fc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005fcc  08005fcc  00020138  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005fcc  08005fcc  00015fcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005fd0  08005fd0  00015fd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000138  20000000  08005fd4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020138  2**0
                  CONTENTS
 10 .bss          000001e8  20000138  20000138  00020138  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000320  20000320  00020138  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020138  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020168  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000965a  00000000  00000000  000201ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000018ca  00000000  00000000  00029805  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000770  00000000  00000000  0002b0d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000005a4  00000000  00000000  0002b840  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00020c83  00000000  00000000  0002bde4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00009f01  00000000  00000000  0004ca67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c4519  00000000  00000000  00056968  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000269c  00000000  00000000  0011ae84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000070  00000000  00000000  0011d520  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000138 	.word	0x20000138
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080058b4 	.word	0x080058b4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000013c 	.word	0x2000013c
 80001cc:	080058b4 	.word	0x080058b4

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_dmul>:
 80002a0:	b570      	push	{r4, r5, r6, lr}
 80002a2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80002a6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80002aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80002ae:	bf1d      	ittte	ne
 80002b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002b4:	ea94 0f0c 	teqne	r4, ip
 80002b8:	ea95 0f0c 	teqne	r5, ip
 80002bc:	f000 f8de 	bleq	800047c <__aeabi_dmul+0x1dc>
 80002c0:	442c      	add	r4, r5
 80002c2:	ea81 0603 	eor.w	r6, r1, r3
 80002c6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002ca:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ce:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002d2:	bf18      	it	ne
 80002d4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002e0:	d038      	beq.n	8000354 <__aeabi_dmul+0xb4>
 80002e2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002e6:	f04f 0500 	mov.w	r5, #0
 80002ea:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002ee:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002f2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002f6:	f04f 0600 	mov.w	r6, #0
 80002fa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002fe:	f09c 0f00 	teq	ip, #0
 8000302:	bf18      	it	ne
 8000304:	f04e 0e01 	orrne.w	lr, lr, #1
 8000308:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800030c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000310:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000314:	d204      	bcs.n	8000320 <__aeabi_dmul+0x80>
 8000316:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800031a:	416d      	adcs	r5, r5
 800031c:	eb46 0606 	adc.w	r6, r6, r6
 8000320:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000324:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000328:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800032c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000330:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000334:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000338:	bf88      	it	hi
 800033a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800033e:	d81e      	bhi.n	800037e <__aeabi_dmul+0xde>
 8000340:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000344:	bf08      	it	eq
 8000346:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800034a:	f150 0000 	adcs.w	r0, r0, #0
 800034e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000352:	bd70      	pop	{r4, r5, r6, pc}
 8000354:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000358:	ea46 0101 	orr.w	r1, r6, r1
 800035c:	ea40 0002 	orr.w	r0, r0, r2
 8000360:	ea81 0103 	eor.w	r1, r1, r3
 8000364:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000368:	bfc2      	ittt	gt
 800036a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800036e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000372:	bd70      	popgt	{r4, r5, r6, pc}
 8000374:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000378:	f04f 0e00 	mov.w	lr, #0
 800037c:	3c01      	subs	r4, #1
 800037e:	f300 80ab 	bgt.w	80004d8 <__aeabi_dmul+0x238>
 8000382:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000386:	bfde      	ittt	le
 8000388:	2000      	movle	r0, #0
 800038a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800038e:	bd70      	pople	{r4, r5, r6, pc}
 8000390:	f1c4 0400 	rsb	r4, r4, #0
 8000394:	3c20      	subs	r4, #32
 8000396:	da35      	bge.n	8000404 <__aeabi_dmul+0x164>
 8000398:	340c      	adds	r4, #12
 800039a:	dc1b      	bgt.n	80003d4 <__aeabi_dmul+0x134>
 800039c:	f104 0414 	add.w	r4, r4, #20
 80003a0:	f1c4 0520 	rsb	r5, r4, #32
 80003a4:	fa00 f305 	lsl.w	r3, r0, r5
 80003a8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ac:	fa01 f205 	lsl.w	r2, r1, r5
 80003b0:	ea40 0002 	orr.w	r0, r0, r2
 80003b4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80003b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80003bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003c0:	fa21 f604 	lsr.w	r6, r1, r4
 80003c4:	eb42 0106 	adc.w	r1, r2, r6
 80003c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003cc:	bf08      	it	eq
 80003ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003d2:	bd70      	pop	{r4, r5, r6, pc}
 80003d4:	f1c4 040c 	rsb	r4, r4, #12
 80003d8:	f1c4 0520 	rsb	r5, r4, #32
 80003dc:	fa00 f304 	lsl.w	r3, r0, r4
 80003e0:	fa20 f005 	lsr.w	r0, r0, r5
 80003e4:	fa01 f204 	lsl.w	r2, r1, r4
 80003e8:	ea40 0002 	orr.w	r0, r0, r2
 80003ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003f4:	f141 0100 	adc.w	r1, r1, #0
 80003f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003fc:	bf08      	it	eq
 80003fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000402:	bd70      	pop	{r4, r5, r6, pc}
 8000404:	f1c4 0520 	rsb	r5, r4, #32
 8000408:	fa00 f205 	lsl.w	r2, r0, r5
 800040c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000410:	fa20 f304 	lsr.w	r3, r0, r4
 8000414:	fa01 f205 	lsl.w	r2, r1, r5
 8000418:	ea43 0302 	orr.w	r3, r3, r2
 800041c:	fa21 f004 	lsr.w	r0, r1, r4
 8000420:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000424:	fa21 f204 	lsr.w	r2, r1, r4
 8000428:	ea20 0002 	bic.w	r0, r0, r2
 800042c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000430:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000434:	bf08      	it	eq
 8000436:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800043a:	bd70      	pop	{r4, r5, r6, pc}
 800043c:	f094 0f00 	teq	r4, #0
 8000440:	d10f      	bne.n	8000462 <__aeabi_dmul+0x1c2>
 8000442:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000446:	0040      	lsls	r0, r0, #1
 8000448:	eb41 0101 	adc.w	r1, r1, r1
 800044c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000450:	bf08      	it	eq
 8000452:	3c01      	subeq	r4, #1
 8000454:	d0f7      	beq.n	8000446 <__aeabi_dmul+0x1a6>
 8000456:	ea41 0106 	orr.w	r1, r1, r6
 800045a:	f095 0f00 	teq	r5, #0
 800045e:	bf18      	it	ne
 8000460:	4770      	bxne	lr
 8000462:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000466:	0052      	lsls	r2, r2, #1
 8000468:	eb43 0303 	adc.w	r3, r3, r3
 800046c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000470:	bf08      	it	eq
 8000472:	3d01      	subeq	r5, #1
 8000474:	d0f7      	beq.n	8000466 <__aeabi_dmul+0x1c6>
 8000476:	ea43 0306 	orr.w	r3, r3, r6
 800047a:	4770      	bx	lr
 800047c:	ea94 0f0c 	teq	r4, ip
 8000480:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000484:	bf18      	it	ne
 8000486:	ea95 0f0c 	teqne	r5, ip
 800048a:	d00c      	beq.n	80004a6 <__aeabi_dmul+0x206>
 800048c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000490:	bf18      	it	ne
 8000492:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000496:	d1d1      	bne.n	800043c <__aeabi_dmul+0x19c>
 8000498:	ea81 0103 	eor.w	r1, r1, r3
 800049c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004a0:	f04f 0000 	mov.w	r0, #0
 80004a4:	bd70      	pop	{r4, r5, r6, pc}
 80004a6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004aa:	bf06      	itte	eq
 80004ac:	4610      	moveq	r0, r2
 80004ae:	4619      	moveq	r1, r3
 80004b0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004b4:	d019      	beq.n	80004ea <__aeabi_dmul+0x24a>
 80004b6:	ea94 0f0c 	teq	r4, ip
 80004ba:	d102      	bne.n	80004c2 <__aeabi_dmul+0x222>
 80004bc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004c0:	d113      	bne.n	80004ea <__aeabi_dmul+0x24a>
 80004c2:	ea95 0f0c 	teq	r5, ip
 80004c6:	d105      	bne.n	80004d4 <__aeabi_dmul+0x234>
 80004c8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004cc:	bf1c      	itt	ne
 80004ce:	4610      	movne	r0, r2
 80004d0:	4619      	movne	r1, r3
 80004d2:	d10a      	bne.n	80004ea <__aeabi_dmul+0x24a>
 80004d4:	ea81 0103 	eor.w	r1, r1, r3
 80004d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004dc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd70      	pop	{r4, r5, r6, pc}
 80004ea:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004ee:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004f2:	bd70      	pop	{r4, r5, r6, pc}

080004f4 <__aeabi_drsub>:
 80004f4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004f8:	e002      	b.n	8000500 <__adddf3>
 80004fa:	bf00      	nop

080004fc <__aeabi_dsub>:
 80004fc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000500 <__adddf3>:
 8000500:	b530      	push	{r4, r5, lr}
 8000502:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000506:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800050a:	ea94 0f05 	teq	r4, r5
 800050e:	bf08      	it	eq
 8000510:	ea90 0f02 	teqeq	r0, r2
 8000514:	bf1f      	itttt	ne
 8000516:	ea54 0c00 	orrsne.w	ip, r4, r0
 800051a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800051e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000522:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000526:	f000 80e2 	beq.w	80006ee <__adddf3+0x1ee>
 800052a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800052e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000532:	bfb8      	it	lt
 8000534:	426d      	neglt	r5, r5
 8000536:	dd0c      	ble.n	8000552 <__adddf3+0x52>
 8000538:	442c      	add	r4, r5
 800053a:	ea80 0202 	eor.w	r2, r0, r2
 800053e:	ea81 0303 	eor.w	r3, r1, r3
 8000542:	ea82 0000 	eor.w	r0, r2, r0
 8000546:	ea83 0101 	eor.w	r1, r3, r1
 800054a:	ea80 0202 	eor.w	r2, r0, r2
 800054e:	ea81 0303 	eor.w	r3, r1, r3
 8000552:	2d36      	cmp	r5, #54	; 0x36
 8000554:	bf88      	it	hi
 8000556:	bd30      	pophi	{r4, r5, pc}
 8000558:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800055c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000560:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000564:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000568:	d002      	beq.n	8000570 <__adddf3+0x70>
 800056a:	4240      	negs	r0, r0
 800056c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000570:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000574:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000578:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800057c:	d002      	beq.n	8000584 <__adddf3+0x84>
 800057e:	4252      	negs	r2, r2
 8000580:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000584:	ea94 0f05 	teq	r4, r5
 8000588:	f000 80a7 	beq.w	80006da <__adddf3+0x1da>
 800058c:	f1a4 0401 	sub.w	r4, r4, #1
 8000590:	f1d5 0e20 	rsbs	lr, r5, #32
 8000594:	db0d      	blt.n	80005b2 <__adddf3+0xb2>
 8000596:	fa02 fc0e 	lsl.w	ip, r2, lr
 800059a:	fa22 f205 	lsr.w	r2, r2, r5
 800059e:	1880      	adds	r0, r0, r2
 80005a0:	f141 0100 	adc.w	r1, r1, #0
 80005a4:	fa03 f20e 	lsl.w	r2, r3, lr
 80005a8:	1880      	adds	r0, r0, r2
 80005aa:	fa43 f305 	asr.w	r3, r3, r5
 80005ae:	4159      	adcs	r1, r3
 80005b0:	e00e      	b.n	80005d0 <__adddf3+0xd0>
 80005b2:	f1a5 0520 	sub.w	r5, r5, #32
 80005b6:	f10e 0e20 	add.w	lr, lr, #32
 80005ba:	2a01      	cmp	r2, #1
 80005bc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005c0:	bf28      	it	cs
 80005c2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005c6:	fa43 f305 	asr.w	r3, r3, r5
 80005ca:	18c0      	adds	r0, r0, r3
 80005cc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	d507      	bpl.n	80005e6 <__adddf3+0xe6>
 80005d6:	f04f 0e00 	mov.w	lr, #0
 80005da:	f1dc 0c00 	rsbs	ip, ip, #0
 80005de:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005e2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005e6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005ea:	d31b      	bcc.n	8000624 <__adddf3+0x124>
 80005ec:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005f0:	d30c      	bcc.n	800060c <__adddf3+0x10c>
 80005f2:	0849      	lsrs	r1, r1, #1
 80005f4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005f8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005fc:	f104 0401 	add.w	r4, r4, #1
 8000600:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000604:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000608:	f080 809a 	bcs.w	8000740 <__adddf3+0x240>
 800060c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000610:	bf08      	it	eq
 8000612:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000616:	f150 0000 	adcs.w	r0, r0, #0
 800061a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800061e:	ea41 0105 	orr.w	r1, r1, r5
 8000622:	bd30      	pop	{r4, r5, pc}
 8000624:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000628:	4140      	adcs	r0, r0
 800062a:	eb41 0101 	adc.w	r1, r1, r1
 800062e:	3c01      	subs	r4, #1
 8000630:	bf28      	it	cs
 8000632:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000636:	d2e9      	bcs.n	800060c <__adddf3+0x10c>
 8000638:	f091 0f00 	teq	r1, #0
 800063c:	bf04      	itt	eq
 800063e:	4601      	moveq	r1, r0
 8000640:	2000      	moveq	r0, #0
 8000642:	fab1 f381 	clz	r3, r1
 8000646:	bf08      	it	eq
 8000648:	3320      	addeq	r3, #32
 800064a:	f1a3 030b 	sub.w	r3, r3, #11
 800064e:	f1b3 0220 	subs.w	r2, r3, #32
 8000652:	da0c      	bge.n	800066e <__adddf3+0x16e>
 8000654:	320c      	adds	r2, #12
 8000656:	dd08      	ble.n	800066a <__adddf3+0x16a>
 8000658:	f102 0c14 	add.w	ip, r2, #20
 800065c:	f1c2 020c 	rsb	r2, r2, #12
 8000660:	fa01 f00c 	lsl.w	r0, r1, ip
 8000664:	fa21 f102 	lsr.w	r1, r1, r2
 8000668:	e00c      	b.n	8000684 <__adddf3+0x184>
 800066a:	f102 0214 	add.w	r2, r2, #20
 800066e:	bfd8      	it	le
 8000670:	f1c2 0c20 	rsble	ip, r2, #32
 8000674:	fa01 f102 	lsl.w	r1, r1, r2
 8000678:	fa20 fc0c 	lsr.w	ip, r0, ip
 800067c:	bfdc      	itt	le
 800067e:	ea41 010c 	orrle.w	r1, r1, ip
 8000682:	4090      	lslle	r0, r2
 8000684:	1ae4      	subs	r4, r4, r3
 8000686:	bfa2      	ittt	ge
 8000688:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800068c:	4329      	orrge	r1, r5
 800068e:	bd30      	popge	{r4, r5, pc}
 8000690:	ea6f 0404 	mvn.w	r4, r4
 8000694:	3c1f      	subs	r4, #31
 8000696:	da1c      	bge.n	80006d2 <__adddf3+0x1d2>
 8000698:	340c      	adds	r4, #12
 800069a:	dc0e      	bgt.n	80006ba <__adddf3+0x1ba>
 800069c:	f104 0414 	add.w	r4, r4, #20
 80006a0:	f1c4 0220 	rsb	r2, r4, #32
 80006a4:	fa20 f004 	lsr.w	r0, r0, r4
 80006a8:	fa01 f302 	lsl.w	r3, r1, r2
 80006ac:	ea40 0003 	orr.w	r0, r0, r3
 80006b0:	fa21 f304 	lsr.w	r3, r1, r4
 80006b4:	ea45 0103 	orr.w	r1, r5, r3
 80006b8:	bd30      	pop	{r4, r5, pc}
 80006ba:	f1c4 040c 	rsb	r4, r4, #12
 80006be:	f1c4 0220 	rsb	r2, r4, #32
 80006c2:	fa20 f002 	lsr.w	r0, r0, r2
 80006c6:	fa01 f304 	lsl.w	r3, r1, r4
 80006ca:	ea40 0003 	orr.w	r0, r0, r3
 80006ce:	4629      	mov	r1, r5
 80006d0:	bd30      	pop	{r4, r5, pc}
 80006d2:	fa21 f004 	lsr.w	r0, r1, r4
 80006d6:	4629      	mov	r1, r5
 80006d8:	bd30      	pop	{r4, r5, pc}
 80006da:	f094 0f00 	teq	r4, #0
 80006de:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006e2:	bf06      	itte	eq
 80006e4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006e8:	3401      	addeq	r4, #1
 80006ea:	3d01      	subne	r5, #1
 80006ec:	e74e      	b.n	800058c <__adddf3+0x8c>
 80006ee:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006f2:	bf18      	it	ne
 80006f4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006f8:	d029      	beq.n	800074e <__adddf3+0x24e>
 80006fa:	ea94 0f05 	teq	r4, r5
 80006fe:	bf08      	it	eq
 8000700:	ea90 0f02 	teqeq	r0, r2
 8000704:	d005      	beq.n	8000712 <__adddf3+0x212>
 8000706:	ea54 0c00 	orrs.w	ip, r4, r0
 800070a:	bf04      	itt	eq
 800070c:	4619      	moveq	r1, r3
 800070e:	4610      	moveq	r0, r2
 8000710:	bd30      	pop	{r4, r5, pc}
 8000712:	ea91 0f03 	teq	r1, r3
 8000716:	bf1e      	ittt	ne
 8000718:	2100      	movne	r1, #0
 800071a:	2000      	movne	r0, #0
 800071c:	bd30      	popne	{r4, r5, pc}
 800071e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000722:	d105      	bne.n	8000730 <__adddf3+0x230>
 8000724:	0040      	lsls	r0, r0, #1
 8000726:	4149      	adcs	r1, r1
 8000728:	bf28      	it	cs
 800072a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800072e:	bd30      	pop	{r4, r5, pc}
 8000730:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000734:	bf3c      	itt	cc
 8000736:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800073a:	bd30      	popcc	{r4, r5, pc}
 800073c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000740:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000744:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd30      	pop	{r4, r5, pc}
 800074e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000752:	bf1a      	itte	ne
 8000754:	4619      	movne	r1, r3
 8000756:	4610      	movne	r0, r2
 8000758:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800075c:	bf1c      	itt	ne
 800075e:	460b      	movne	r3, r1
 8000760:	4602      	movne	r2, r0
 8000762:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000766:	bf06      	itte	eq
 8000768:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800076c:	ea91 0f03 	teqeq	r1, r3
 8000770:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000774:	bd30      	pop	{r4, r5, pc}
 8000776:	bf00      	nop

08000778 <__aeabi_ui2d>:
 8000778:	f090 0f00 	teq	r0, #0
 800077c:	bf04      	itt	eq
 800077e:	2100      	moveq	r1, #0
 8000780:	4770      	bxeq	lr
 8000782:	b530      	push	{r4, r5, lr}
 8000784:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000788:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800078c:	f04f 0500 	mov.w	r5, #0
 8000790:	f04f 0100 	mov.w	r1, #0
 8000794:	e750      	b.n	8000638 <__adddf3+0x138>
 8000796:	bf00      	nop

08000798 <__aeabi_i2d>:
 8000798:	f090 0f00 	teq	r0, #0
 800079c:	bf04      	itt	eq
 800079e:	2100      	moveq	r1, #0
 80007a0:	4770      	bxeq	lr
 80007a2:	b530      	push	{r4, r5, lr}
 80007a4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007a8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007ac:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80007b0:	bf48      	it	mi
 80007b2:	4240      	negmi	r0, r0
 80007b4:	f04f 0100 	mov.w	r1, #0
 80007b8:	e73e      	b.n	8000638 <__adddf3+0x138>
 80007ba:	bf00      	nop

080007bc <__aeabi_f2d>:
 80007bc:	0042      	lsls	r2, r0, #1
 80007be:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007c2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007c6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007ca:	bf1f      	itttt	ne
 80007cc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007d0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007d4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007d8:	4770      	bxne	lr
 80007da:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007de:	bf08      	it	eq
 80007e0:	4770      	bxeq	lr
 80007e2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007e6:	bf04      	itt	eq
 80007e8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007ec:	4770      	bxeq	lr
 80007ee:	b530      	push	{r4, r5, lr}
 80007f0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007f8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007fc:	e71c      	b.n	8000638 <__adddf3+0x138>
 80007fe:	bf00      	nop

08000800 <__aeabi_ul2d>:
 8000800:	ea50 0201 	orrs.w	r2, r0, r1
 8000804:	bf08      	it	eq
 8000806:	4770      	bxeq	lr
 8000808:	b530      	push	{r4, r5, lr}
 800080a:	f04f 0500 	mov.w	r5, #0
 800080e:	e00a      	b.n	8000826 <__aeabi_l2d+0x16>

08000810 <__aeabi_l2d>:
 8000810:	ea50 0201 	orrs.w	r2, r0, r1
 8000814:	bf08      	it	eq
 8000816:	4770      	bxeq	lr
 8000818:	b530      	push	{r4, r5, lr}
 800081a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800081e:	d502      	bpl.n	8000826 <__aeabi_l2d+0x16>
 8000820:	4240      	negs	r0, r0
 8000822:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000826:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800082a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800082e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000832:	f43f aed8 	beq.w	80005e6 <__adddf3+0xe6>
 8000836:	f04f 0203 	mov.w	r2, #3
 800083a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800083e:	bf18      	it	ne
 8000840:	3203      	addne	r2, #3
 8000842:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000846:	bf18      	it	ne
 8000848:	3203      	addne	r2, #3
 800084a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800084e:	f1c2 0320 	rsb	r3, r2, #32
 8000852:	fa00 fc03 	lsl.w	ip, r0, r3
 8000856:	fa20 f002 	lsr.w	r0, r0, r2
 800085a:	fa01 fe03 	lsl.w	lr, r1, r3
 800085e:	ea40 000e 	orr.w	r0, r0, lr
 8000862:	fa21 f102 	lsr.w	r1, r1, r2
 8000866:	4414      	add	r4, r2
 8000868:	e6bd      	b.n	80005e6 <__adddf3+0xe6>
 800086a:	bf00      	nop

0800086c <__aeabi_d2f>:
 800086c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000870:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000874:	bf24      	itt	cs
 8000876:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800087a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800087e:	d90d      	bls.n	800089c <__aeabi_d2f+0x30>
 8000880:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000884:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000888:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800088c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000890:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000894:	bf08      	it	eq
 8000896:	f020 0001 	biceq.w	r0, r0, #1
 800089a:	4770      	bx	lr
 800089c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80008a0:	d121      	bne.n	80008e6 <__aeabi_d2f+0x7a>
 80008a2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80008a6:	bfbc      	itt	lt
 80008a8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80008ac:	4770      	bxlt	lr
 80008ae:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008b2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80008b6:	f1c2 0218 	rsb	r2, r2, #24
 80008ba:	f1c2 0c20 	rsb	ip, r2, #32
 80008be:	fa10 f30c 	lsls.w	r3, r0, ip
 80008c2:	fa20 f002 	lsr.w	r0, r0, r2
 80008c6:	bf18      	it	ne
 80008c8:	f040 0001 	orrne.w	r0, r0, #1
 80008cc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008d0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80008d4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80008d8:	ea40 000c 	orr.w	r0, r0, ip
 80008dc:	fa23 f302 	lsr.w	r3, r3, r2
 80008e0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80008e4:	e7cc      	b.n	8000880 <__aeabi_d2f+0x14>
 80008e6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80008ea:	d107      	bne.n	80008fc <__aeabi_d2f+0x90>
 80008ec:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80008f0:	bf1e      	ittt	ne
 80008f2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80008f6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80008fa:	4770      	bxne	lr
 80008fc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000900:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000904:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000908:	4770      	bx	lr
 800090a:	bf00      	nop

0800090c <__aeabi_uldivmod>:
 800090c:	b953      	cbnz	r3, 8000924 <__aeabi_uldivmod+0x18>
 800090e:	b94a      	cbnz	r2, 8000924 <__aeabi_uldivmod+0x18>
 8000910:	2900      	cmp	r1, #0
 8000912:	bf08      	it	eq
 8000914:	2800      	cmpeq	r0, #0
 8000916:	bf1c      	itt	ne
 8000918:	f04f 31ff 	movne.w	r1, #4294967295
 800091c:	f04f 30ff 	movne.w	r0, #4294967295
 8000920:	f000 b970 	b.w	8000c04 <__aeabi_idiv0>
 8000924:	f1ad 0c08 	sub.w	ip, sp, #8
 8000928:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800092c:	f000 f806 	bl	800093c <__udivmoddi4>
 8000930:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000934:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000938:	b004      	add	sp, #16
 800093a:	4770      	bx	lr

0800093c <__udivmoddi4>:
 800093c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000940:	9e08      	ldr	r6, [sp, #32]
 8000942:	460d      	mov	r5, r1
 8000944:	4604      	mov	r4, r0
 8000946:	460f      	mov	r7, r1
 8000948:	2b00      	cmp	r3, #0
 800094a:	d14a      	bne.n	80009e2 <__udivmoddi4+0xa6>
 800094c:	428a      	cmp	r2, r1
 800094e:	4694      	mov	ip, r2
 8000950:	d965      	bls.n	8000a1e <__udivmoddi4+0xe2>
 8000952:	fab2 f382 	clz	r3, r2
 8000956:	b143      	cbz	r3, 800096a <__udivmoddi4+0x2e>
 8000958:	fa02 fc03 	lsl.w	ip, r2, r3
 800095c:	f1c3 0220 	rsb	r2, r3, #32
 8000960:	409f      	lsls	r7, r3
 8000962:	fa20 f202 	lsr.w	r2, r0, r2
 8000966:	4317      	orrs	r7, r2
 8000968:	409c      	lsls	r4, r3
 800096a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800096e:	fa1f f58c 	uxth.w	r5, ip
 8000972:	fbb7 f1fe 	udiv	r1, r7, lr
 8000976:	0c22      	lsrs	r2, r4, #16
 8000978:	fb0e 7711 	mls	r7, lr, r1, r7
 800097c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000980:	fb01 f005 	mul.w	r0, r1, r5
 8000984:	4290      	cmp	r0, r2
 8000986:	d90a      	bls.n	800099e <__udivmoddi4+0x62>
 8000988:	eb1c 0202 	adds.w	r2, ip, r2
 800098c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000990:	f080 811c 	bcs.w	8000bcc <__udivmoddi4+0x290>
 8000994:	4290      	cmp	r0, r2
 8000996:	f240 8119 	bls.w	8000bcc <__udivmoddi4+0x290>
 800099a:	3902      	subs	r1, #2
 800099c:	4462      	add	r2, ip
 800099e:	1a12      	subs	r2, r2, r0
 80009a0:	b2a4      	uxth	r4, r4
 80009a2:	fbb2 f0fe 	udiv	r0, r2, lr
 80009a6:	fb0e 2210 	mls	r2, lr, r0, r2
 80009aa:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80009ae:	fb00 f505 	mul.w	r5, r0, r5
 80009b2:	42a5      	cmp	r5, r4
 80009b4:	d90a      	bls.n	80009cc <__udivmoddi4+0x90>
 80009b6:	eb1c 0404 	adds.w	r4, ip, r4
 80009ba:	f100 32ff 	add.w	r2, r0, #4294967295
 80009be:	f080 8107 	bcs.w	8000bd0 <__udivmoddi4+0x294>
 80009c2:	42a5      	cmp	r5, r4
 80009c4:	f240 8104 	bls.w	8000bd0 <__udivmoddi4+0x294>
 80009c8:	4464      	add	r4, ip
 80009ca:	3802      	subs	r0, #2
 80009cc:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80009d0:	1b64      	subs	r4, r4, r5
 80009d2:	2100      	movs	r1, #0
 80009d4:	b11e      	cbz	r6, 80009de <__udivmoddi4+0xa2>
 80009d6:	40dc      	lsrs	r4, r3
 80009d8:	2300      	movs	r3, #0
 80009da:	e9c6 4300 	strd	r4, r3, [r6]
 80009de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009e2:	428b      	cmp	r3, r1
 80009e4:	d908      	bls.n	80009f8 <__udivmoddi4+0xbc>
 80009e6:	2e00      	cmp	r6, #0
 80009e8:	f000 80ed 	beq.w	8000bc6 <__udivmoddi4+0x28a>
 80009ec:	2100      	movs	r1, #0
 80009ee:	e9c6 0500 	strd	r0, r5, [r6]
 80009f2:	4608      	mov	r0, r1
 80009f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009f8:	fab3 f183 	clz	r1, r3
 80009fc:	2900      	cmp	r1, #0
 80009fe:	d149      	bne.n	8000a94 <__udivmoddi4+0x158>
 8000a00:	42ab      	cmp	r3, r5
 8000a02:	d302      	bcc.n	8000a0a <__udivmoddi4+0xce>
 8000a04:	4282      	cmp	r2, r0
 8000a06:	f200 80f8 	bhi.w	8000bfa <__udivmoddi4+0x2be>
 8000a0a:	1a84      	subs	r4, r0, r2
 8000a0c:	eb65 0203 	sbc.w	r2, r5, r3
 8000a10:	2001      	movs	r0, #1
 8000a12:	4617      	mov	r7, r2
 8000a14:	2e00      	cmp	r6, #0
 8000a16:	d0e2      	beq.n	80009de <__udivmoddi4+0xa2>
 8000a18:	e9c6 4700 	strd	r4, r7, [r6]
 8000a1c:	e7df      	b.n	80009de <__udivmoddi4+0xa2>
 8000a1e:	b902      	cbnz	r2, 8000a22 <__udivmoddi4+0xe6>
 8000a20:	deff      	udf	#255	; 0xff
 8000a22:	fab2 f382 	clz	r3, r2
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	f040 8090 	bne.w	8000b4c <__udivmoddi4+0x210>
 8000a2c:	1a8a      	subs	r2, r1, r2
 8000a2e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a32:	fa1f fe8c 	uxth.w	lr, ip
 8000a36:	2101      	movs	r1, #1
 8000a38:	fbb2 f5f7 	udiv	r5, r2, r7
 8000a3c:	fb07 2015 	mls	r0, r7, r5, r2
 8000a40:	0c22      	lsrs	r2, r4, #16
 8000a42:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000a46:	fb0e f005 	mul.w	r0, lr, r5
 8000a4a:	4290      	cmp	r0, r2
 8000a4c:	d908      	bls.n	8000a60 <__udivmoddi4+0x124>
 8000a4e:	eb1c 0202 	adds.w	r2, ip, r2
 8000a52:	f105 38ff 	add.w	r8, r5, #4294967295
 8000a56:	d202      	bcs.n	8000a5e <__udivmoddi4+0x122>
 8000a58:	4290      	cmp	r0, r2
 8000a5a:	f200 80cb 	bhi.w	8000bf4 <__udivmoddi4+0x2b8>
 8000a5e:	4645      	mov	r5, r8
 8000a60:	1a12      	subs	r2, r2, r0
 8000a62:	b2a4      	uxth	r4, r4
 8000a64:	fbb2 f0f7 	udiv	r0, r2, r7
 8000a68:	fb07 2210 	mls	r2, r7, r0, r2
 8000a6c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000a70:	fb0e fe00 	mul.w	lr, lr, r0
 8000a74:	45a6      	cmp	lr, r4
 8000a76:	d908      	bls.n	8000a8a <__udivmoddi4+0x14e>
 8000a78:	eb1c 0404 	adds.w	r4, ip, r4
 8000a7c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000a80:	d202      	bcs.n	8000a88 <__udivmoddi4+0x14c>
 8000a82:	45a6      	cmp	lr, r4
 8000a84:	f200 80bb 	bhi.w	8000bfe <__udivmoddi4+0x2c2>
 8000a88:	4610      	mov	r0, r2
 8000a8a:	eba4 040e 	sub.w	r4, r4, lr
 8000a8e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000a92:	e79f      	b.n	80009d4 <__udivmoddi4+0x98>
 8000a94:	f1c1 0720 	rsb	r7, r1, #32
 8000a98:	408b      	lsls	r3, r1
 8000a9a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000a9e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000aa2:	fa05 f401 	lsl.w	r4, r5, r1
 8000aa6:	fa20 f307 	lsr.w	r3, r0, r7
 8000aaa:	40fd      	lsrs	r5, r7
 8000aac:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ab0:	4323      	orrs	r3, r4
 8000ab2:	fbb5 f8f9 	udiv	r8, r5, r9
 8000ab6:	fa1f fe8c 	uxth.w	lr, ip
 8000aba:	fb09 5518 	mls	r5, r9, r8, r5
 8000abe:	0c1c      	lsrs	r4, r3, #16
 8000ac0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ac4:	fb08 f50e 	mul.w	r5, r8, lr
 8000ac8:	42a5      	cmp	r5, r4
 8000aca:	fa02 f201 	lsl.w	r2, r2, r1
 8000ace:	fa00 f001 	lsl.w	r0, r0, r1
 8000ad2:	d90b      	bls.n	8000aec <__udivmoddi4+0x1b0>
 8000ad4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ad8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000adc:	f080 8088 	bcs.w	8000bf0 <__udivmoddi4+0x2b4>
 8000ae0:	42a5      	cmp	r5, r4
 8000ae2:	f240 8085 	bls.w	8000bf0 <__udivmoddi4+0x2b4>
 8000ae6:	f1a8 0802 	sub.w	r8, r8, #2
 8000aea:	4464      	add	r4, ip
 8000aec:	1b64      	subs	r4, r4, r5
 8000aee:	b29d      	uxth	r5, r3
 8000af0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000af4:	fb09 4413 	mls	r4, r9, r3, r4
 8000af8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000afc:	fb03 fe0e 	mul.w	lr, r3, lr
 8000b00:	45a6      	cmp	lr, r4
 8000b02:	d908      	bls.n	8000b16 <__udivmoddi4+0x1da>
 8000b04:	eb1c 0404 	adds.w	r4, ip, r4
 8000b08:	f103 35ff 	add.w	r5, r3, #4294967295
 8000b0c:	d26c      	bcs.n	8000be8 <__udivmoddi4+0x2ac>
 8000b0e:	45a6      	cmp	lr, r4
 8000b10:	d96a      	bls.n	8000be8 <__udivmoddi4+0x2ac>
 8000b12:	3b02      	subs	r3, #2
 8000b14:	4464      	add	r4, ip
 8000b16:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b1a:	fba3 9502 	umull	r9, r5, r3, r2
 8000b1e:	eba4 040e 	sub.w	r4, r4, lr
 8000b22:	42ac      	cmp	r4, r5
 8000b24:	46c8      	mov	r8, r9
 8000b26:	46ae      	mov	lr, r5
 8000b28:	d356      	bcc.n	8000bd8 <__udivmoddi4+0x29c>
 8000b2a:	d053      	beq.n	8000bd4 <__udivmoddi4+0x298>
 8000b2c:	b156      	cbz	r6, 8000b44 <__udivmoddi4+0x208>
 8000b2e:	ebb0 0208 	subs.w	r2, r0, r8
 8000b32:	eb64 040e 	sbc.w	r4, r4, lr
 8000b36:	fa04 f707 	lsl.w	r7, r4, r7
 8000b3a:	40ca      	lsrs	r2, r1
 8000b3c:	40cc      	lsrs	r4, r1
 8000b3e:	4317      	orrs	r7, r2
 8000b40:	e9c6 7400 	strd	r7, r4, [r6]
 8000b44:	4618      	mov	r0, r3
 8000b46:	2100      	movs	r1, #0
 8000b48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b4c:	f1c3 0120 	rsb	r1, r3, #32
 8000b50:	fa02 fc03 	lsl.w	ip, r2, r3
 8000b54:	fa20 f201 	lsr.w	r2, r0, r1
 8000b58:	fa25 f101 	lsr.w	r1, r5, r1
 8000b5c:	409d      	lsls	r5, r3
 8000b5e:	432a      	orrs	r2, r5
 8000b60:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b64:	fa1f fe8c 	uxth.w	lr, ip
 8000b68:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b6c:	fb07 1510 	mls	r5, r7, r0, r1
 8000b70:	0c11      	lsrs	r1, r2, #16
 8000b72:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000b76:	fb00 f50e 	mul.w	r5, r0, lr
 8000b7a:	428d      	cmp	r5, r1
 8000b7c:	fa04 f403 	lsl.w	r4, r4, r3
 8000b80:	d908      	bls.n	8000b94 <__udivmoddi4+0x258>
 8000b82:	eb1c 0101 	adds.w	r1, ip, r1
 8000b86:	f100 38ff 	add.w	r8, r0, #4294967295
 8000b8a:	d22f      	bcs.n	8000bec <__udivmoddi4+0x2b0>
 8000b8c:	428d      	cmp	r5, r1
 8000b8e:	d92d      	bls.n	8000bec <__udivmoddi4+0x2b0>
 8000b90:	3802      	subs	r0, #2
 8000b92:	4461      	add	r1, ip
 8000b94:	1b49      	subs	r1, r1, r5
 8000b96:	b292      	uxth	r2, r2
 8000b98:	fbb1 f5f7 	udiv	r5, r1, r7
 8000b9c:	fb07 1115 	mls	r1, r7, r5, r1
 8000ba0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ba4:	fb05 f10e 	mul.w	r1, r5, lr
 8000ba8:	4291      	cmp	r1, r2
 8000baa:	d908      	bls.n	8000bbe <__udivmoddi4+0x282>
 8000bac:	eb1c 0202 	adds.w	r2, ip, r2
 8000bb0:	f105 38ff 	add.w	r8, r5, #4294967295
 8000bb4:	d216      	bcs.n	8000be4 <__udivmoddi4+0x2a8>
 8000bb6:	4291      	cmp	r1, r2
 8000bb8:	d914      	bls.n	8000be4 <__udivmoddi4+0x2a8>
 8000bba:	3d02      	subs	r5, #2
 8000bbc:	4462      	add	r2, ip
 8000bbe:	1a52      	subs	r2, r2, r1
 8000bc0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000bc4:	e738      	b.n	8000a38 <__udivmoddi4+0xfc>
 8000bc6:	4631      	mov	r1, r6
 8000bc8:	4630      	mov	r0, r6
 8000bca:	e708      	b.n	80009de <__udivmoddi4+0xa2>
 8000bcc:	4639      	mov	r1, r7
 8000bce:	e6e6      	b.n	800099e <__udivmoddi4+0x62>
 8000bd0:	4610      	mov	r0, r2
 8000bd2:	e6fb      	b.n	80009cc <__udivmoddi4+0x90>
 8000bd4:	4548      	cmp	r0, r9
 8000bd6:	d2a9      	bcs.n	8000b2c <__udivmoddi4+0x1f0>
 8000bd8:	ebb9 0802 	subs.w	r8, r9, r2
 8000bdc:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000be0:	3b01      	subs	r3, #1
 8000be2:	e7a3      	b.n	8000b2c <__udivmoddi4+0x1f0>
 8000be4:	4645      	mov	r5, r8
 8000be6:	e7ea      	b.n	8000bbe <__udivmoddi4+0x282>
 8000be8:	462b      	mov	r3, r5
 8000bea:	e794      	b.n	8000b16 <__udivmoddi4+0x1da>
 8000bec:	4640      	mov	r0, r8
 8000bee:	e7d1      	b.n	8000b94 <__udivmoddi4+0x258>
 8000bf0:	46d0      	mov	r8, sl
 8000bf2:	e77b      	b.n	8000aec <__udivmoddi4+0x1b0>
 8000bf4:	3d02      	subs	r5, #2
 8000bf6:	4462      	add	r2, ip
 8000bf8:	e732      	b.n	8000a60 <__udivmoddi4+0x124>
 8000bfa:	4608      	mov	r0, r1
 8000bfc:	e70a      	b.n	8000a14 <__udivmoddi4+0xd8>
 8000bfe:	4464      	add	r4, ip
 8000c00:	3802      	subs	r0, #2
 8000c02:	e742      	b.n	8000a8a <__udivmoddi4+0x14e>

08000c04 <__aeabi_idiv0>:
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c0c:	f001 fd48 	bl	80026a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c10:	f000 f806 	bl	8000c20 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c14:	f000 f898 	bl	8000d48 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000c18:	f000 f86c 	bl	8000cf4 <MX_USART2_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c1c:	e7fe      	b.n	8000c1c <main+0x14>
	...

08000c20 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b094      	sub	sp, #80	; 0x50
 8000c24:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c26:	f107 0320 	add.w	r3, r7, #32
 8000c2a:	2230      	movs	r2, #48	; 0x30
 8000c2c:	2100      	movs	r1, #0
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f004 f842 	bl	8004cb8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c34:	f107 030c 	add.w	r3, r7, #12
 8000c38:	2200      	movs	r2, #0
 8000c3a:	601a      	str	r2, [r3, #0]
 8000c3c:	605a      	str	r2, [r3, #4]
 8000c3e:	609a      	str	r2, [r3, #8]
 8000c40:	60da      	str	r2, [r3, #12]
 8000c42:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c44:	2300      	movs	r3, #0
 8000c46:	60bb      	str	r3, [r7, #8]
 8000c48:	4b28      	ldr	r3, [pc, #160]	; (8000cec <SystemClock_Config+0xcc>)
 8000c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c4c:	4a27      	ldr	r2, [pc, #156]	; (8000cec <SystemClock_Config+0xcc>)
 8000c4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c52:	6413      	str	r3, [r2, #64]	; 0x40
 8000c54:	4b25      	ldr	r3, [pc, #148]	; (8000cec <SystemClock_Config+0xcc>)
 8000c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c5c:	60bb      	str	r3, [r7, #8]
 8000c5e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c60:	2300      	movs	r3, #0
 8000c62:	607b      	str	r3, [r7, #4]
 8000c64:	4b22      	ldr	r3, [pc, #136]	; (8000cf0 <SystemClock_Config+0xd0>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	4a21      	ldr	r2, [pc, #132]	; (8000cf0 <SystemClock_Config+0xd0>)
 8000c6a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c6e:	6013      	str	r3, [r2, #0]
 8000c70:	4b1f      	ldr	r3, [pc, #124]	; (8000cf0 <SystemClock_Config+0xd0>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c78:	607b      	str	r3, [r7, #4]
 8000c7a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c7c:	2301      	movs	r3, #1
 8000c7e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c80:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c84:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c86:	2302      	movs	r3, #2
 8000c88:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c8a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000c8e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000c90:	2304      	movs	r3, #4
 8000c92:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000c94:	23a8      	movs	r3, #168	; 0xa8
 8000c96:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c98:	2302      	movs	r3, #2
 8000c9a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000c9c:	2307      	movs	r3, #7
 8000c9e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ca0:	f107 0320 	add.w	r3, r7, #32
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f002 f8ad 	bl	8002e04 <HAL_RCC_OscConfig>
 8000caa:	4603      	mov	r3, r0
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d001      	beq.n	8000cb4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000cb0:	f001 fb64 	bl	800237c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cb4:	230f      	movs	r3, #15
 8000cb6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cb8:	2302      	movs	r3, #2
 8000cba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000cc0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000cc4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000cc6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cca:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000ccc:	f107 030c 	add.w	r3, r7, #12
 8000cd0:	2105      	movs	r1, #5
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f002 fb0e 	bl	80032f4 <HAL_RCC_ClockConfig>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d001      	beq.n	8000ce2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000cde:	f001 fb4d 	bl	800237c <Error_Handler>
  }
}
 8000ce2:	bf00      	nop
 8000ce4:	3750      	adds	r7, #80	; 0x50
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	40023800 	.word	0x40023800
 8000cf0:	40007000 	.word	0x40007000

08000cf4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000cf8:	4b11      	ldr	r3, [pc, #68]	; (8000d40 <MX_USART2_UART_Init+0x4c>)
 8000cfa:	4a12      	ldr	r2, [pc, #72]	; (8000d44 <MX_USART2_UART_Init+0x50>)
 8000cfc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000cfe:	4b10      	ldr	r3, [pc, #64]	; (8000d40 <MX_USART2_UART_Init+0x4c>)
 8000d00:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d04:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d06:	4b0e      	ldr	r3, [pc, #56]	; (8000d40 <MX_USART2_UART_Init+0x4c>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d0c:	4b0c      	ldr	r3, [pc, #48]	; (8000d40 <MX_USART2_UART_Init+0x4c>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d12:	4b0b      	ldr	r3, [pc, #44]	; (8000d40 <MX_USART2_UART_Init+0x4c>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d18:	4b09      	ldr	r3, [pc, #36]	; (8000d40 <MX_USART2_UART_Init+0x4c>)
 8000d1a:	220c      	movs	r2, #12
 8000d1c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d1e:	4b08      	ldr	r3, [pc, #32]	; (8000d40 <MX_USART2_UART_Init+0x4c>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d24:	4b06      	ldr	r3, [pc, #24]	; (8000d40 <MX_USART2_UART_Init+0x4c>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d2a:	4805      	ldr	r0, [pc, #20]	; (8000d40 <MX_USART2_UART_Init+0x4c>)
 8000d2c:	f002 fd02 	bl	8003734 <HAL_UART_Init>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d001      	beq.n	8000d3a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000d36:	f001 fb21 	bl	800237c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d3a:	bf00      	nop
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	20000188 	.word	0x20000188
 8000d44:	40004400 	.word	0x40004400

08000d48 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b083      	sub	sp, #12
 8000d4c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d4e:	2300      	movs	r3, #0
 8000d50:	607b      	str	r3, [r7, #4]
 8000d52:	4b10      	ldr	r3, [pc, #64]	; (8000d94 <MX_GPIO_Init+0x4c>)
 8000d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d56:	4a0f      	ldr	r2, [pc, #60]	; (8000d94 <MX_GPIO_Init+0x4c>)
 8000d58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d5e:	4b0d      	ldr	r3, [pc, #52]	; (8000d94 <MX_GPIO_Init+0x4c>)
 8000d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d66:	607b      	str	r3, [r7, #4]
 8000d68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	603b      	str	r3, [r7, #0]
 8000d6e:	4b09      	ldr	r3, [pc, #36]	; (8000d94 <MX_GPIO_Init+0x4c>)
 8000d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d72:	4a08      	ldr	r2, [pc, #32]	; (8000d94 <MX_GPIO_Init+0x4c>)
 8000d74:	f043 0301 	orr.w	r3, r3, #1
 8000d78:	6313      	str	r3, [r2, #48]	; 0x30
 8000d7a:	4b06      	ldr	r3, [pc, #24]	; (8000d94 <MX_GPIO_Init+0x4c>)
 8000d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7e:	f003 0301 	and.w	r3, r3, #1
 8000d82:	603b      	str	r3, [r7, #0]
 8000d84:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d86:	bf00      	nop
 8000d88:	370c      	adds	r7, #12
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr
 8000d92:	bf00      	nop
 8000d94:	40023800 	.word	0x40023800

08000d98 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000d98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000d9c:	f5ad 7d2e 	sub.w	sp, sp, #696	; 0x2b8
 8000da0:	af0a      	add	r7, sp, #40	; 0x28
 8000da2:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8000da6:	f5a3 7321 	sub.w	r3, r3, #644	; 0x284
 8000daa:	6018      	str	r0, [r3, #0]
    printf("UART RX Callback entered!\n");
 8000dac:	4898      	ldr	r0, [pc, #608]	; (8001010 <HAL_UART_RxCpltCallback+0x278>)
 8000dae:	f003 fe83 	bl	8004ab8 <puts>
    if (huart->Instance == USART2) {
 8000db2:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8000db6:	f5a3 7321 	sub.w	r3, r3, #644	; 0x284
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	4a95      	ldr	r2, [pc, #596]	; (8001014 <HAL_UART_RxCpltCallback+0x27c>)
 8000dc0:	4293      	cmp	r3, r2
 8000dc2:	f041 82c0 	bne.w	8002346 <HAL_UART_RxCpltCallback+0x15ae>
    //Increased buffer size for potential longer commands.


    	    /* USER CODE BEGIN 3 */
    		  if (strcmp(RxBuffer, "soc") == 0) {
 8000dc6:	4994      	ldr	r1, [pc, #592]	; (8001018 <HAL_UART_RxCpltCallback+0x280>)
 8000dc8:	4894      	ldr	r0, [pc, #592]	; (800101c <HAL_UART_RxCpltCallback+0x284>)
 8000dca:	f7ff fa01 	bl	80001d0 <strcmp>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	f040 812d 	bne.w	8001030 <HAL_UART_RxCpltCallback+0x298>
    		      uint16_t cumulative_voltage = (TxData_SOC[0] << 8) | TxData_SOC[1];
 8000dd6:	4b92      	ldr	r3, [pc, #584]	; (8001020 <HAL_UART_RxCpltCallback+0x288>)
 8000dd8:	781b      	ldrb	r3, [r3, #0]
 8000dda:	021b      	lsls	r3, r3, #8
 8000ddc:	b21a      	sxth	r2, r3
 8000dde:	4b90      	ldr	r3, [pc, #576]	; (8001020 <HAL_UART_RxCpltCallback+0x288>)
 8000de0:	785b      	ldrb	r3, [r3, #1]
 8000de2:	b21b      	sxth	r3, r3
 8000de4:	4313      	orrs	r3, r2
 8000de6:	b21b      	sxth	r3, r3
 8000de8:	f8a7 3220 	strh.w	r3, [r7, #544]	; 0x220
    		      float cumulative_voltage_real = cumulative_voltage * 0.1;
 8000dec:	f8b7 3220 	ldrh.w	r3, [r7, #544]	; 0x220
 8000df0:	4618      	mov	r0, r3
 8000df2:	f7ff fcd1 	bl	8000798 <__aeabi_i2d>
 8000df6:	a384      	add	r3, pc, #528	; (adr r3, 8001008 <HAL_UART_RxCpltCallback+0x270>)
 8000df8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dfc:	f7ff fa50 	bl	80002a0 <__aeabi_dmul>
 8000e00:	4602      	mov	r2, r0
 8000e02:	460b      	mov	r3, r1
 8000e04:	4610      	mov	r0, r2
 8000e06:	4619      	mov	r1, r3
 8000e08:	f7ff fd30 	bl	800086c <__aeabi_d2f>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c

    		      uint16_t gather_voltage = (TxData_SOC[2] << 8) | TxData_SOC[3];
 8000e12:	4b83      	ldr	r3, [pc, #524]	; (8001020 <HAL_UART_RxCpltCallback+0x288>)
 8000e14:	789b      	ldrb	r3, [r3, #2]
 8000e16:	021b      	lsls	r3, r3, #8
 8000e18:	b21a      	sxth	r2, r3
 8000e1a:	4b81      	ldr	r3, [pc, #516]	; (8001020 <HAL_UART_RxCpltCallback+0x288>)
 8000e1c:	78db      	ldrb	r3, [r3, #3]
 8000e1e:	b21b      	sxth	r3, r3
 8000e20:	4313      	orrs	r3, r2
 8000e22:	b21b      	sxth	r3, r3
 8000e24:	f8a7 321a 	strh.w	r3, [r7, #538]	; 0x21a
    		      float gather_voltage_real = gather_voltage * 0.1;
 8000e28:	f8b7 321a 	ldrh.w	r3, [r7, #538]	; 0x21a
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f7ff fcb3 	bl	8000798 <__aeabi_i2d>
 8000e32:	a375      	add	r3, pc, #468	; (adr r3, 8001008 <HAL_UART_RxCpltCallback+0x270>)
 8000e34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e38:	f7ff fa32 	bl	80002a0 <__aeabi_dmul>
 8000e3c:	4602      	mov	r2, r0
 8000e3e:	460b      	mov	r3, r1
 8000e40:	4610      	mov	r0, r2
 8000e42:	4619      	mov	r1, r3
 8000e44:	f7ff fd12 	bl	800086c <__aeabi_d2f>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214

    		      uint16_t current_raw = (TxData_SOC[4] << 8) | TxData_SOC[5];
 8000e4e:	4b74      	ldr	r3, [pc, #464]	; (8001020 <HAL_UART_RxCpltCallback+0x288>)
 8000e50:	791b      	ldrb	r3, [r3, #4]
 8000e52:	021b      	lsls	r3, r3, #8
 8000e54:	b21a      	sxth	r2, r3
 8000e56:	4b72      	ldr	r3, [pc, #456]	; (8001020 <HAL_UART_RxCpltCallback+0x288>)
 8000e58:	795b      	ldrb	r3, [r3, #5]
 8000e5a:	b21b      	sxth	r3, r3
 8000e5c:	4313      	orrs	r3, r2
 8000e5e:	b21b      	sxth	r3, r3
 8000e60:	f8a7 3212 	strh.w	r3, [r7, #530]	; 0x212
    		      float current_real = (current_raw - 30000) * 0.1;
 8000e64:	f8b7 3212 	ldrh.w	r3, [r7, #530]	; 0x212
 8000e68:	f5a3 43ea 	sub.w	r3, r3, #29952	; 0x7500
 8000e6c:	3b30      	subs	r3, #48	; 0x30
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f7ff fc92 	bl	8000798 <__aeabi_i2d>
 8000e74:	a364      	add	r3, pc, #400	; (adr r3, 8001008 <HAL_UART_RxCpltCallback+0x270>)
 8000e76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e7a:	f7ff fa11 	bl	80002a0 <__aeabi_dmul>
 8000e7e:	4602      	mov	r2, r0
 8000e80:	460b      	mov	r3, r1
 8000e82:	4610      	mov	r0, r2
 8000e84:	4619      	mov	r1, r3
 8000e86:	f7ff fcf1 	bl	800086c <__aeabi_d2f>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c

    		      uint16_t soc = (TxData_SOC[6] << 8) | TxData_SOC[7];
 8000e90:	4b63      	ldr	r3, [pc, #396]	; (8001020 <HAL_UART_RxCpltCallback+0x288>)
 8000e92:	799b      	ldrb	r3, [r3, #6]
 8000e94:	021b      	lsls	r3, r3, #8
 8000e96:	b21a      	sxth	r2, r3
 8000e98:	4b61      	ldr	r3, [pc, #388]	; (8001020 <HAL_UART_RxCpltCallback+0x288>)
 8000e9a:	79db      	ldrb	r3, [r3, #7]
 8000e9c:	b21b      	sxth	r3, r3
 8000e9e:	4313      	orrs	r3, r2
 8000ea0:	b21b      	sxth	r3, r3
 8000ea2:	f8a7 320a 	strh.w	r3, [r7, #522]	; 0x20a
    		      float soc_real = soc * 0.1;
 8000ea6:	f8b7 320a 	ldrh.w	r3, [r7, #522]	; 0x20a
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f7ff fc74 	bl	8000798 <__aeabi_i2d>
 8000eb0:	a355      	add	r3, pc, #340	; (adr r3, 8001008 <HAL_UART_RxCpltCallback+0x270>)
 8000eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000eb6:	f7ff f9f3 	bl	80002a0 <__aeabi_dmul>
 8000eba:	4602      	mov	r2, r0
 8000ebc:	460b      	mov	r3, r1
 8000ebe:	4610      	mov	r0, r2
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	f7ff fcd3 	bl	800086c <__aeabi_d2f>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204

    		      char data_string[100];
    		      sprintf(data_string,
 8000ecc:	edd7 7a87 	vldr	s15, [r7, #540]	; 0x21c
 8000ed0:	eefd 6ae7 	vcvt.s32.f32	s13, s15
    		              "Cumulative Voltage: %d.%d V, Gather Voltage: %d.%d V, Current: %d.%d A, SOC: %d.%d%%\n ",
    		              (int)cumulative_voltage_real, (int)(cumulative_voltage_real * 10) % 10,
 8000ed4:	edd7 7a87 	vldr	s15, [r7, #540]	; 0x21c
 8000ed8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8000edc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ee0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000ee4:	ee17 2a90 	vmov	r2, s15
    		      sprintf(data_string,
 8000ee8:	4b4e      	ldr	r3, [pc, #312]	; (8001024 <HAL_UART_RxCpltCallback+0x28c>)
 8000eea:	fb83 1302 	smull	r1, r3, r3, r2
 8000eee:	1099      	asrs	r1, r3, #2
 8000ef0:	17d3      	asrs	r3, r2, #31
 8000ef2:	1acc      	subs	r4, r1, r3
 8000ef4:	4623      	mov	r3, r4
 8000ef6:	009b      	lsls	r3, r3, #2
 8000ef8:	4423      	add	r3, r4
 8000efa:	005b      	lsls	r3, r3, #1
 8000efc:	1ad4      	subs	r4, r2, r3
 8000efe:	edd7 7a85 	vldr	s15, [r7, #532]	; 0x214
 8000f02:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f06:	ee17 6a90 	vmov	r6, s15
    		              (int)gather_voltage_real, (int)(gather_voltage_real * 10) % 10,
 8000f0a:	edd7 7a85 	vldr	s15, [r7, #532]	; 0x214
 8000f0e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8000f12:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f16:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f1a:	ee17 1a90 	vmov	r1, s15
    		      sprintf(data_string,
 8000f1e:	4b41      	ldr	r3, [pc, #260]	; (8001024 <HAL_UART_RxCpltCallback+0x28c>)
 8000f20:	fb83 2301 	smull	r2, r3, r3, r1
 8000f24:	109a      	asrs	r2, r3, #2
 8000f26:	17cb      	asrs	r3, r1, #31
 8000f28:	1ad2      	subs	r2, r2, r3
 8000f2a:	4613      	mov	r3, r2
 8000f2c:	009b      	lsls	r3, r3, #2
 8000f2e:	4413      	add	r3, r2
 8000f30:	005b      	lsls	r3, r3, #1
 8000f32:	1aca      	subs	r2, r1, r3
 8000f34:	edd7 7a83 	vldr	s15, [r7, #524]	; 0x20c
 8000f38:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f3c:	edc7 7a02 	vstr	s15, [r7, #8]
    		              (int)current_real, (int)(current_real * 10) % 10,
 8000f40:	edd7 7a83 	vldr	s15, [r7, #524]	; 0x20c
 8000f44:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8000f48:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f4c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f50:	ee17 0a90 	vmov	r0, s15
    		      sprintf(data_string,
 8000f54:	4b33      	ldr	r3, [pc, #204]	; (8001024 <HAL_UART_RxCpltCallback+0x28c>)
 8000f56:	fb83 1300 	smull	r1, r3, r3, r0
 8000f5a:	1099      	asrs	r1, r3, #2
 8000f5c:	17c3      	asrs	r3, r0, #31
 8000f5e:	1ac9      	subs	r1, r1, r3
 8000f60:	460b      	mov	r3, r1
 8000f62:	009b      	lsls	r3, r3, #2
 8000f64:	440b      	add	r3, r1
 8000f66:	005b      	lsls	r3, r3, #1
 8000f68:	1ac1      	subs	r1, r0, r3
 8000f6a:	edd7 7a81 	vldr	s15, [r7, #516]	; 0x204
 8000f6e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f72:	edc7 7a01 	vstr	s15, [r7, #4]
    		              (int)soc_real, (int)(soc_real * 10) % 10);
 8000f76:	edd7 7a81 	vldr	s15, [r7, #516]	; 0x204
 8000f7a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8000f7e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f82:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f86:	ee17 5a90 	vmov	r5, s15
    		      sprintf(data_string,
 8000f8a:	4b26      	ldr	r3, [pc, #152]	; (8001024 <HAL_UART_RxCpltCallback+0x28c>)
 8000f8c:	fb83 0305 	smull	r0, r3, r3, r5
 8000f90:	1098      	asrs	r0, r3, #2
 8000f92:	17eb      	asrs	r3, r5, #31
 8000f94:	1ac0      	subs	r0, r0, r3
 8000f96:	4603      	mov	r3, r0
 8000f98:	009b      	lsls	r3, r3, #2
 8000f9a:	4403      	add	r3, r0
 8000f9c:	005b      	lsls	r3, r3, #1
 8000f9e:	1ae8      	subs	r0, r5, r3
 8000fa0:	f107 0574 	add.w	r5, r7, #116	; 0x74
 8000fa4:	9005      	str	r0, [sp, #20]
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	9304      	str	r3, [sp, #16]
 8000faa:	9103      	str	r1, [sp, #12]
 8000fac:	68bb      	ldr	r3, [r7, #8]
 8000fae:	9302      	str	r3, [sp, #8]
 8000fb0:	9201      	str	r2, [sp, #4]
 8000fb2:	9600      	str	r6, [sp, #0]
 8000fb4:	4623      	mov	r3, r4
 8000fb6:	ee16 2a90 	vmov	r2, s13
 8000fba:	491b      	ldr	r1, [pc, #108]	; (8001028 <HAL_UART_RxCpltCallback+0x290>)
 8000fbc:	4628      	mov	r0, r5
 8000fbe:	f003 fd83 	bl	8004ac8 <siprintf>


    		      HAL_UART_Transmit(&huart2, (uint8_t*)data_string, strlen(data_string), HAL_MAX_DELAY);
 8000fc2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f7ff f90c 	bl	80001e4 <strlen>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	b29a      	uxth	r2, r3
 8000fd0:	f107 0174 	add.w	r1, r7, #116	; 0x74
 8000fd4:	f04f 33ff 	mov.w	r3, #4294967295
 8000fd8:	4814      	ldr	r0, [pc, #80]	; (800102c <HAL_UART_RxCpltCallback+0x294>)
 8000fda:	f002 fbf8 	bl	80037ce <HAL_UART_Transmit>
    		      for (int i = 0; i < sizeof(RxBuffer); i++) {
 8000fde:	2300      	movs	r3, #0
 8000fe0:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 8000fe4:	e00a      	b.n	8000ffc <HAL_UART_RxCpltCallback+0x264>
    		          RxBuffer[i] = 0;
 8000fe6:	4a0d      	ldr	r2, [pc, #52]	; (800101c <HAL_UART_RxCpltCallback+0x284>)
 8000fe8:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8000fec:	4413      	add	r3, r2
 8000fee:	2200      	movs	r2, #0
 8000ff0:	701a      	strb	r2, [r3, #0]
    		      for (int i = 0; i < sizeof(RxBuffer); i++) {
 8000ff2:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8000ff6:	3301      	adds	r3, #1
 8000ff8:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 8000ffc:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8001000:	2b31      	cmp	r3, #49	; 0x31
 8001002:	d9f0      	bls.n	8000fe6 <HAL_UART_RxCpltCallback+0x24e>
 8001004:	f001 b999 	b.w	800233a <HAL_UART_RxCpltCallback+0x15a2>
 8001008:	9999999a 	.word	0x9999999a
 800100c:	3fb99999 	.word	0x3fb99999
 8001010:	080058cc 	.word	0x080058cc
 8001014:	40004400 	.word	0x40004400
 8001018:	080058e8 	.word	0x080058e8
 800101c:	20000154 	.word	0x20000154
 8001020:	20000000 	.word	0x20000000
 8001024:	66666667 	.word	0x66666667
 8001028:	080058ec 	.word	0x080058ec
 800102c:	20000188 	.word	0x20000188
    		      }

    		  }
    		  else if (strcmp(RxBuffer, "volt") == 0)
 8001030:	4990      	ldr	r1, [pc, #576]	; (8001274 <HAL_UART_RxCpltCallback+0x4dc>)
 8001032:	4891      	ldr	r0, [pc, #580]	; (8001278 <HAL_UART_RxCpltCallback+0x4e0>)
 8001034:	f7ff f8cc 	bl	80001d0 <strcmp>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d167      	bne.n	800110e <HAL_UART_RxCpltCallback+0x376>
    		  {
    			  	  	  	  	  uint16_t max_cell_voltage = (TxData_volt[0] << 8) | TxData_volt[1];
 800103e:	4b8f      	ldr	r3, [pc, #572]	; (800127c <HAL_UART_RxCpltCallback+0x4e4>)
 8001040:	781b      	ldrb	r3, [r3, #0]
 8001042:	021b      	lsls	r3, r3, #8
 8001044:	b21a      	sxth	r2, r3
 8001046:	4b8d      	ldr	r3, [pc, #564]	; (800127c <HAL_UART_RxCpltCallback+0x4e4>)
 8001048:	785b      	ldrb	r3, [r3, #1]
 800104a:	b21b      	sxth	r3, r3
 800104c:	4313      	orrs	r3, r2
 800104e:	b21b      	sxth	r3, r3
 8001050:	f8a7 3228 	strh.w	r3, [r7, #552]	; 0x228
    						      uint8_t max_voltage_cell_no = TxData_volt[2];
 8001054:	4b89      	ldr	r3, [pc, #548]	; (800127c <HAL_UART_RxCpltCallback+0x4e4>)
 8001056:	789b      	ldrb	r3, [r3, #2]
 8001058:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
    						      uint16_t min_cell_voltage = (TxData_volt[3] << 8) | TxData_volt[4];
 800105c:	4b87      	ldr	r3, [pc, #540]	; (800127c <HAL_UART_RxCpltCallback+0x4e4>)
 800105e:	78db      	ldrb	r3, [r3, #3]
 8001060:	021b      	lsls	r3, r3, #8
 8001062:	b21a      	sxth	r2, r3
 8001064:	4b85      	ldr	r3, [pc, #532]	; (800127c <HAL_UART_RxCpltCallback+0x4e4>)
 8001066:	791b      	ldrb	r3, [r3, #4]
 8001068:	b21b      	sxth	r3, r3
 800106a:	4313      	orrs	r3, r2
 800106c:	b21b      	sxth	r3, r3
 800106e:	f8a7 3224 	strh.w	r3, [r7, #548]	; 0x224
    						      uint8_t min_voltage_cell_no = TxData_volt[5];
 8001072:	4b82      	ldr	r3, [pc, #520]	; (800127c <HAL_UART_RxCpltCallback+0x4e4>)
 8001074:	795b      	ldrb	r3, [r3, #5]
 8001076:	f887 3223 	strb.w	r3, [r7, #547]	; 0x223
    						      char data_string[100];
    						      sprintf(data_string,
 800107a:	f8b7 3228 	ldrh.w	r3, [r7, #552]	; 0x228
 800107e:	4a80      	ldr	r2, [pc, #512]	; (8001280 <HAL_UART_RxCpltCallback+0x4e8>)
 8001080:	fba2 2303 	umull	r2, r3, r2, r3
 8001084:	08db      	lsrs	r3, r3, #3
 8001086:	b29b      	uxth	r3, r3
 8001088:	461e      	mov	r6, r3
 800108a:	f8b7 2228 	ldrh.w	r2, [r7, #552]	; 0x228
 800108e:	4b7c      	ldr	r3, [pc, #496]	; (8001280 <HAL_UART_RxCpltCallback+0x4e8>)
 8001090:	fba3 1302 	umull	r1, r3, r3, r2
 8001094:	08d9      	lsrs	r1, r3, #3
 8001096:	460b      	mov	r3, r1
 8001098:	009b      	lsls	r3, r3, #2
 800109a:	440b      	add	r3, r1
 800109c:	005b      	lsls	r3, r3, #1
 800109e:	1ad3      	subs	r3, r2, r3
 80010a0:	b29b      	uxth	r3, r3
 80010a2:	469c      	mov	ip, r3
 80010a4:	f897 0227 	ldrb.w	r0, [r7, #551]	; 0x227
 80010a8:	f8b7 3224 	ldrh.w	r3, [r7, #548]	; 0x224
 80010ac:	4a74      	ldr	r2, [pc, #464]	; (8001280 <HAL_UART_RxCpltCallback+0x4e8>)
 80010ae:	fba2 2303 	umull	r2, r3, r2, r3
 80010b2:	08db      	lsrs	r3, r3, #3
 80010b4:	b29b      	uxth	r3, r3
 80010b6:	461d      	mov	r5, r3
 80010b8:	f8b7 2224 	ldrh.w	r2, [r7, #548]	; 0x224
 80010bc:	4b70      	ldr	r3, [pc, #448]	; (8001280 <HAL_UART_RxCpltCallback+0x4e8>)
 80010be:	fba3 1302 	umull	r1, r3, r3, r2
 80010c2:	08d9      	lsrs	r1, r3, #3
 80010c4:	460b      	mov	r3, r1
 80010c6:	009b      	lsls	r3, r3, #2
 80010c8:	440b      	add	r3, r1
 80010ca:	005b      	lsls	r3, r3, #1
 80010cc:	1ad3      	subs	r3, r2, r3
 80010ce:	b29b      	uxth	r3, r3
 80010d0:	461a      	mov	r2, r3
 80010d2:	f897 3223 	ldrb.w	r3, [r7, #547]	; 0x223
 80010d6:	f107 0474 	add.w	r4, r7, #116	; 0x74
 80010da:	9303      	str	r3, [sp, #12]
 80010dc:	9202      	str	r2, [sp, #8]
 80010de:	9501      	str	r5, [sp, #4]
 80010e0:	9000      	str	r0, [sp, #0]
 80010e2:	4663      	mov	r3, ip
 80010e4:	4632      	mov	r2, r6
 80010e6:	4967      	ldr	r1, [pc, #412]	; (8001284 <HAL_UART_RxCpltCallback+0x4ec>)
 80010e8:	4620      	mov	r0, r4
 80010ea:	f003 fced 	bl	8004ac8 <siprintf>
    						              max_cell_voltage / 10, (max_cell_voltage % 10),
    						              max_voltage_cell_no,
    						              min_cell_voltage / 10, (min_cell_voltage % 10),
    						              min_voltage_cell_no);

    						      	      	  HAL_UART_Transmit(&huart2, (uint8_t*)data_string, strlen(data_string), HAL_MAX_DELAY);
 80010ee:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80010f2:	4618      	mov	r0, r3
 80010f4:	f7ff f876 	bl	80001e4 <strlen>
 80010f8:	4603      	mov	r3, r0
 80010fa:	b29a      	uxth	r2, r3
 80010fc:	f107 0174 	add.w	r1, r7, #116	; 0x74
 8001100:	f04f 33ff 	mov.w	r3, #4294967295
 8001104:	4860      	ldr	r0, [pc, #384]	; (8001288 <HAL_UART_RxCpltCallback+0x4f0>)
 8001106:	f002 fb62 	bl	80037ce <HAL_UART_Transmit>
 800110a:	f001 b916 	b.w	800233a <HAL_UART_RxCpltCallback+0x15a2>

    		  }
    		  else if (strcmp(RxBuffer, "temp") == 0)
 800110e:	495f      	ldr	r1, [pc, #380]	; (800128c <HAL_UART_RxCpltCallback+0x4f4>)
 8001110:	4859      	ldr	r0, [pc, #356]	; (8001278 <HAL_UART_RxCpltCallback+0x4e0>)
 8001112:	f7ff f85d 	bl	80001d0 <strcmp>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d160      	bne.n	80011de <HAL_UART_RxCpltCallback+0x446>
    		  {

    			  			     int8_t max_temp_raw = TxData_temp[0];
 800111c:	4b5c      	ldr	r3, [pc, #368]	; (8001290 <HAL_UART_RxCpltCallback+0x4f8>)
 800111e:	781b      	ldrb	r3, [r3, #0]
 8001120:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
    			  			     float max_temperature = max_temp_raw - 40.0;
 8001124:	f997 323b 	ldrsb.w	r3, [r7, #571]	; 0x23b
 8001128:	4618      	mov	r0, r3
 800112a:	f7ff fb35 	bl	8000798 <__aeabi_i2d>
 800112e:	f04f 0200 	mov.w	r2, #0
 8001132:	4b58      	ldr	r3, [pc, #352]	; (8001294 <HAL_UART_RxCpltCallback+0x4fc>)
 8001134:	f7ff f9e2 	bl	80004fc <__aeabi_dsub>
 8001138:	4602      	mov	r2, r0
 800113a:	460b      	mov	r3, r1
 800113c:	4610      	mov	r0, r2
 800113e:	4619      	mov	r1, r3
 8001140:	f7ff fb94 	bl	800086c <__aeabi_d2f>
 8001144:	4603      	mov	r3, r0
 8001146:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
    			  			     uint8_t max_temp_cell_no = TxData_temp[1];
 800114a:	4b51      	ldr	r3, [pc, #324]	; (8001290 <HAL_UART_RxCpltCallback+0x4f8>)
 800114c:	785b      	ldrb	r3, [r3, #1]
 800114e:	f887 3233 	strb.w	r3, [r7, #563]	; 0x233
    			  			     int8_t min_temp_raw = TxData_temp[2];
 8001152:	4b4f      	ldr	r3, [pc, #316]	; (8001290 <HAL_UART_RxCpltCallback+0x4f8>)
 8001154:	789b      	ldrb	r3, [r3, #2]
 8001156:	f887 3232 	strb.w	r3, [r7, #562]	; 0x232
    			  			     float min_temperature = min_temp_raw - 40.0;
 800115a:	f997 3232 	ldrsb.w	r3, [r7, #562]	; 0x232
 800115e:	4618      	mov	r0, r3
 8001160:	f7ff fb1a 	bl	8000798 <__aeabi_i2d>
 8001164:	f04f 0200 	mov.w	r2, #0
 8001168:	4b4a      	ldr	r3, [pc, #296]	; (8001294 <HAL_UART_RxCpltCallback+0x4fc>)
 800116a:	f7ff f9c7 	bl	80004fc <__aeabi_dsub>
 800116e:	4602      	mov	r2, r0
 8001170:	460b      	mov	r3, r1
 8001172:	4610      	mov	r0, r2
 8001174:	4619      	mov	r1, r3
 8001176:	f7ff fb79 	bl	800086c <__aeabi_d2f>
 800117a:	4603      	mov	r3, r0
 800117c:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
    			  			     uint8_t min_temp_cell_no = TxData_temp[3];
 8001180:	4b43      	ldr	r3, [pc, #268]	; (8001290 <HAL_UART_RxCpltCallback+0x4f8>)
 8001182:	78db      	ldrb	r3, [r3, #3]
 8001184:	f887 322b 	strb.w	r3, [r7, #555]	; 0x22b
    			  			   char data_string[100];
    			  			    sprintf(data_string,
 8001188:	f8d7 0234 	ldr.w	r0, [r7, #564]	; 0x234
 800118c:	f7ff fb16 	bl	80007bc <__aeabi_f2d>
 8001190:	4604      	mov	r4, r0
 8001192:	460d      	mov	r5, r1
 8001194:	f897 6233 	ldrb.w	r6, [r7, #563]	; 0x233
 8001198:	f8d7 022c 	ldr.w	r0, [r7, #556]	; 0x22c
 800119c:	f7ff fb0e 	bl	80007bc <__aeabi_f2d>
 80011a0:	4602      	mov	r2, r0
 80011a2:	460b      	mov	r3, r1
 80011a4:	f897 122b 	ldrb.w	r1, [r7, #555]	; 0x22b
 80011a8:	f107 0074 	add.w	r0, r7, #116	; 0x74
 80011ac:	9104      	str	r1, [sp, #16]
 80011ae:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80011b2:	9600      	str	r6, [sp, #0]
 80011b4:	4622      	mov	r2, r4
 80011b6:	462b      	mov	r3, r5
 80011b8:	4937      	ldr	r1, [pc, #220]	; (8001298 <HAL_UART_RxCpltCallback+0x500>)
 80011ba:	f003 fc85 	bl	8004ac8 <siprintf>
    			  			            "Max Temperature: %d °C, Max Temp Cell No: %d, Min Temperature: %d °C, Min Temp Cell No: %d\n",
    			  			            max_temperature, max_temp_cell_no, min_temperature, min_temp_cell_no);
    			  			    HAL_UART_Transmit(&huart2, (uint8_t*)data_string, strlen(data_string), HAL_MAX_DELAY);
 80011be:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80011c2:	4618      	mov	r0, r3
 80011c4:	f7ff f80e 	bl	80001e4 <strlen>
 80011c8:	4603      	mov	r3, r0
 80011ca:	b29a      	uxth	r2, r3
 80011cc:	f107 0174 	add.w	r1, r7, #116	; 0x74
 80011d0:	f04f 33ff 	mov.w	r3, #4294967295
 80011d4:	482c      	ldr	r0, [pc, #176]	; (8001288 <HAL_UART_RxCpltCallback+0x4f0>)
 80011d6:	f002 fafa 	bl	80037ce <HAL_UART_Transmit>
 80011da:	f001 b8ae 	b.w	800233a <HAL_UART_RxCpltCallback+0x15a2>

    		  }
    		  else if (strcmp(RxBuffer, "mos") == 0)
 80011de:	492f      	ldr	r1, [pc, #188]	; (800129c <HAL_UART_RxCpltCallback+0x504>)
 80011e0:	4825      	ldr	r0, [pc, #148]	; (8001278 <HAL_UART_RxCpltCallback+0x4e0>)
 80011e2:	f7fe fff5 	bl	80001d0 <strcmp>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d15d      	bne.n	80012a8 <HAL_UART_RxCpltCallback+0x510>
    		  {
    			    uint8_t state = TxData_mos[0];
 80011ec:	4b2c      	ldr	r3, [pc, #176]	; (80012a0 <HAL_UART_RxCpltCallback+0x508>)
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	f887 3244 	strb.w	r3, [r7, #580]	; 0x244
    			    uint8_t charge_mos_state = TxData_mos[1];
 80011f4:	4b2a      	ldr	r3, [pc, #168]	; (80012a0 <HAL_UART_RxCpltCallback+0x508>)
 80011f6:	785b      	ldrb	r3, [r3, #1]
 80011f8:	f887 3243 	strb.w	r3, [r7, #579]	; 0x243
    			    uint8_t discharge_mos_state = TxData_mos[2];
 80011fc:	4b28      	ldr	r3, [pc, #160]	; (80012a0 <HAL_UART_RxCpltCallback+0x508>)
 80011fe:	789b      	ldrb	r3, [r3, #2]
 8001200:	f887 3242 	strb.w	r3, [r7, #578]	; 0x242
    			    uint8_t bms_life = TxData_mos[3];
 8001204:	4b26      	ldr	r3, [pc, #152]	; (80012a0 <HAL_UART_RxCpltCallback+0x508>)
 8001206:	78db      	ldrb	r3, [r3, #3]
 8001208:	f887 3241 	strb.w	r3, [r7, #577]	; 0x241
    			    uint32_t remaining_capacity = (TxData_mos[4] << 24) | (TxData_mos[5] << 16) | (TxData_mos[6] << 8) | TxData_mos[7];
 800120c:	4b24      	ldr	r3, [pc, #144]	; (80012a0 <HAL_UART_RxCpltCallback+0x508>)
 800120e:	791b      	ldrb	r3, [r3, #4]
 8001210:	061a      	lsls	r2, r3, #24
 8001212:	4b23      	ldr	r3, [pc, #140]	; (80012a0 <HAL_UART_RxCpltCallback+0x508>)
 8001214:	795b      	ldrb	r3, [r3, #5]
 8001216:	041b      	lsls	r3, r3, #16
 8001218:	431a      	orrs	r2, r3
 800121a:	4b21      	ldr	r3, [pc, #132]	; (80012a0 <HAL_UART_RxCpltCallback+0x508>)
 800121c:	799b      	ldrb	r3, [r3, #6]
 800121e:	021b      	lsls	r3, r3, #8
 8001220:	4313      	orrs	r3, r2
 8001222:	4a1f      	ldr	r2, [pc, #124]	; (80012a0 <HAL_UART_RxCpltCallback+0x508>)
 8001224:	79d2      	ldrb	r2, [r2, #7]
 8001226:	4313      	orrs	r3, r2
 8001228:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
    			    char data_string[100];
    			    sprintf(data_string,
 800122c:	f897 4244 	ldrb.w	r4, [r7, #580]	; 0x244
 8001230:	f897 5243 	ldrb.w	r5, [r7, #579]	; 0x243
 8001234:	f897 3242 	ldrb.w	r3, [r7, #578]	; 0x242
 8001238:	f897 2241 	ldrb.w	r2, [r7, #577]	; 0x241
 800123c:	f107 0074 	add.w	r0, r7, #116	; 0x74
 8001240:	f8d7 123c 	ldr.w	r1, [r7, #572]	; 0x23c
 8001244:	9102      	str	r1, [sp, #8]
 8001246:	9201      	str	r2, [sp, #4]
 8001248:	9300      	str	r3, [sp, #0]
 800124a:	462b      	mov	r3, r5
 800124c:	4622      	mov	r2, r4
 800124e:	4915      	ldr	r1, [pc, #84]	; (80012a4 <HAL_UART_RxCpltCallback+0x50c>)
 8001250:	f003 fc3a 	bl	8004ac8 <siprintf>
    			            "State: %d, Charge MOS State: %d, Discharge MOS State: %d, BMS Life: %d cycles, Remaining Capacity: %lu mAh\n",
    			            state, charge_mos_state, discharge_mos_state, bms_life, remaining_capacity);
    			    HAL_UART_Transmit(&huart2, (uint8_t*)data_string, strlen(data_string), HAL_MAX_DELAY);
 8001254:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001258:	4618      	mov	r0, r3
 800125a:	f7fe ffc3 	bl	80001e4 <strlen>
 800125e:	4603      	mov	r3, r0
 8001260:	b29a      	uxth	r2, r3
 8001262:	f107 0174 	add.w	r1, r7, #116	; 0x74
 8001266:	f04f 33ff 	mov.w	r3, #4294967295
 800126a:	4807      	ldr	r0, [pc, #28]	; (8001288 <HAL_UART_RxCpltCallback+0x4f0>)
 800126c:	f002 faaf 	bl	80037ce <HAL_UART_Transmit>
 8001270:	f001 b863 	b.w	800233a <HAL_UART_RxCpltCallback+0x15a2>
 8001274:	08005944 	.word	0x08005944
 8001278:	20000154 	.word	0x20000154
 800127c:	20000008 	.word	0x20000008
 8001280:	cccccccd 	.word	0xcccccccd
 8001284:	0800594c 	.word	0x0800594c
 8001288:	20000188 	.word	0x20000188
 800128c:	080059b4 	.word	0x080059b4
 8001290:	20000010 	.word	0x20000010
 8001294:	40440000 	.word	0x40440000
 8001298:	080059bc 	.word	0x080059bc
 800129c:	08005a1c 	.word	0x08005a1c
 80012a0:	20000018 	.word	0x20000018
 80012a4:	08005a20 	.word	0x08005a20

    		  }
    		  else if (strcmp(RxBuffer, "status") == 0)
 80012a8:	49d6      	ldr	r1, [pc, #856]	; (8001604 <HAL_UART_RxCpltCallback+0x86c>)
 80012aa:	48d7      	ldr	r0, [pc, #860]	; (8001608 <HAL_UART_RxCpltCallback+0x870>)
 80012ac:	f7fe ff90 	bl	80001d0 <strcmp>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	f040 8091 	bne.w	80013da <HAL_UART_RxCpltCallback+0x642>
    		  {
    			     uint8_t battery_string_count = TxData_status[0];
 80012b8:	4bd4      	ldr	r3, [pc, #848]	; (800160c <HAL_UART_RxCpltCallback+0x874>)
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	f887 3251 	strb.w	r3, [r7, #593]	; 0x251
    			     uint8_t temperature_count = TxData_status[1];
 80012c0:	4bd2      	ldr	r3, [pc, #840]	; (800160c <HAL_UART_RxCpltCallback+0x874>)
 80012c2:	785b      	ldrb	r3, [r3, #1]
 80012c4:	f887 3250 	strb.w	r3, [r7, #592]	; 0x250
    			     uint8_t charger_status = TxData_status[2];
 80012c8:	4bd0      	ldr	r3, [pc, #832]	; (800160c <HAL_UART_RxCpltCallback+0x874>)
 80012ca:	789b      	ldrb	r3, [r3, #2]
 80012cc:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
    			     uint8_t load_status = TxData_status[3];
 80012d0:	4bce      	ldr	r3, [pc, #824]	; (800160c <HAL_UART_RxCpltCallback+0x874>)
 80012d2:	78db      	ldrb	r3, [r3, #3]
 80012d4:	f887 324e 	strb.w	r3, [r7, #590]	; 0x24e
    			     uint8_t di_do_state = TxData_status[4];
 80012d8:	4bcc      	ldr	r3, [pc, #816]	; (800160c <HAL_UART_RxCpltCallback+0x874>)
 80012da:	791b      	ldrb	r3, [r3, #4]
 80012dc:	f887 324d 	strb.w	r3, [r7, #589]	; 0x24d
    			     uint8_t di1_state = (di_do_state >> 0) & 0x01; // Bit 0
 80012e0:	f897 324d 	ldrb.w	r3, [r7, #589]	; 0x24d
 80012e4:	f003 0301 	and.w	r3, r3, #1
 80012e8:	f887 324c 	strb.w	r3, [r7, #588]	; 0x24c
    			     uint8_t di2_state = (di_do_state >> 1) & 0x01; // Bit 1
 80012ec:	f897 324d 	ldrb.w	r3, [r7, #589]	; 0x24d
 80012f0:	085b      	lsrs	r3, r3, #1
 80012f2:	b2db      	uxtb	r3, r3
 80012f4:	f003 0301 	and.w	r3, r3, #1
 80012f8:	f887 324b 	strb.w	r3, [r7, #587]	; 0x24b
    			     uint8_t di3_state = (di_do_state >> 2) & 0x01; // Bit 2
 80012fc:	f897 324d 	ldrb.w	r3, [r7, #589]	; 0x24d
 8001300:	089b      	lsrs	r3, r3, #2
 8001302:	b2db      	uxtb	r3, r3
 8001304:	f003 0301 	and.w	r3, r3, #1
 8001308:	f887 324a 	strb.w	r3, [r7, #586]	; 0x24a
    			     uint8_t di4_state = (di_do_state >> 3) & 0x01; // Bit 3
 800130c:	f897 324d 	ldrb.w	r3, [r7, #589]	; 0x24d
 8001310:	08db      	lsrs	r3, r3, #3
 8001312:	b2db      	uxtb	r3, r3
 8001314:	f003 0301 	and.w	r3, r3, #1
 8001318:	f887 3249 	strb.w	r3, [r7, #585]	; 0x249
    			     uint8_t do1_state = (di_do_state >> 4) & 0x01; // Bit 4
 800131c:	f897 324d 	ldrb.w	r3, [r7, #589]	; 0x24d
 8001320:	091b      	lsrs	r3, r3, #4
 8001322:	b2db      	uxtb	r3, r3
 8001324:	f003 0301 	and.w	r3, r3, #1
 8001328:	f887 3248 	strb.w	r3, [r7, #584]	; 0x248
    			     uint8_t do2_state = (di_do_state >> 5) & 0x01; // Bit 5
 800132c:	f897 324d 	ldrb.w	r3, [r7, #589]	; 0x24d
 8001330:	095b      	lsrs	r3, r3, #5
 8001332:	b2db      	uxtb	r3, r3
 8001334:	f003 0301 	and.w	r3, r3, #1
 8001338:	f887 3247 	strb.w	r3, [r7, #583]	; 0x247
    			     uint8_t do3_state = (di_do_state >> 6) & 0x01; // Bit 6
 800133c:	f897 324d 	ldrb.w	r3, [r7, #589]	; 0x24d
 8001340:	099b      	lsrs	r3, r3, #6
 8001342:	b2db      	uxtb	r3, r3
 8001344:	f003 0301 	and.w	r3, r3, #1
 8001348:	f887 3246 	strb.w	r3, [r7, #582]	; 0x246
    			     uint8_t do4_state = (di_do_state >> 7) & 0x01; // Bit 7
 800134c:	f897 324d 	ldrb.w	r3, [r7, #589]	; 0x24d
 8001350:	09db      	lsrs	r3, r3, #7
 8001352:	f887 3245 	strb.w	r3, [r7, #581]	; 0x245
    			     char data_string[200];
    			      sprintf(data_string,
 8001356:	f897 e251 	ldrb.w	lr, [r7, #593]	; 0x251
 800135a:	f897 8250 	ldrb.w	r8, [r7, #592]	; 0x250
 800135e:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8001362:	60bb      	str	r3, [r7, #8]
 8001364:	f897 224e 	ldrb.w	r2, [r7, #590]	; 0x24e
 8001368:	4613      	mov	r3, r2
 800136a:	607b      	str	r3, [r7, #4]
 800136c:	f897 124c 	ldrb.w	r1, [r7, #588]	; 0x24c
 8001370:	f897 024b 	ldrb.w	r0, [r7, #587]	; 0x24b
 8001374:	f897 424a 	ldrb.w	r4, [r7, #586]	; 0x24a
 8001378:	f897 5249 	ldrb.w	r5, [r7, #585]	; 0x249
 800137c:	f897 6248 	ldrb.w	r6, [r7, #584]	; 0x248
 8001380:	f897 3247 	ldrb.w	r3, [r7, #583]	; 0x247
 8001384:	603b      	str	r3, [r7, #0]
 8001386:	f897 2246 	ldrb.w	r2, [r7, #582]	; 0x246
 800138a:	4613      	mov	r3, r2
 800138c:	f897 2245 	ldrb.w	r2, [r7, #581]	; 0x245
 8001390:	f107 0c74 	add.w	ip, r7, #116	; 0x74
 8001394:	9209      	str	r2, [sp, #36]	; 0x24
 8001396:	9308      	str	r3, [sp, #32]
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	9307      	str	r3, [sp, #28]
 800139c:	9606      	str	r6, [sp, #24]
 800139e:	9505      	str	r5, [sp, #20]
 80013a0:	9404      	str	r4, [sp, #16]
 80013a2:	9003      	str	r0, [sp, #12]
 80013a4:	9102      	str	r1, [sp, #8]
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	9301      	str	r3, [sp, #4]
 80013aa:	68bb      	ldr	r3, [r7, #8]
 80013ac:	9300      	str	r3, [sp, #0]
 80013ae:	4643      	mov	r3, r8
 80013b0:	4672      	mov	r2, lr
 80013b2:	4997      	ldr	r1, [pc, #604]	; (8001610 <HAL_UART_RxCpltCallback+0x878>)
 80013b4:	4660      	mov	r0, ip
 80013b6:	f003 fb87 	bl	8004ac8 <siprintf>
    			              "DI1 State: %d, DI2 State: %d, DI3 State: %d, DI4 State: %d\n"
    			              "DO1 State: %d, DO2 State: %d, DO3 State: %d, DO4 State: %d\n",
    			              battery_string_count, temperature_count, charger_status, load_status,
    			              di1_state, di2_state, di3_state, di4_state,
    			              do1_state, do2_state, do3_state, do4_state);
    			      	  	  HAL_UART_Transmit(&huart2, (uint8_t*)data_string, strlen(data_string), HAL_MAX_DELAY);
 80013ba:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80013be:	4618      	mov	r0, r3
 80013c0:	f7fe ff10 	bl	80001e4 <strlen>
 80013c4:	4603      	mov	r3, r0
 80013c6:	b29a      	uxth	r2, r3
 80013c8:	f107 0174 	add.w	r1, r7, #116	; 0x74
 80013cc:	f04f 33ff 	mov.w	r3, #4294967295
 80013d0:	4890      	ldr	r0, [pc, #576]	; (8001614 <HAL_UART_RxCpltCallback+0x87c>)
 80013d2:	f002 f9fc 	bl	80037ce <HAL_UART_Transmit>
 80013d6:	f000 bfb0 	b.w	800233a <HAL_UART_RxCpltCallback+0x15a2>

    		  }else if (strcmp(RxBuffer, "cell_volt") == 0)
 80013da:	498f      	ldr	r1, [pc, #572]	; (8001618 <HAL_UART_RxCpltCallback+0x880>)
 80013dc:	488a      	ldr	r0, [pc, #552]	; (8001608 <HAL_UART_RxCpltCallback+0x870>)
 80013de:	f7fe fef7 	bl	80001d0 <strcmp>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	f040 8086 	bne.w	80014f6 <HAL_UART_RxCpltCallback+0x75e>
    		  {
    			    uint16_t cell_voltages[48] = {0};
 80013ea:	f507 7324 	add.w	r3, r7, #656	; 0x290
 80013ee:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 80013f2:	4618      	mov	r0, r3
 80013f4:	2360      	movs	r3, #96	; 0x60
 80013f6:	461a      	mov	r2, r3
 80013f8:	2100      	movs	r1, #0
 80013fa:	f003 fc5d 	bl	8004cb8 <memset>
    			    int cell_index = 0;
 80013fe:	2300      	movs	r3, #0
 8001400:	f8c7 3288 	str.w	r3, [r7, #648]	; 0x288
    			    for (int frame = 0; frame < 16; frame++) {
 8001404:	2300      	movs	r3, #0
 8001406:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
 800140a:	e042      	b.n	8001492 <HAL_UART_RxCpltCallback+0x6fa>
    			        for (int i = 0; i < 3; i++) {
 800140c:	2300      	movs	r3, #0
 800140e:	f8c7 3280 	str.w	r3, [r7, #640]	; 0x280
 8001412:	e035      	b.n	8001480 <HAL_UART_RxCpltCallback+0x6e8>
    			            uint8_t high_byte = TxData_cell_volt[frame][1 + (i * 2)];
 8001414:	f8d7 3280 	ldr.w	r3, [r7, #640]	; 0x280
 8001418:	005b      	lsls	r3, r3, #1
 800141a:	3301      	adds	r3, #1
 800141c:	497f      	ldr	r1, [pc, #508]	; (800161c <HAL_UART_RxCpltCallback+0x884>)
 800141e:	f8d7 2284 	ldr.w	r2, [r7, #644]	; 0x284
 8001422:	00d2      	lsls	r2, r2, #3
 8001424:	440a      	add	r2, r1
 8001426:	4413      	add	r3, r2
 8001428:	781b      	ldrb	r3, [r3, #0]
 800142a:	f887 3253 	strb.w	r3, [r7, #595]	; 0x253
    			            uint8_t low_byte = TxData_cell_volt[frame][2 + (i * 2)];
 800142e:	f8d7 3280 	ldr.w	r3, [r7, #640]	; 0x280
 8001432:	3301      	adds	r3, #1
 8001434:	005b      	lsls	r3, r3, #1
 8001436:	4979      	ldr	r1, [pc, #484]	; (800161c <HAL_UART_RxCpltCallback+0x884>)
 8001438:	f8d7 2284 	ldr.w	r2, [r7, #644]	; 0x284
 800143c:	00d2      	lsls	r2, r2, #3
 800143e:	440a      	add	r2, r1
 8001440:	4413      	add	r3, r2
 8001442:	781b      	ldrb	r3, [r3, #0]
 8001444:	f887 3252 	strb.w	r3, [r7, #594]	; 0x252
    			            cell_voltages[cell_index] = (high_byte << 8) | low_byte;
 8001448:	f897 3253 	ldrb.w	r3, [r7, #595]	; 0x253
 800144c:	021b      	lsls	r3, r3, #8
 800144e:	b21a      	sxth	r2, r3
 8001450:	f897 3252 	ldrb.w	r3, [r7, #594]	; 0x252
 8001454:	b21b      	sxth	r3, r3
 8001456:	4313      	orrs	r3, r2
 8001458:	b21b      	sxth	r3, r3
 800145a:	b299      	uxth	r1, r3
 800145c:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8001460:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 8001464:	f8d7 2288 	ldr.w	r2, [r7, #648]	; 0x288
 8001468:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    			            cell_index++;
 800146c:	f8d7 3288 	ldr.w	r3, [r7, #648]	; 0x288
 8001470:	3301      	adds	r3, #1
 8001472:	f8c7 3288 	str.w	r3, [r7, #648]	; 0x288
    			        for (int i = 0; i < 3; i++) {
 8001476:	f8d7 3280 	ldr.w	r3, [r7, #640]	; 0x280
 800147a:	3301      	adds	r3, #1
 800147c:	f8c7 3280 	str.w	r3, [r7, #640]	; 0x280
 8001480:	f8d7 3280 	ldr.w	r3, [r7, #640]	; 0x280
 8001484:	2b02      	cmp	r3, #2
 8001486:	ddc5      	ble.n	8001414 <HAL_UART_RxCpltCallback+0x67c>
    			    for (int frame = 0; frame < 16; frame++) {
 8001488:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 800148c:	3301      	adds	r3, #1
 800148e:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
 8001492:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8001496:	2b0f      	cmp	r3, #15
 8001498:	ddb8      	ble.n	800140c <HAL_UART_RxCpltCallback+0x674>
    			        }
    			    }
    			    char data_string[400];
    			    for (int i = 0; i < 48; i++) {
 800149a:	2300      	movs	r3, #0
 800149c:	f8c7 327c 	str.w	r3, [r7, #636]	; 0x27c
 80014a0:	e023      	b.n	80014ea <HAL_UART_RxCpltCallback+0x752>
    			     sprintf(data_string, "Cell %d Voltage: %d mV\n", i + 1, cell_voltages[i]);
 80014a2:	f8d7 327c 	ldr.w	r3, [r7, #636]	; 0x27c
 80014a6:	1c59      	adds	r1, r3, #1
 80014a8:	f507 7324 	add.w	r3, r7, #656	; 0x290
 80014ac:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 80014b0:	f8d7 227c 	ldr.w	r2, [r7, #636]	; 0x27c
 80014b4:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80014b8:	f107 0074 	add.w	r0, r7, #116	; 0x74
 80014bc:	460a      	mov	r2, r1
 80014be:	4958      	ldr	r1, [pc, #352]	; (8001620 <HAL_UART_RxCpltCallback+0x888>)
 80014c0:	f003 fb02 	bl	8004ac8 <siprintf>
    			     HAL_UART_Transmit(&huart2, (uint8_t*)data_string, strlen(data_string), HAL_MAX_DELAY);
 80014c4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80014c8:	4618      	mov	r0, r3
 80014ca:	f7fe fe8b 	bl	80001e4 <strlen>
 80014ce:	4603      	mov	r3, r0
 80014d0:	b29a      	uxth	r2, r3
 80014d2:	f107 0174 	add.w	r1, r7, #116	; 0x74
 80014d6:	f04f 33ff 	mov.w	r3, #4294967295
 80014da:	484e      	ldr	r0, [pc, #312]	; (8001614 <HAL_UART_RxCpltCallback+0x87c>)
 80014dc:	f002 f977 	bl	80037ce <HAL_UART_Transmit>
    			    for (int i = 0; i < 48; i++) {
 80014e0:	f8d7 327c 	ldr.w	r3, [r7, #636]	; 0x27c
 80014e4:	3301      	adds	r3, #1
 80014e6:	f8c7 327c 	str.w	r3, [r7, #636]	; 0x27c
 80014ea:	f8d7 327c 	ldr.w	r3, [r7, #636]	; 0x27c
 80014ee:	2b2f      	cmp	r3, #47	; 0x2f
 80014f0:	ddd7      	ble.n	80014a2 <HAL_UART_RxCpltCallback+0x70a>
 80014f2:	f000 bf22 	b.w	800233a <HAL_UART_RxCpltCallback+0x15a2>
    			    }

    		  }
    		  else if (strcmp(RxBuffer, "cell_temp") == 0)
 80014f6:	494b      	ldr	r1, [pc, #300]	; (8001624 <HAL_UART_RxCpltCallback+0x88c>)
 80014f8:	4843      	ldr	r0, [pc, #268]	; (8001608 <HAL_UART_RxCpltCallback+0x870>)
 80014fa:	f7fe fe69 	bl	80001d0 <strcmp>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d166      	bne.n	80015d2 <HAL_UART_RxCpltCallback+0x83a>
    		  {

    			   int cell_temperatures[21];
    			    int temperature_index = 0;
 8001504:	2300      	movs	r3, #0
 8001506:	f8c7 3278 	str.w	r3, [r7, #632]	; 0x278

    			    // Extraction des températures
    			    for (int frame = 0; frame < 3; frame++) {
 800150a:	2300      	movs	r3, #0
 800150c:	f8c7 3274 	str.w	r3, [r7, #628]	; 0x274
 8001510:	e02d      	b.n	800156e <HAL_UART_RxCpltCallback+0x7d6>
    			        for (int i = 1; i <= 7; i++) {
 8001512:	2301      	movs	r3, #1
 8001514:	f8c7 3270 	str.w	r3, [r7, #624]	; 0x270
 8001518:	e020      	b.n	800155c <HAL_UART_RxCpltCallback+0x7c4>
    			            int raw_temp = RxData_cell_temp[frame][i];
 800151a:	4a43      	ldr	r2, [pc, #268]	; (8001628 <HAL_UART_RxCpltCallback+0x890>)
 800151c:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
 8001520:	00db      	lsls	r3, r3, #3
 8001522:	441a      	add	r2, r3
 8001524:	f8d7 3270 	ldr.w	r3, [r7, #624]	; 0x270
 8001528:	4413      	add	r3, r2
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
    			            cell_temperatures[temperature_index] = raw_temp - 40;  // Conversion en °C
 8001530:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8001534:	f1a3 0128 	sub.w	r1, r3, #40	; 0x28
 8001538:	f507 7324 	add.w	r3, r7, #656	; 0x290
 800153c:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 8001540:	f8d7 2278 	ldr.w	r2, [r7, #632]	; 0x278
 8001544:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    			            temperature_index++;
 8001548:	f8d7 3278 	ldr.w	r3, [r7, #632]	; 0x278
 800154c:	3301      	adds	r3, #1
 800154e:	f8c7 3278 	str.w	r3, [r7, #632]	; 0x278
    			        for (int i = 1; i <= 7; i++) {
 8001552:	f8d7 3270 	ldr.w	r3, [r7, #624]	; 0x270
 8001556:	3301      	adds	r3, #1
 8001558:	f8c7 3270 	str.w	r3, [r7, #624]	; 0x270
 800155c:	f8d7 3270 	ldr.w	r3, [r7, #624]	; 0x270
 8001560:	2b07      	cmp	r3, #7
 8001562:	ddda      	ble.n	800151a <HAL_UART_RxCpltCallback+0x782>
    			    for (int frame = 0; frame < 3; frame++) {
 8001564:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
 8001568:	3301      	adds	r3, #1
 800156a:	f8c7 3274 	str.w	r3, [r7, #628]	; 0x274
 800156e:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
 8001572:	2b02      	cmp	r3, #2
 8001574:	ddcd      	ble.n	8001512 <HAL_UART_RxCpltCallback+0x77a>
    			        }

    			    }
    			    char data_string[400];
    			  		    for (int i = 0; i < 21; i++) {
 8001576:	2300      	movs	r3, #0
 8001578:	f8c7 326c 	str.w	r3, [r7, #620]	; 0x26c
 800157c:	e023      	b.n	80015c6 <HAL_UART_RxCpltCallback+0x82e>
    			  		     sprintf(data_string, "Cell %d Temperature: %d °C\n", i + 1, cell_temperatures[i]);
 800157e:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
 8001582:	1c59      	adds	r1, r3, #1
 8001584:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8001588:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 800158c:	f8d7 226c 	ldr.w	r2, [r7, #620]	; 0x26c
 8001590:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001594:	f107 0074 	add.w	r0, r7, #116	; 0x74
 8001598:	460a      	mov	r2, r1
 800159a:	4924      	ldr	r1, [pc, #144]	; (800162c <HAL_UART_RxCpltCallback+0x894>)
 800159c:	f003 fa94 	bl	8004ac8 <siprintf>
    			  		     HAL_UART_Transmit(&huart2, (uint8_t*)data_string, strlen(data_string), HAL_MAX_DELAY);
 80015a0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80015a4:	4618      	mov	r0, r3
 80015a6:	f7fe fe1d 	bl	80001e4 <strlen>
 80015aa:	4603      	mov	r3, r0
 80015ac:	b29a      	uxth	r2, r3
 80015ae:	f107 0174 	add.w	r1, r7, #116	; 0x74
 80015b2:	f04f 33ff 	mov.w	r3, #4294967295
 80015b6:	4817      	ldr	r0, [pc, #92]	; (8001614 <HAL_UART_RxCpltCallback+0x87c>)
 80015b8:	f002 f909 	bl	80037ce <HAL_UART_Transmit>
    			  		    for (int i = 0; i < 21; i++) {
 80015bc:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
 80015c0:	3301      	adds	r3, #1
 80015c2:	f8c7 326c 	str.w	r3, [r7, #620]	; 0x26c
 80015c6:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
 80015ca:	2b14      	cmp	r3, #20
 80015cc:	ddd7      	ble.n	800157e <HAL_UART_RxCpltCallback+0x7e6>
 80015ce:	f000 beb4 	b.w	800233a <HAL_UART_RxCpltCallback+0x15a2>
    			  		    }

    		  }
    		  else if (strcmp(RxBuffer, "cell_balance") == 0)
 80015d2:	4917      	ldr	r1, [pc, #92]	; (8001630 <HAL_UART_RxCpltCallback+0x898>)
 80015d4:	480c      	ldr	r0, [pc, #48]	; (8001608 <HAL_UART_RxCpltCallback+0x870>)
 80015d6:	f7fe fdfb 	bl	80001d0 <strcmp>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	f040 8091 	bne.w	8001704 <HAL_UART_RxCpltCallback+0x96c>
    		  {	uint8_t cell_state [48]={0};
 80015e2:	f507 7324 	add.w	r3, r7, #656	; 0x290
 80015e6:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 80015ea:	2200      	movs	r2, #0
 80015ec:	601a      	str	r2, [r3, #0]
 80015ee:	3304      	adds	r3, #4
 80015f0:	222c      	movs	r2, #44	; 0x2c
 80015f2:	2100      	movs	r1, #0
 80015f4:	4618      	mov	r0, r3
 80015f6:	f003 fb5f 	bl	8004cb8 <memset>
    			  for (int i = 1; i <= 48; i++) {
 80015fa:	2301      	movs	r3, #1
 80015fc:	f8c7 3268 	str.w	r3, [r7, #616]	; 0x268
 8001600:	e049      	b.n	8001696 <HAL_UART_RxCpltCallback+0x8fe>
 8001602:	bf00      	nop
 8001604:	08005a8c 	.word	0x08005a8c
 8001608:	20000154 	.word	0x20000154
 800160c:	20000020 	.word	0x20000020
 8001610:	08005a94 	.word	0x08005a94
 8001614:	20000188 	.word	0x20000188
 8001618:	08005b60 	.word	0x08005b60
 800161c:	20000028 	.word	0x20000028
 8001620:	08005b6c 	.word	0x08005b6c
 8001624:	08005b84 	.word	0x08005b84
 8001628:	200000a8 	.word	0x200000a8
 800162c:	08005b90 	.word	0x08005b90
 8001630:	08005bb0 	.word	0x08005bb0
    			    int byte_index = (i - 1) / 8;               // Trouve l'octet contenant le bit
 8001634:	f8d7 3268 	ldr.w	r3, [r7, #616]	; 0x268
 8001638:	3b01      	subs	r3, #1
 800163a:	2b00      	cmp	r3, #0
 800163c:	da00      	bge.n	8001640 <HAL_UART_RxCpltCallback+0x8a8>
 800163e:	3307      	adds	r3, #7
 8001640:	10db      	asrs	r3, r3, #3
 8001642:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
    			    int bit_index = (i - 1) % 8;                // Trouve la position du bit dans l'octet
 8001646:	f8d7 3268 	ldr.w	r3, [r7, #616]	; 0x268
 800164a:	3b01      	subs	r3, #1
 800164c:	425a      	negs	r2, r3
 800164e:	f003 0307 	and.w	r3, r3, #7
 8001652:	f002 0207 	and.w	r2, r2, #7
 8001656:	bf58      	it	pl
 8001658:	4253      	negpl	r3, r2
 800165a:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
    			    cell_state[i]=(TxData_cell_balance[byte_index] >> bit_index) & 0x01;
 800165e:	4a26      	ldr	r2, [pc, #152]	; (80016f8 <HAL_UART_RxCpltCallback+0x960>)
 8001660:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8001664:	4413      	add	r3, r2
 8001666:	781b      	ldrb	r3, [r3, #0]
 8001668:	461a      	mov	r2, r3
 800166a:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 800166e:	fa42 f303 	asr.w	r3, r2, r3
 8001672:	b2db      	uxtb	r3, r3
 8001674:	f003 0301 	and.w	r3, r3, #1
 8001678:	b2d9      	uxtb	r1, r3
 800167a:	f507 7324 	add.w	r3, r7, #656	; 0x290
 800167e:	f5a3 721f 	sub.w	r2, r3, #636	; 0x27c
 8001682:	f8d7 3268 	ldr.w	r3, [r7, #616]	; 0x268
 8001686:	4413      	add	r3, r2
 8001688:	460a      	mov	r2, r1
 800168a:	701a      	strb	r2, [r3, #0]
    			  for (int i = 1; i <= 48; i++) {
 800168c:	f8d7 3268 	ldr.w	r3, [r7, #616]	; 0x268
 8001690:	3301      	adds	r3, #1
 8001692:	f8c7 3268 	str.w	r3, [r7, #616]	; 0x268
 8001696:	f8d7 3268 	ldr.w	r3, [r7, #616]	; 0x268
 800169a:	2b30      	cmp	r3, #48	; 0x30
 800169c:	ddca      	ble.n	8001634 <HAL_UART_RxCpltCallback+0x89c>

    		  }
    			  char data_string[400];
    			  		  		    for (int i = 0; i < 48; i++) {
 800169e:	2300      	movs	r3, #0
 80016a0:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
 80016a4:	e021      	b.n	80016ea <HAL_UART_RxCpltCallback+0x952>
    			  		  		     sprintf(data_string,"Cell %d Balance State: %d\n", i, cell_state[i]);
 80016a6:	f507 7324 	add.w	r3, r7, #656	; 0x290
 80016aa:	f5a3 721f 	sub.w	r2, r3, #636	; 0x27c
 80016ae:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 80016b2:	4413      	add	r3, r2
 80016b4:	781b      	ldrb	r3, [r3, #0]
 80016b6:	f107 0074 	add.w	r0, r7, #116	; 0x74
 80016ba:	f8d7 2264 	ldr.w	r2, [r7, #612]	; 0x264
 80016be:	490f      	ldr	r1, [pc, #60]	; (80016fc <HAL_UART_RxCpltCallback+0x964>)
 80016c0:	f003 fa02 	bl	8004ac8 <siprintf>
    			  		  		     HAL_UART_Transmit(&huart2, (uint8_t*)data_string, strlen(data_string), HAL_MAX_DELAY);
 80016c4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80016c8:	4618      	mov	r0, r3
 80016ca:	f7fe fd8b 	bl	80001e4 <strlen>
 80016ce:	4603      	mov	r3, r0
 80016d0:	b29a      	uxth	r2, r3
 80016d2:	f107 0174 	add.w	r1, r7, #116	; 0x74
 80016d6:	f04f 33ff 	mov.w	r3, #4294967295
 80016da:	4809      	ldr	r0, [pc, #36]	; (8001700 <HAL_UART_RxCpltCallback+0x968>)
 80016dc:	f002 f877 	bl	80037ce <HAL_UART_Transmit>
    			  		  		    for (int i = 0; i < 48; i++) {
 80016e0:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 80016e4:	3301      	adds	r3, #1
 80016e6:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
 80016ea:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 80016ee:	2b2f      	cmp	r3, #47	; 0x2f
 80016f0:	ddd9      	ble.n	80016a6 <HAL_UART_RxCpltCallback+0x90e>
 80016f2:	f000 be22 	b.w	800233a <HAL_UART_RxCpltCallback+0x15a2>
 80016f6:	bf00      	nop
 80016f8:	200000c0 	.word	0x200000c0
 80016fc:	08005bc0 	.word	0x08005bc0
 8001700:	20000188 	.word	0x20000188
    			  		  		    }
    		  }
    		  else if (strcmp(RxBuffer, "failuer") == 0)
 8001704:	49d1      	ldr	r1, [pc, #836]	; (8001a4c <HAL_UART_RxCpltCallback+0xcb4>)
 8001706:	48d2      	ldr	r0, [pc, #840]	; (8001a50 <HAL_UART_RxCpltCallback+0xcb8>)
 8001708:	f7fe fd62 	bl	80001d0 <strcmp>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	f040 8613 	bne.w	800233a <HAL_UART_RxCpltCallback+0x15a2>
    		  {
    			  char error_message[256];  // Buffer pour le message d'erreur
    			      int error_detected = 0;   // Indicateur d'erreur
 8001714:	2300      	movs	r3, #0
 8001716:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260

    			      // On commence par vider le message d'erreur
    			      memset(error_message, 0, sizeof(error_message));
 800171a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800171e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001722:	2100      	movs	r1, #0
 8001724:	4618      	mov	r0, r3
 8001726:	f003 fac7 	bl	8004cb8 <memset>

    			      // Vérification des bits dans chaque octet
    			      // Byte 0
    			      if (TxData_failuer[0] & 0x01) { strcat(error_message, "Cell_H1 Error; "); error_detected = 1; }
 800172a:	4bca      	ldr	r3, [pc, #808]	; (8001a54 <HAL_UART_RxCpltCallback+0xcbc>)
 800172c:	781b      	ldrb	r3, [r3, #0]
 800172e:	f003 0301 	and.w	r3, r3, #1
 8001732:	2b00      	cmp	r3, #0
 8001734:	d014      	beq.n	8001760 <HAL_UART_RxCpltCallback+0x9c8>
 8001736:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800173a:	4618      	mov	r0, r3
 800173c:	f7fe fd52 	bl	80001e4 <strlen>
 8001740:	4603      	mov	r3, r0
 8001742:	461a      	mov	r2, r3
 8001744:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001748:	4413      	add	r3, r2
 800174a:	4ac3      	ldr	r2, [pc, #780]	; (8001a58 <HAL_UART_RxCpltCallback+0xcc0>)
 800174c:	461c      	mov	r4, r3
 800174e:	4615      	mov	r5, r2
 8001750:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001752:	6020      	str	r0, [r4, #0]
 8001754:	6061      	str	r1, [r4, #4]
 8001756:	60a2      	str	r2, [r4, #8]
 8001758:	60e3      	str	r3, [r4, #12]
 800175a:	2301      	movs	r3, #1
 800175c:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
    			      if (TxData_failuer[0] & 0x02) { strcat(error_message, "Cell_H2 Error; "); error_detected = 1; }
 8001760:	4bbc      	ldr	r3, [pc, #752]	; (8001a54 <HAL_UART_RxCpltCallback+0xcbc>)
 8001762:	781b      	ldrb	r3, [r3, #0]
 8001764:	f003 0302 	and.w	r3, r3, #2
 8001768:	2b00      	cmp	r3, #0
 800176a:	d014      	beq.n	8001796 <HAL_UART_RxCpltCallback+0x9fe>
 800176c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001770:	4618      	mov	r0, r3
 8001772:	f7fe fd37 	bl	80001e4 <strlen>
 8001776:	4603      	mov	r3, r0
 8001778:	461a      	mov	r2, r3
 800177a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800177e:	4413      	add	r3, r2
 8001780:	4ab6      	ldr	r2, [pc, #728]	; (8001a5c <HAL_UART_RxCpltCallback+0xcc4>)
 8001782:	461c      	mov	r4, r3
 8001784:	4615      	mov	r5, r2
 8001786:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001788:	6020      	str	r0, [r4, #0]
 800178a:	6061      	str	r1, [r4, #4]
 800178c:	60a2      	str	r2, [r4, #8]
 800178e:	60e3      	str	r3, [r4, #12]
 8001790:	2301      	movs	r3, #1
 8001792:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
    			      if (TxData_failuer[0] & 0x04) { strcat(error_message, "Cell_L1 Error; "); error_detected = 1; }
 8001796:	4baf      	ldr	r3, [pc, #700]	; (8001a54 <HAL_UART_RxCpltCallback+0xcbc>)
 8001798:	781b      	ldrb	r3, [r3, #0]
 800179a:	f003 0304 	and.w	r3, r3, #4
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d014      	beq.n	80017cc <HAL_UART_RxCpltCallback+0xa34>
 80017a2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80017a6:	4618      	mov	r0, r3
 80017a8:	f7fe fd1c 	bl	80001e4 <strlen>
 80017ac:	4603      	mov	r3, r0
 80017ae:	461a      	mov	r2, r3
 80017b0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80017b4:	4413      	add	r3, r2
 80017b6:	4aaa      	ldr	r2, [pc, #680]	; (8001a60 <HAL_UART_RxCpltCallback+0xcc8>)
 80017b8:	461c      	mov	r4, r3
 80017ba:	4615      	mov	r5, r2
 80017bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017be:	6020      	str	r0, [r4, #0]
 80017c0:	6061      	str	r1, [r4, #4]
 80017c2:	60a2      	str	r2, [r4, #8]
 80017c4:	60e3      	str	r3, [r4, #12]
 80017c6:	2301      	movs	r3, #1
 80017c8:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
    			      if (TxData_failuer[0] & 0x08) { strcat(error_message, "Cell_L2 Error; "); error_detected = 1; }
 80017cc:	4ba1      	ldr	r3, [pc, #644]	; (8001a54 <HAL_UART_RxCpltCallback+0xcbc>)
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	f003 0308 	and.w	r3, r3, #8
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d014      	beq.n	8001802 <HAL_UART_RxCpltCallback+0xa6a>
 80017d8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80017dc:	4618      	mov	r0, r3
 80017de:	f7fe fd01 	bl	80001e4 <strlen>
 80017e2:	4603      	mov	r3, r0
 80017e4:	461a      	mov	r2, r3
 80017e6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80017ea:	4413      	add	r3, r2
 80017ec:	4a9d      	ldr	r2, [pc, #628]	; (8001a64 <HAL_UART_RxCpltCallback+0xccc>)
 80017ee:	461c      	mov	r4, r3
 80017f0:	4615      	mov	r5, r2
 80017f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017f4:	6020      	str	r0, [r4, #0]
 80017f6:	6061      	str	r1, [r4, #4]
 80017f8:	60a2      	str	r2, [r4, #8]
 80017fa:	60e3      	str	r3, [r4, #12]
 80017fc:	2301      	movs	r3, #1
 80017fe:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
    			      if (TxData_failuer[0] & 0x10) { strcat(error_message, "Sum_H1 Error; "); error_detected = 1; }
 8001802:	4b94      	ldr	r3, [pc, #592]	; (8001a54 <HAL_UART_RxCpltCallback+0xcbc>)
 8001804:	781b      	ldrb	r3, [r3, #0]
 8001806:	f003 0310 	and.w	r3, r3, #16
 800180a:	2b00      	cmp	r3, #0
 800180c:	d017      	beq.n	800183e <HAL_UART_RxCpltCallback+0xaa6>
 800180e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001812:	4618      	mov	r0, r3
 8001814:	f7fe fce6 	bl	80001e4 <strlen>
 8001818:	4603      	mov	r3, r0
 800181a:	461a      	mov	r2, r3
 800181c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001820:	4413      	add	r3, r2
 8001822:	4a91      	ldr	r2, [pc, #580]	; (8001a68 <HAL_UART_RxCpltCallback+0xcd0>)
 8001824:	461c      	mov	r4, r3
 8001826:	4613      	mov	r3, r2
 8001828:	cb07      	ldmia	r3!, {r0, r1, r2}
 800182a:	6020      	str	r0, [r4, #0]
 800182c:	6061      	str	r1, [r4, #4]
 800182e:	60a2      	str	r2, [r4, #8]
 8001830:	881a      	ldrh	r2, [r3, #0]
 8001832:	789b      	ldrb	r3, [r3, #2]
 8001834:	81a2      	strh	r2, [r4, #12]
 8001836:	73a3      	strb	r3, [r4, #14]
 8001838:	2301      	movs	r3, #1
 800183a:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
    			      if (TxData_failuer[0] & 0x20) { strcat(error_message, "Sum_H2 Error; "); error_detected = 1; }
 800183e:	4b85      	ldr	r3, [pc, #532]	; (8001a54 <HAL_UART_RxCpltCallback+0xcbc>)
 8001840:	781b      	ldrb	r3, [r3, #0]
 8001842:	f003 0320 	and.w	r3, r3, #32
 8001846:	2b00      	cmp	r3, #0
 8001848:	d017      	beq.n	800187a <HAL_UART_RxCpltCallback+0xae2>
 800184a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800184e:	4618      	mov	r0, r3
 8001850:	f7fe fcc8 	bl	80001e4 <strlen>
 8001854:	4603      	mov	r3, r0
 8001856:	461a      	mov	r2, r3
 8001858:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800185c:	4413      	add	r3, r2
 800185e:	4a83      	ldr	r2, [pc, #524]	; (8001a6c <HAL_UART_RxCpltCallback+0xcd4>)
 8001860:	461c      	mov	r4, r3
 8001862:	4613      	mov	r3, r2
 8001864:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001866:	6020      	str	r0, [r4, #0]
 8001868:	6061      	str	r1, [r4, #4]
 800186a:	60a2      	str	r2, [r4, #8]
 800186c:	881a      	ldrh	r2, [r3, #0]
 800186e:	789b      	ldrb	r3, [r3, #2]
 8001870:	81a2      	strh	r2, [r4, #12]
 8001872:	73a3      	strb	r3, [r4, #14]
 8001874:	2301      	movs	r3, #1
 8001876:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
    			      if (TxData_failuer[0] & 0x40) { strcat(error_message, "Sum_L1 Error; "); error_detected = 1; }
 800187a:	4b76      	ldr	r3, [pc, #472]	; (8001a54 <HAL_UART_RxCpltCallback+0xcbc>)
 800187c:	781b      	ldrb	r3, [r3, #0]
 800187e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001882:	2b00      	cmp	r3, #0
 8001884:	d017      	beq.n	80018b6 <HAL_UART_RxCpltCallback+0xb1e>
 8001886:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800188a:	4618      	mov	r0, r3
 800188c:	f7fe fcaa 	bl	80001e4 <strlen>
 8001890:	4603      	mov	r3, r0
 8001892:	461a      	mov	r2, r3
 8001894:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001898:	4413      	add	r3, r2
 800189a:	4a75      	ldr	r2, [pc, #468]	; (8001a70 <HAL_UART_RxCpltCallback+0xcd8>)
 800189c:	461c      	mov	r4, r3
 800189e:	4613      	mov	r3, r2
 80018a0:	cb07      	ldmia	r3!, {r0, r1, r2}
 80018a2:	6020      	str	r0, [r4, #0]
 80018a4:	6061      	str	r1, [r4, #4]
 80018a6:	60a2      	str	r2, [r4, #8]
 80018a8:	881a      	ldrh	r2, [r3, #0]
 80018aa:	789b      	ldrb	r3, [r3, #2]
 80018ac:	81a2      	strh	r2, [r4, #12]
 80018ae:	73a3      	strb	r3, [r4, #14]
 80018b0:	2301      	movs	r3, #1
 80018b2:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
    			      if (TxData_failuer[0] & 0x80) { strcat(error_message, "Sum_L2 Error; "); error_detected = 1; }
 80018b6:	4b67      	ldr	r3, [pc, #412]	; (8001a54 <HAL_UART_RxCpltCallback+0xcbc>)
 80018b8:	781b      	ldrb	r3, [r3, #0]
 80018ba:	b25b      	sxtb	r3, r3
 80018bc:	2b00      	cmp	r3, #0
 80018be:	da17      	bge.n	80018f0 <HAL_UART_RxCpltCallback+0xb58>
 80018c0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80018c4:	4618      	mov	r0, r3
 80018c6:	f7fe fc8d 	bl	80001e4 <strlen>
 80018ca:	4603      	mov	r3, r0
 80018cc:	461a      	mov	r2, r3
 80018ce:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80018d2:	4413      	add	r3, r2
 80018d4:	4a67      	ldr	r2, [pc, #412]	; (8001a74 <HAL_UART_RxCpltCallback+0xcdc>)
 80018d6:	461c      	mov	r4, r3
 80018d8:	4613      	mov	r3, r2
 80018da:	cb07      	ldmia	r3!, {r0, r1, r2}
 80018dc:	6020      	str	r0, [r4, #0]
 80018de:	6061      	str	r1, [r4, #4]
 80018e0:	60a2      	str	r2, [r4, #8]
 80018e2:	881a      	ldrh	r2, [r3, #0]
 80018e4:	789b      	ldrb	r3, [r3, #2]
 80018e6:	81a2      	strh	r2, [r4, #12]
 80018e8:	73a3      	strb	r3, [r4, #14]
 80018ea:	2301      	movs	r3, #1
 80018ec:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260

    			      // Byte 1
    			      if (TxData_failuer[1] & 0x01) { strcat(error_message, "C_temp_H1 Error; "); error_detected = 1; }
 80018f0:	4b58      	ldr	r3, [pc, #352]	; (8001a54 <HAL_UART_RxCpltCallback+0xcbc>)
 80018f2:	785b      	ldrb	r3, [r3, #1]
 80018f4:	f003 0301 	and.w	r3, r3, #1
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d016      	beq.n	800192a <HAL_UART_RxCpltCallback+0xb92>
 80018fc:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001900:	4618      	mov	r0, r3
 8001902:	f7fe fc6f 	bl	80001e4 <strlen>
 8001906:	4603      	mov	r3, r0
 8001908:	461a      	mov	r2, r3
 800190a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800190e:	4413      	add	r3, r2
 8001910:	4a59      	ldr	r2, [pc, #356]	; (8001a78 <HAL_UART_RxCpltCallback+0xce0>)
 8001912:	461d      	mov	r5, r3
 8001914:	4614      	mov	r4, r2
 8001916:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001918:	6028      	str	r0, [r5, #0]
 800191a:	6069      	str	r1, [r5, #4]
 800191c:	60aa      	str	r2, [r5, #8]
 800191e:	60eb      	str	r3, [r5, #12]
 8001920:	8823      	ldrh	r3, [r4, #0]
 8001922:	822b      	strh	r3, [r5, #16]
 8001924:	2301      	movs	r3, #1
 8001926:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
    			      if (TxData_failuer[1] & 0x02) { strcat(error_message, "C_temp_H2 Error; "); error_detected = 1; }
 800192a:	4b4a      	ldr	r3, [pc, #296]	; (8001a54 <HAL_UART_RxCpltCallback+0xcbc>)
 800192c:	785b      	ldrb	r3, [r3, #1]
 800192e:	f003 0302 	and.w	r3, r3, #2
 8001932:	2b00      	cmp	r3, #0
 8001934:	d016      	beq.n	8001964 <HAL_UART_RxCpltCallback+0xbcc>
 8001936:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800193a:	4618      	mov	r0, r3
 800193c:	f7fe fc52 	bl	80001e4 <strlen>
 8001940:	4603      	mov	r3, r0
 8001942:	461a      	mov	r2, r3
 8001944:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001948:	4413      	add	r3, r2
 800194a:	4a4c      	ldr	r2, [pc, #304]	; (8001a7c <HAL_UART_RxCpltCallback+0xce4>)
 800194c:	461d      	mov	r5, r3
 800194e:	4614      	mov	r4, r2
 8001950:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001952:	6028      	str	r0, [r5, #0]
 8001954:	6069      	str	r1, [r5, #4]
 8001956:	60aa      	str	r2, [r5, #8]
 8001958:	60eb      	str	r3, [r5, #12]
 800195a:	8823      	ldrh	r3, [r4, #0]
 800195c:	822b      	strh	r3, [r5, #16]
 800195e:	2301      	movs	r3, #1
 8001960:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
    			      if (TxData_failuer[1] & 0x04) { strcat(error_message, "C_temp_L1 Error; "); error_detected = 1; }
 8001964:	4b3b      	ldr	r3, [pc, #236]	; (8001a54 <HAL_UART_RxCpltCallback+0xcbc>)
 8001966:	785b      	ldrb	r3, [r3, #1]
 8001968:	f003 0304 	and.w	r3, r3, #4
 800196c:	2b00      	cmp	r3, #0
 800196e:	d016      	beq.n	800199e <HAL_UART_RxCpltCallback+0xc06>
 8001970:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001974:	4618      	mov	r0, r3
 8001976:	f7fe fc35 	bl	80001e4 <strlen>
 800197a:	4603      	mov	r3, r0
 800197c:	461a      	mov	r2, r3
 800197e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001982:	4413      	add	r3, r2
 8001984:	4a3e      	ldr	r2, [pc, #248]	; (8001a80 <HAL_UART_RxCpltCallback+0xce8>)
 8001986:	461d      	mov	r5, r3
 8001988:	4614      	mov	r4, r2
 800198a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800198c:	6028      	str	r0, [r5, #0]
 800198e:	6069      	str	r1, [r5, #4]
 8001990:	60aa      	str	r2, [r5, #8]
 8001992:	60eb      	str	r3, [r5, #12]
 8001994:	8823      	ldrh	r3, [r4, #0]
 8001996:	822b      	strh	r3, [r5, #16]
 8001998:	2301      	movs	r3, #1
 800199a:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
    			      if (TxData_failuer[1] & 0x08) { strcat(error_message, "C_temp_L2 Error; "); error_detected = 1; }
 800199e:	4b2d      	ldr	r3, [pc, #180]	; (8001a54 <HAL_UART_RxCpltCallback+0xcbc>)
 80019a0:	785b      	ldrb	r3, [r3, #1]
 80019a2:	f003 0308 	and.w	r3, r3, #8
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d016      	beq.n	80019d8 <HAL_UART_RxCpltCallback+0xc40>
 80019aa:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80019ae:	4618      	mov	r0, r3
 80019b0:	f7fe fc18 	bl	80001e4 <strlen>
 80019b4:	4603      	mov	r3, r0
 80019b6:	461a      	mov	r2, r3
 80019b8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80019bc:	4413      	add	r3, r2
 80019be:	4a31      	ldr	r2, [pc, #196]	; (8001a84 <HAL_UART_RxCpltCallback+0xcec>)
 80019c0:	461d      	mov	r5, r3
 80019c2:	4614      	mov	r4, r2
 80019c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019c6:	6028      	str	r0, [r5, #0]
 80019c8:	6069      	str	r1, [r5, #4]
 80019ca:	60aa      	str	r2, [r5, #8]
 80019cc:	60eb      	str	r3, [r5, #12]
 80019ce:	8823      	ldrh	r3, [r4, #0]
 80019d0:	822b      	strh	r3, [r5, #16]
 80019d2:	2301      	movs	r3, #1
 80019d4:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
    			      if (TxData_failuer[1] & 0x10) { strcat(error_message, "DC_temp_H1 Error; "); error_detected = 1; }
 80019d8:	4b1e      	ldr	r3, [pc, #120]	; (8001a54 <HAL_UART_RxCpltCallback+0xcbc>)
 80019da:	785b      	ldrb	r3, [r3, #1]
 80019dc:	f003 0310 	and.w	r3, r3, #16
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d019      	beq.n	8001a18 <HAL_UART_RxCpltCallback+0xc80>
 80019e4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80019e8:	4618      	mov	r0, r3
 80019ea:	f7fe fbfb 	bl	80001e4 <strlen>
 80019ee:	4603      	mov	r3, r0
 80019f0:	461a      	mov	r2, r3
 80019f2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80019f6:	4413      	add	r3, r2
 80019f8:	4a23      	ldr	r2, [pc, #140]	; (8001a88 <HAL_UART_RxCpltCallback+0xcf0>)
 80019fa:	461d      	mov	r5, r3
 80019fc:	4614      	mov	r4, r2
 80019fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a00:	6028      	str	r0, [r5, #0]
 8001a02:	6069      	str	r1, [r5, #4]
 8001a04:	60aa      	str	r2, [r5, #8]
 8001a06:	60eb      	str	r3, [r5, #12]
 8001a08:	8823      	ldrh	r3, [r4, #0]
 8001a0a:	78a2      	ldrb	r2, [r4, #2]
 8001a0c:	822b      	strh	r3, [r5, #16]
 8001a0e:	4613      	mov	r3, r2
 8001a10:	74ab      	strb	r3, [r5, #18]
 8001a12:	2301      	movs	r3, #1
 8001a14:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
    			      if (TxData_failuer[1] & 0x20) { strcat(error_message, "DC_temp_H2 Error; "); error_detected = 1; }
 8001a18:	4b0e      	ldr	r3, [pc, #56]	; (8001a54 <HAL_UART_RxCpltCallback+0xcbc>)
 8001a1a:	785b      	ldrb	r3, [r3, #1]
 8001a1c:	f003 0320 	and.w	r3, r3, #32
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d03d      	beq.n	8001aa0 <HAL_UART_RxCpltCallback+0xd08>
 8001a24:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f7fe fbdb 	bl	80001e4 <strlen>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	461a      	mov	r2, r3
 8001a32:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001a36:	4413      	add	r3, r2
 8001a38:	4a14      	ldr	r2, [pc, #80]	; (8001a8c <HAL_UART_RxCpltCallback+0xcf4>)
 8001a3a:	461d      	mov	r5, r3
 8001a3c:	4614      	mov	r4, r2
 8001a3e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a40:	6028      	str	r0, [r5, #0]
 8001a42:	6069      	str	r1, [r5, #4]
 8001a44:	60aa      	str	r2, [r5, #8]
 8001a46:	60eb      	str	r3, [r5, #12]
 8001a48:	e022      	b.n	8001a90 <HAL_UART_RxCpltCallback+0xcf8>
 8001a4a:	bf00      	nop
 8001a4c:	08005bdc 	.word	0x08005bdc
 8001a50:	20000154 	.word	0x20000154
 8001a54:	200000c8 	.word	0x200000c8
 8001a58:	08005be4 	.word	0x08005be4
 8001a5c:	08005bf4 	.word	0x08005bf4
 8001a60:	08005c04 	.word	0x08005c04
 8001a64:	08005c14 	.word	0x08005c14
 8001a68:	08005c24 	.word	0x08005c24
 8001a6c:	08005c34 	.word	0x08005c34
 8001a70:	08005c44 	.word	0x08005c44
 8001a74:	08005c54 	.word	0x08005c54
 8001a78:	08005c64 	.word	0x08005c64
 8001a7c:	08005c78 	.word	0x08005c78
 8001a80:	08005c8c 	.word	0x08005c8c
 8001a84:	08005ca0 	.word	0x08005ca0
 8001a88:	08005cb4 	.word	0x08005cb4
 8001a8c:	08005cc8 	.word	0x08005cc8
 8001a90:	8823      	ldrh	r3, [r4, #0]
 8001a92:	78a2      	ldrb	r2, [r4, #2]
 8001a94:	822b      	strh	r3, [r5, #16]
 8001a96:	4613      	mov	r3, r2
 8001a98:	74ab      	strb	r3, [r5, #18]
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
    			      if (TxData_failuer[1] & 0x40) { strcat(error_message, "DC_temp_L1 Error; "); error_detected = 1; }
 8001aa0:	4bd0      	ldr	r3, [pc, #832]	; (8001de4 <HAL_UART_RxCpltCallback+0x104c>)
 8001aa2:	785b      	ldrb	r3, [r3, #1]
 8001aa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d019      	beq.n	8001ae0 <HAL_UART_RxCpltCallback+0xd48>
 8001aac:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f7fe fb97 	bl	80001e4 <strlen>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	461a      	mov	r2, r3
 8001aba:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001abe:	4413      	add	r3, r2
 8001ac0:	4ac9      	ldr	r2, [pc, #804]	; (8001de8 <HAL_UART_RxCpltCallback+0x1050>)
 8001ac2:	461d      	mov	r5, r3
 8001ac4:	4614      	mov	r4, r2
 8001ac6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ac8:	6028      	str	r0, [r5, #0]
 8001aca:	6069      	str	r1, [r5, #4]
 8001acc:	60aa      	str	r2, [r5, #8]
 8001ace:	60eb      	str	r3, [r5, #12]
 8001ad0:	8823      	ldrh	r3, [r4, #0]
 8001ad2:	78a2      	ldrb	r2, [r4, #2]
 8001ad4:	822b      	strh	r3, [r5, #16]
 8001ad6:	4613      	mov	r3, r2
 8001ad8:	74ab      	strb	r3, [r5, #18]
 8001ada:	2301      	movs	r3, #1
 8001adc:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
    			      if (TxData_failuer[1] & 0x80) { strcat(error_message, "DC_temp_L2 Error; "); error_detected = 1; }
 8001ae0:	4bc0      	ldr	r3, [pc, #768]	; (8001de4 <HAL_UART_RxCpltCallback+0x104c>)
 8001ae2:	785b      	ldrb	r3, [r3, #1]
 8001ae4:	b25b      	sxtb	r3, r3
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	da19      	bge.n	8001b1e <HAL_UART_RxCpltCallback+0xd86>
 8001aea:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001aee:	4618      	mov	r0, r3
 8001af0:	f7fe fb78 	bl	80001e4 <strlen>
 8001af4:	4603      	mov	r3, r0
 8001af6:	461a      	mov	r2, r3
 8001af8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001afc:	4413      	add	r3, r2
 8001afe:	4abb      	ldr	r2, [pc, #748]	; (8001dec <HAL_UART_RxCpltCallback+0x1054>)
 8001b00:	461d      	mov	r5, r3
 8001b02:	4614      	mov	r4, r2
 8001b04:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b06:	6028      	str	r0, [r5, #0]
 8001b08:	6069      	str	r1, [r5, #4]
 8001b0a:	60aa      	str	r2, [r5, #8]
 8001b0c:	60eb      	str	r3, [r5, #12]
 8001b0e:	8823      	ldrh	r3, [r4, #0]
 8001b10:	78a2      	ldrb	r2, [r4, #2]
 8001b12:	822b      	strh	r3, [r5, #16]
 8001b14:	4613      	mov	r3, r2
 8001b16:	74ab      	strb	r3, [r5, #18]
 8001b18:	2301      	movs	r3, #1
 8001b1a:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260

    			      // Byte 2
    			      if (TxData_failuer[2] & 0x01) { strcat(error_message, "C_OC_1 Error; "); error_detected = 1; }
 8001b1e:	4bb1      	ldr	r3, [pc, #708]	; (8001de4 <HAL_UART_RxCpltCallback+0x104c>)
 8001b20:	789b      	ldrb	r3, [r3, #2]
 8001b22:	f003 0301 	and.w	r3, r3, #1
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d017      	beq.n	8001b5a <HAL_UART_RxCpltCallback+0xdc2>
 8001b2a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f7fe fb58 	bl	80001e4 <strlen>
 8001b34:	4603      	mov	r3, r0
 8001b36:	461a      	mov	r2, r3
 8001b38:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001b3c:	4413      	add	r3, r2
 8001b3e:	4aac      	ldr	r2, [pc, #688]	; (8001df0 <HAL_UART_RxCpltCallback+0x1058>)
 8001b40:	461c      	mov	r4, r3
 8001b42:	4613      	mov	r3, r2
 8001b44:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001b46:	6020      	str	r0, [r4, #0]
 8001b48:	6061      	str	r1, [r4, #4]
 8001b4a:	60a2      	str	r2, [r4, #8]
 8001b4c:	881a      	ldrh	r2, [r3, #0]
 8001b4e:	789b      	ldrb	r3, [r3, #2]
 8001b50:	81a2      	strh	r2, [r4, #12]
 8001b52:	73a3      	strb	r3, [r4, #14]
 8001b54:	2301      	movs	r3, #1
 8001b56:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
    			      if (TxData_failuer[2] & 0x02) { strcat(error_message, "C_OC_2 Error; "); error_detected = 1; }
 8001b5a:	4ba2      	ldr	r3, [pc, #648]	; (8001de4 <HAL_UART_RxCpltCallback+0x104c>)
 8001b5c:	789b      	ldrb	r3, [r3, #2]
 8001b5e:	f003 0302 	and.w	r3, r3, #2
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d017      	beq.n	8001b96 <HAL_UART_RxCpltCallback+0xdfe>
 8001b66:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f7fe fb3a 	bl	80001e4 <strlen>
 8001b70:	4603      	mov	r3, r0
 8001b72:	461a      	mov	r2, r3
 8001b74:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001b78:	4413      	add	r3, r2
 8001b7a:	4a9e      	ldr	r2, [pc, #632]	; (8001df4 <HAL_UART_RxCpltCallback+0x105c>)
 8001b7c:	461c      	mov	r4, r3
 8001b7e:	4613      	mov	r3, r2
 8001b80:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001b82:	6020      	str	r0, [r4, #0]
 8001b84:	6061      	str	r1, [r4, #4]
 8001b86:	60a2      	str	r2, [r4, #8]
 8001b88:	881a      	ldrh	r2, [r3, #0]
 8001b8a:	789b      	ldrb	r3, [r3, #2]
 8001b8c:	81a2      	strh	r2, [r4, #12]
 8001b8e:	73a3      	strb	r3, [r4, #14]
 8001b90:	2301      	movs	r3, #1
 8001b92:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
    			      if (TxData_failuer[2] & 0x04) { strcat(error_message, "DC_OC_1 Error; "); error_detected = 1; }
 8001b96:	4b93      	ldr	r3, [pc, #588]	; (8001de4 <HAL_UART_RxCpltCallback+0x104c>)
 8001b98:	789b      	ldrb	r3, [r3, #2]
 8001b9a:	f003 0304 	and.w	r3, r3, #4
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d014      	beq.n	8001bcc <HAL_UART_RxCpltCallback+0xe34>
 8001ba2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f7fe fb1c 	bl	80001e4 <strlen>
 8001bac:	4603      	mov	r3, r0
 8001bae:	461a      	mov	r2, r3
 8001bb0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001bb4:	4413      	add	r3, r2
 8001bb6:	4a90      	ldr	r2, [pc, #576]	; (8001df8 <HAL_UART_RxCpltCallback+0x1060>)
 8001bb8:	461c      	mov	r4, r3
 8001bba:	4615      	mov	r5, r2
 8001bbc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001bbe:	6020      	str	r0, [r4, #0]
 8001bc0:	6061      	str	r1, [r4, #4]
 8001bc2:	60a2      	str	r2, [r4, #8]
 8001bc4:	60e3      	str	r3, [r4, #12]
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
    			      if (TxData_failuer[2] & 0x08) { strcat(error_message, "DC_OC_2 Error; "); error_detected = 1; }
 8001bcc:	4b85      	ldr	r3, [pc, #532]	; (8001de4 <HAL_UART_RxCpltCallback+0x104c>)
 8001bce:	789b      	ldrb	r3, [r3, #2]
 8001bd0:	f003 0308 	and.w	r3, r3, #8
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d014      	beq.n	8001c02 <HAL_UART_RxCpltCallback+0xe6a>
 8001bd8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f7fe fb01 	bl	80001e4 <strlen>
 8001be2:	4603      	mov	r3, r0
 8001be4:	461a      	mov	r2, r3
 8001be6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001bea:	4413      	add	r3, r2
 8001bec:	4a83      	ldr	r2, [pc, #524]	; (8001dfc <HAL_UART_RxCpltCallback+0x1064>)
 8001bee:	461c      	mov	r4, r3
 8001bf0:	4615      	mov	r5, r2
 8001bf2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001bf4:	6020      	str	r0, [r4, #0]
 8001bf6:	6061      	str	r1, [r4, #4]
 8001bf8:	60a2      	str	r2, [r4, #8]
 8001bfa:	60e3      	str	r3, [r4, #12]
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
    			      if (TxData_failuer[2] & 0x10) { strcat(error_message, "SOC_H1 Error; "); error_detected = 1; }
 8001c02:	4b78      	ldr	r3, [pc, #480]	; (8001de4 <HAL_UART_RxCpltCallback+0x104c>)
 8001c04:	789b      	ldrb	r3, [r3, #2]
 8001c06:	f003 0310 	and.w	r3, r3, #16
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d017      	beq.n	8001c3e <HAL_UART_RxCpltCallback+0xea6>
 8001c0e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001c12:	4618      	mov	r0, r3
 8001c14:	f7fe fae6 	bl	80001e4 <strlen>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	461a      	mov	r2, r3
 8001c1c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001c20:	4413      	add	r3, r2
 8001c22:	4a77      	ldr	r2, [pc, #476]	; (8001e00 <HAL_UART_RxCpltCallback+0x1068>)
 8001c24:	461c      	mov	r4, r3
 8001c26:	4613      	mov	r3, r2
 8001c28:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001c2a:	6020      	str	r0, [r4, #0]
 8001c2c:	6061      	str	r1, [r4, #4]
 8001c2e:	60a2      	str	r2, [r4, #8]
 8001c30:	881a      	ldrh	r2, [r3, #0]
 8001c32:	789b      	ldrb	r3, [r3, #2]
 8001c34:	81a2      	strh	r2, [r4, #12]
 8001c36:	73a3      	strb	r3, [r4, #14]
 8001c38:	2301      	movs	r3, #1
 8001c3a:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
    			      if (TxData_failuer[2] & 0x20) { strcat(error_message, "SOC_H2 Error; "); error_detected = 1; }
 8001c3e:	4b69      	ldr	r3, [pc, #420]	; (8001de4 <HAL_UART_RxCpltCallback+0x104c>)
 8001c40:	789b      	ldrb	r3, [r3, #2]
 8001c42:	f003 0320 	and.w	r3, r3, #32
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d017      	beq.n	8001c7a <HAL_UART_RxCpltCallback+0xee2>
 8001c4a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f7fe fac8 	bl	80001e4 <strlen>
 8001c54:	4603      	mov	r3, r0
 8001c56:	461a      	mov	r2, r3
 8001c58:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001c5c:	4413      	add	r3, r2
 8001c5e:	4a69      	ldr	r2, [pc, #420]	; (8001e04 <HAL_UART_RxCpltCallback+0x106c>)
 8001c60:	461c      	mov	r4, r3
 8001c62:	4613      	mov	r3, r2
 8001c64:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001c66:	6020      	str	r0, [r4, #0]
 8001c68:	6061      	str	r1, [r4, #4]
 8001c6a:	60a2      	str	r2, [r4, #8]
 8001c6c:	881a      	ldrh	r2, [r3, #0]
 8001c6e:	789b      	ldrb	r3, [r3, #2]
 8001c70:	81a2      	strh	r2, [r4, #12]
 8001c72:	73a3      	strb	r3, [r4, #14]
 8001c74:	2301      	movs	r3, #1
 8001c76:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
    			      if (TxData_failuer[2] & 0x40) { strcat(error_message, "SOC_L1 Error; "); error_detected = 1; }
 8001c7a:	4b5a      	ldr	r3, [pc, #360]	; (8001de4 <HAL_UART_RxCpltCallback+0x104c>)
 8001c7c:	789b      	ldrb	r3, [r3, #2]
 8001c7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d017      	beq.n	8001cb6 <HAL_UART_RxCpltCallback+0xf1e>
 8001c86:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f7fe faaa 	bl	80001e4 <strlen>
 8001c90:	4603      	mov	r3, r0
 8001c92:	461a      	mov	r2, r3
 8001c94:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001c98:	4413      	add	r3, r2
 8001c9a:	4a5b      	ldr	r2, [pc, #364]	; (8001e08 <HAL_UART_RxCpltCallback+0x1070>)
 8001c9c:	461c      	mov	r4, r3
 8001c9e:	4613      	mov	r3, r2
 8001ca0:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001ca2:	6020      	str	r0, [r4, #0]
 8001ca4:	6061      	str	r1, [r4, #4]
 8001ca6:	60a2      	str	r2, [r4, #8]
 8001ca8:	881a      	ldrh	r2, [r3, #0]
 8001caa:	789b      	ldrb	r3, [r3, #2]
 8001cac:	81a2      	strh	r2, [r4, #12]
 8001cae:	73a3      	strb	r3, [r4, #14]
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
    			      if (TxData_failuer[2] & 0x80) { strcat(error_message, "SOC_L2 Error; "); error_detected = 1; }
 8001cb6:	4b4b      	ldr	r3, [pc, #300]	; (8001de4 <HAL_UART_RxCpltCallback+0x104c>)
 8001cb8:	789b      	ldrb	r3, [r3, #2]
 8001cba:	b25b      	sxtb	r3, r3
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	da17      	bge.n	8001cf0 <HAL_UART_RxCpltCallback+0xf58>
 8001cc0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f7fe fa8d 	bl	80001e4 <strlen>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	461a      	mov	r2, r3
 8001cce:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001cd2:	4413      	add	r3, r2
 8001cd4:	4a4d      	ldr	r2, [pc, #308]	; (8001e0c <HAL_UART_RxCpltCallback+0x1074>)
 8001cd6:	461c      	mov	r4, r3
 8001cd8:	4613      	mov	r3, r2
 8001cda:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001cdc:	6020      	str	r0, [r4, #0]
 8001cde:	6061      	str	r1, [r4, #4]
 8001ce0:	60a2      	str	r2, [r4, #8]
 8001ce2:	881a      	ldrh	r2, [r3, #0]
 8001ce4:	789b      	ldrb	r3, [r3, #2]
 8001ce6:	81a2      	strh	r2, [r4, #12]
 8001ce8:	73a3      	strb	r3, [r4, #14]
 8001cea:	2301      	movs	r3, #1
 8001cec:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260

    			      // Byte 3
    			      if (TxData_failuer[3] & 0x01) { strcat(error_message, "DI_VOLT_1 Error; "); error_detected = 1; }
 8001cf0:	4b3c      	ldr	r3, [pc, #240]	; (8001de4 <HAL_UART_RxCpltCallback+0x104c>)
 8001cf2:	78db      	ldrb	r3, [r3, #3]
 8001cf4:	f003 0301 	and.w	r3, r3, #1
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d016      	beq.n	8001d2a <HAL_UART_RxCpltCallback+0xf92>
 8001cfc:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001d00:	4618      	mov	r0, r3
 8001d02:	f7fe fa6f 	bl	80001e4 <strlen>
 8001d06:	4603      	mov	r3, r0
 8001d08:	461a      	mov	r2, r3
 8001d0a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001d0e:	4413      	add	r3, r2
 8001d10:	4a3f      	ldr	r2, [pc, #252]	; (8001e10 <HAL_UART_RxCpltCallback+0x1078>)
 8001d12:	461d      	mov	r5, r3
 8001d14:	4614      	mov	r4, r2
 8001d16:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d18:	6028      	str	r0, [r5, #0]
 8001d1a:	6069      	str	r1, [r5, #4]
 8001d1c:	60aa      	str	r2, [r5, #8]
 8001d1e:	60eb      	str	r3, [r5, #12]
 8001d20:	8823      	ldrh	r3, [r4, #0]
 8001d22:	822b      	strh	r3, [r5, #16]
 8001d24:	2301      	movs	r3, #1
 8001d26:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
    			      if (TxData_failuer[3] & 0x02) { strcat(error_message, "DI_VOLT_2 Error; "); error_detected = 1; }
 8001d2a:	4b2e      	ldr	r3, [pc, #184]	; (8001de4 <HAL_UART_RxCpltCallback+0x104c>)
 8001d2c:	78db      	ldrb	r3, [r3, #3]
 8001d2e:	f003 0302 	and.w	r3, r3, #2
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d016      	beq.n	8001d64 <HAL_UART_RxCpltCallback+0xfcc>
 8001d36:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f7fe fa52 	bl	80001e4 <strlen>
 8001d40:	4603      	mov	r3, r0
 8001d42:	461a      	mov	r2, r3
 8001d44:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001d48:	4413      	add	r3, r2
 8001d4a:	4a32      	ldr	r2, [pc, #200]	; (8001e14 <HAL_UART_RxCpltCallback+0x107c>)
 8001d4c:	461d      	mov	r5, r3
 8001d4e:	4614      	mov	r4, r2
 8001d50:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d52:	6028      	str	r0, [r5, #0]
 8001d54:	6069      	str	r1, [r5, #4]
 8001d56:	60aa      	str	r2, [r5, #8]
 8001d58:	60eb      	str	r3, [r5, #12]
 8001d5a:	8823      	ldrh	r3, [r4, #0]
 8001d5c:	822b      	strh	r3, [r5, #16]
 8001d5e:	2301      	movs	r3, #1
 8001d60:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
    			      if (TxData_failuer[3] & 0x04) { strcat(error_message, "DDI_TEMP_1 Error; "); error_detected = 1; }
 8001d64:	4b1f      	ldr	r3, [pc, #124]	; (8001de4 <HAL_UART_RxCpltCallback+0x104c>)
 8001d66:	78db      	ldrb	r3, [r3, #3]
 8001d68:	f003 0304 	and.w	r3, r3, #4
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d019      	beq.n	8001da4 <HAL_UART_RxCpltCallback+0x100c>
 8001d70:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001d74:	4618      	mov	r0, r3
 8001d76:	f7fe fa35 	bl	80001e4 <strlen>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	461a      	mov	r2, r3
 8001d7e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001d82:	4413      	add	r3, r2
 8001d84:	4a24      	ldr	r2, [pc, #144]	; (8001e18 <HAL_UART_RxCpltCallback+0x1080>)
 8001d86:	461d      	mov	r5, r3
 8001d88:	4614      	mov	r4, r2
 8001d8a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d8c:	6028      	str	r0, [r5, #0]
 8001d8e:	6069      	str	r1, [r5, #4]
 8001d90:	60aa      	str	r2, [r5, #8]
 8001d92:	60eb      	str	r3, [r5, #12]
 8001d94:	8823      	ldrh	r3, [r4, #0]
 8001d96:	78a2      	ldrb	r2, [r4, #2]
 8001d98:	822b      	strh	r3, [r5, #16]
 8001d9a:	4613      	mov	r3, r2
 8001d9c:	74ab      	strb	r3, [r5, #18]
 8001d9e:	2301      	movs	r3, #1
 8001da0:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
    			      if (TxData_failuer[3] & 0x08) { strcat(error_message, "DI_TEMP_2 Error; "); error_detected = 1; }
 8001da4:	4b0f      	ldr	r3, [pc, #60]	; (8001de4 <HAL_UART_RxCpltCallback+0x104c>)
 8001da6:	78db      	ldrb	r3, [r3, #3]
 8001da8:	f003 0308 	and.w	r3, r3, #8
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d016      	beq.n	8001dde <HAL_UART_RxCpltCallback+0x1046>
 8001db0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001db4:	4618      	mov	r0, r3
 8001db6:	f7fe fa15 	bl	80001e4 <strlen>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	461a      	mov	r2, r3
 8001dbe:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001dc2:	4413      	add	r3, r2
 8001dc4:	4a15      	ldr	r2, [pc, #84]	; (8001e1c <HAL_UART_RxCpltCallback+0x1084>)
 8001dc6:	461d      	mov	r5, r3
 8001dc8:	4614      	mov	r4, r2
 8001dca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001dcc:	6028      	str	r0, [r5, #0]
 8001dce:	6069      	str	r1, [r5, #4]
 8001dd0:	60aa      	str	r2, [r5, #8]
 8001dd2:	60eb      	str	r3, [r5, #12]
 8001dd4:	8823      	ldrh	r3, [r4, #0]
 8001dd6:	822b      	strh	r3, [r5, #16]
 8001dd8:	2301      	movs	r3, #1
 8001dda:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260

    			      // Byte 4
    			      if (TxData_failuer[4] & 0x01) { strcat(error_message, "C_mos_TEMP_H Error; "); error_detected = 1; }
 8001dde:	4b01      	ldr	r3, [pc, #4]	; (8001de4 <HAL_UART_RxCpltCallback+0x104c>)
 8001de0:	791b      	ldrb	r3, [r3, #4]
 8001de2:	e01d      	b.n	8001e20 <HAL_UART_RxCpltCallback+0x1088>
 8001de4:	200000c8 	.word	0x200000c8
 8001de8:	08005cdc 	.word	0x08005cdc
 8001dec:	08005cf0 	.word	0x08005cf0
 8001df0:	08005d04 	.word	0x08005d04
 8001df4:	08005d14 	.word	0x08005d14
 8001df8:	08005d24 	.word	0x08005d24
 8001dfc:	08005d34 	.word	0x08005d34
 8001e00:	08005d44 	.word	0x08005d44
 8001e04:	08005d54 	.word	0x08005d54
 8001e08:	08005d64 	.word	0x08005d64
 8001e0c:	08005d74 	.word	0x08005d74
 8001e10:	08005d84 	.word	0x08005d84
 8001e14:	08005d98 	.word	0x08005d98
 8001e18:	08005dac 	.word	0x08005dac
 8001e1c:	08005dc0 	.word	0x08005dc0
 8001e20:	f003 0301 	and.w	r3, r3, #1
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d018      	beq.n	8001e5a <HAL_UART_RxCpltCallback+0x10c2>
 8001e28:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f7fe f9d9 	bl	80001e4 <strlen>
 8001e32:	4603      	mov	r3, r0
 8001e34:	461a      	mov	r2, r3
 8001e36:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001e3a:	4413      	add	r3, r2
 8001e3c:	4acd      	ldr	r2, [pc, #820]	; (8002174 <HAL_UART_RxCpltCallback+0x13dc>)
 8001e3e:	461d      	mov	r5, r3
 8001e40:	4614      	mov	r4, r2
 8001e42:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e44:	6028      	str	r0, [r5, #0]
 8001e46:	6069      	str	r1, [r5, #4]
 8001e48:	60aa      	str	r2, [r5, #8]
 8001e4a:	60eb      	str	r3, [r5, #12]
 8001e4c:	6820      	ldr	r0, [r4, #0]
 8001e4e:	6128      	str	r0, [r5, #16]
 8001e50:	7923      	ldrb	r3, [r4, #4]
 8001e52:	752b      	strb	r3, [r5, #20]
 8001e54:	2301      	movs	r3, #1
 8001e56:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
    			      if (TxData_failuer[4] & 0x02) { strcat(error_message, "DC_mos_TEMP_H Error; "); error_detected = 1; }
 8001e5a:	4bc7      	ldr	r3, [pc, #796]	; (8002178 <HAL_UART_RxCpltCallback+0x13e0>)
 8001e5c:	791b      	ldrb	r3, [r3, #4]
 8001e5e:	f003 0302 	and.w	r3, r3, #2
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d018      	beq.n	8001e98 <HAL_UART_RxCpltCallback+0x1100>
 8001e66:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f7fe f9ba 	bl	80001e4 <strlen>
 8001e70:	4603      	mov	r3, r0
 8001e72:	461a      	mov	r2, r3
 8001e74:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001e78:	4413      	add	r3, r2
 8001e7a:	4ac0      	ldr	r2, [pc, #768]	; (800217c <HAL_UART_RxCpltCallback+0x13e4>)
 8001e7c:	461d      	mov	r5, r3
 8001e7e:	4614      	mov	r4, r2
 8001e80:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e82:	6028      	str	r0, [r5, #0]
 8001e84:	6069      	str	r1, [r5, #4]
 8001e86:	60aa      	str	r2, [r5, #8]
 8001e88:	60eb      	str	r3, [r5, #12]
 8001e8a:	6820      	ldr	r0, [r4, #0]
 8001e8c:	6128      	str	r0, [r5, #16]
 8001e8e:	88a3      	ldrh	r3, [r4, #4]
 8001e90:	82ab      	strh	r3, [r5, #20]
 8001e92:	2301      	movs	r3, #1
 8001e94:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
    			      if (TxData_failuer[4] & 0x04) { strcat(error_message, "C_mos_TEMP_SEN Error; "); error_detected = 1; }
 8001e98:	4bb7      	ldr	r3, [pc, #732]	; (8002178 <HAL_UART_RxCpltCallback+0x13e0>)
 8001e9a:	791b      	ldrb	r3, [r3, #4]
 8001e9c:	f003 0304 	and.w	r3, r3, #4
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d01b      	beq.n	8001edc <HAL_UART_RxCpltCallback+0x1144>
 8001ea4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f7fe f99b 	bl	80001e4 <strlen>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	461a      	mov	r2, r3
 8001eb2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001eb6:	4413      	add	r3, r2
 8001eb8:	4ab1      	ldr	r2, [pc, #708]	; (8002180 <HAL_UART_RxCpltCallback+0x13e8>)
 8001eba:	461c      	mov	r4, r3
 8001ebc:	4615      	mov	r5, r2
 8001ebe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ec0:	6020      	str	r0, [r4, #0]
 8001ec2:	6061      	str	r1, [r4, #4]
 8001ec4:	60a2      	str	r2, [r4, #8]
 8001ec6:	60e3      	str	r3, [r4, #12]
 8001ec8:	6828      	ldr	r0, [r5, #0]
 8001eca:	6120      	str	r0, [r4, #16]
 8001ecc:	88ab      	ldrh	r3, [r5, #4]
 8001ece:	79aa      	ldrb	r2, [r5, #6]
 8001ed0:	82a3      	strh	r3, [r4, #20]
 8001ed2:	4613      	mov	r3, r2
 8001ed4:	75a3      	strb	r3, [r4, #22]
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
    			      if (TxData_failuer[4] & 0x08) { strcat(error_message, "DC_mos_TEMP_SEN Error; "); error_detected = 1; }
 8001edc:	4ba6      	ldr	r3, [pc, #664]	; (8002178 <HAL_UART_RxCpltCallback+0x13e0>)
 8001ede:	791b      	ldrb	r3, [r3, #4]
 8001ee0:	f003 0308 	and.w	r3, r3, #8
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d017      	beq.n	8001f18 <HAL_UART_RxCpltCallback+0x1180>
 8001ee8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001eec:	4618      	mov	r0, r3
 8001eee:	f7fe f979 	bl	80001e4 <strlen>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	461a      	mov	r2, r3
 8001ef6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001efa:	4413      	add	r3, r2
 8001efc:	4aa1      	ldr	r2, [pc, #644]	; (8002184 <HAL_UART_RxCpltCallback+0x13ec>)
 8001efe:	461d      	mov	r5, r3
 8001f00:	4614      	mov	r4, r2
 8001f02:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f04:	6028      	str	r0, [r5, #0]
 8001f06:	6069      	str	r1, [r5, #4]
 8001f08:	60aa      	str	r2, [r5, #8]
 8001f0a:	60eb      	str	r3, [r5, #12]
 8001f0c:	cc03      	ldmia	r4!, {r0, r1}
 8001f0e:	6128      	str	r0, [r5, #16]
 8001f10:	6169      	str	r1, [r5, #20]
 8001f12:	2301      	movs	r3, #1
 8001f14:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
    			      if (TxData_failuer[4] & 0x10) { strcat(error_message, "C_mos_ADH Error; "); error_detected = 1; }
 8001f18:	4b97      	ldr	r3, [pc, #604]	; (8002178 <HAL_UART_RxCpltCallback+0x13e0>)
 8001f1a:	791b      	ldrb	r3, [r3, #4]
 8001f1c:	f003 0310 	and.w	r3, r3, #16
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d016      	beq.n	8001f52 <HAL_UART_RxCpltCallback+0x11ba>
 8001f24:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f7fe f95b 	bl	80001e4 <strlen>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	461a      	mov	r2, r3
 8001f32:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001f36:	4413      	add	r3, r2
 8001f38:	4a93      	ldr	r2, [pc, #588]	; (8002188 <HAL_UART_RxCpltCallback+0x13f0>)
 8001f3a:	461d      	mov	r5, r3
 8001f3c:	4614      	mov	r4, r2
 8001f3e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f40:	6028      	str	r0, [r5, #0]
 8001f42:	6069      	str	r1, [r5, #4]
 8001f44:	60aa      	str	r2, [r5, #8]
 8001f46:	60eb      	str	r3, [r5, #12]
 8001f48:	8823      	ldrh	r3, [r4, #0]
 8001f4a:	822b      	strh	r3, [r5, #16]
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
    			      if (TxData_failuer[4] & 0x20) { strcat(error_message, "DC_mos_ADH Error; "); error_detected = 1; }
 8001f52:	4b89      	ldr	r3, [pc, #548]	; (8002178 <HAL_UART_RxCpltCallback+0x13e0>)
 8001f54:	791b      	ldrb	r3, [r3, #4]
 8001f56:	f003 0320 	and.w	r3, r3, #32
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d019      	beq.n	8001f92 <HAL_UART_RxCpltCallback+0x11fa>
 8001f5e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001f62:	4618      	mov	r0, r3
 8001f64:	f7fe f93e 	bl	80001e4 <strlen>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	461a      	mov	r2, r3
 8001f6c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001f70:	4413      	add	r3, r2
 8001f72:	4a86      	ldr	r2, [pc, #536]	; (800218c <HAL_UART_RxCpltCallback+0x13f4>)
 8001f74:	461d      	mov	r5, r3
 8001f76:	4614      	mov	r4, r2
 8001f78:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f7a:	6028      	str	r0, [r5, #0]
 8001f7c:	6069      	str	r1, [r5, #4]
 8001f7e:	60aa      	str	r2, [r5, #8]
 8001f80:	60eb      	str	r3, [r5, #12]
 8001f82:	8823      	ldrh	r3, [r4, #0]
 8001f84:	78a2      	ldrb	r2, [r4, #2]
 8001f86:	822b      	strh	r3, [r5, #16]
 8001f88:	4613      	mov	r3, r2
 8001f8a:	74ab      	strb	r3, [r5, #18]
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
    			      if (TxData_failuer[4] & 0x40) { strcat(error_message, "C_mos_OP_C Error; "); error_detected = 1; }
 8001f92:	4b79      	ldr	r3, [pc, #484]	; (8002178 <HAL_UART_RxCpltCallback+0x13e0>)
 8001f94:	791b      	ldrb	r3, [r3, #4]
 8001f96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d019      	beq.n	8001fd2 <HAL_UART_RxCpltCallback+0x123a>
 8001f9e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f7fe f91e 	bl	80001e4 <strlen>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	461a      	mov	r2, r3
 8001fac:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001fb0:	4413      	add	r3, r2
 8001fb2:	4a77      	ldr	r2, [pc, #476]	; (8002190 <HAL_UART_RxCpltCallback+0x13f8>)
 8001fb4:	461d      	mov	r5, r3
 8001fb6:	4614      	mov	r4, r2
 8001fb8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fba:	6028      	str	r0, [r5, #0]
 8001fbc:	6069      	str	r1, [r5, #4]
 8001fbe:	60aa      	str	r2, [r5, #8]
 8001fc0:	60eb      	str	r3, [r5, #12]
 8001fc2:	8823      	ldrh	r3, [r4, #0]
 8001fc4:	78a2      	ldrb	r2, [r4, #2]
 8001fc6:	822b      	strh	r3, [r5, #16]
 8001fc8:	4613      	mov	r3, r2
 8001fca:	74ab      	strb	r3, [r5, #18]
 8001fcc:	2301      	movs	r3, #1
 8001fce:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
    			      if (TxData_failuer[4] & 0x80) { strcat(error_message, "DC_mos_OP_C Error; "); error_detected = 1; }
 8001fd2:	4b69      	ldr	r3, [pc, #420]	; (8002178 <HAL_UART_RxCpltCallback+0x13e0>)
 8001fd4:	791b      	ldrb	r3, [r3, #4]
 8001fd6:	b25b      	sxtb	r3, r3
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	da16      	bge.n	800200a <HAL_UART_RxCpltCallback+0x1272>
 8001fdc:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f7fe f8ff 	bl	80001e4 <strlen>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	461a      	mov	r2, r3
 8001fea:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001fee:	4413      	add	r3, r2
 8001ff0:	4a68      	ldr	r2, [pc, #416]	; (8002194 <HAL_UART_RxCpltCallback+0x13fc>)
 8001ff2:	461d      	mov	r5, r3
 8001ff4:	4614      	mov	r4, r2
 8001ff6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ff8:	6028      	str	r0, [r5, #0]
 8001ffa:	6069      	str	r1, [r5, #4]
 8001ffc:	60aa      	str	r2, [r5, #8]
 8001ffe:	60eb      	str	r3, [r5, #12]
 8002000:	6820      	ldr	r0, [r4, #0]
 8002002:	6128      	str	r0, [r5, #16]
 8002004:	2301      	movs	r3, #1
 8002006:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260

    			      // Byte 5
    			      if (TxData_failuer[5] & 0x01) { strcat(error_message, "AFE_COLL Error; "); error_detected = 1; }
 800200a:	4b5b      	ldr	r3, [pc, #364]	; (8002178 <HAL_UART_RxCpltCallback+0x13e0>)
 800200c:	795b      	ldrb	r3, [r3, #5]
 800200e:	f003 0301 	and.w	r3, r3, #1
 8002012:	2b00      	cmp	r3, #0
 8002014:	d016      	beq.n	8002044 <HAL_UART_RxCpltCallback+0x12ac>
 8002016:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800201a:	4618      	mov	r0, r3
 800201c:	f7fe f8e2 	bl	80001e4 <strlen>
 8002020:	4603      	mov	r3, r0
 8002022:	461a      	mov	r2, r3
 8002024:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002028:	4413      	add	r3, r2
 800202a:	4a5b      	ldr	r2, [pc, #364]	; (8002198 <HAL_UART_RxCpltCallback+0x1400>)
 800202c:	461d      	mov	r5, r3
 800202e:	4614      	mov	r4, r2
 8002030:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002032:	6028      	str	r0, [r5, #0]
 8002034:	6069      	str	r1, [r5, #4]
 8002036:	60aa      	str	r2, [r5, #8]
 8002038:	60eb      	str	r3, [r5, #12]
 800203a:	7823      	ldrb	r3, [r4, #0]
 800203c:	742b      	strb	r3, [r5, #16]
 800203e:	2301      	movs	r3, #1
 8002040:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
    			      if (TxData_failuer[5] & 0x02) { strcat(error_message, "VOLT_COLL Error; "); error_detected = 1; }
 8002044:	4b4c      	ldr	r3, [pc, #304]	; (8002178 <HAL_UART_RxCpltCallback+0x13e0>)
 8002046:	795b      	ldrb	r3, [r3, #5]
 8002048:	f003 0302 	and.w	r3, r3, #2
 800204c:	2b00      	cmp	r3, #0
 800204e:	d016      	beq.n	800207e <HAL_UART_RxCpltCallback+0x12e6>
 8002050:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002054:	4618      	mov	r0, r3
 8002056:	f7fe f8c5 	bl	80001e4 <strlen>
 800205a:	4603      	mov	r3, r0
 800205c:	461a      	mov	r2, r3
 800205e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002062:	4413      	add	r3, r2
 8002064:	4a4d      	ldr	r2, [pc, #308]	; (800219c <HAL_UART_RxCpltCallback+0x1404>)
 8002066:	461d      	mov	r5, r3
 8002068:	4614      	mov	r4, r2
 800206a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800206c:	6028      	str	r0, [r5, #0]
 800206e:	6069      	str	r1, [r5, #4]
 8002070:	60aa      	str	r2, [r5, #8]
 8002072:	60eb      	str	r3, [r5, #12]
 8002074:	8823      	ldrh	r3, [r4, #0]
 8002076:	822b      	strh	r3, [r5, #16]
 8002078:	2301      	movs	r3, #1
 800207a:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
    			      if (TxData_failuer[5] & 0x04) { strcat(error_message, "CELL_TEMP_SEN Error; "); error_detected = 1; }
 800207e:	4b3e      	ldr	r3, [pc, #248]	; (8002178 <HAL_UART_RxCpltCallback+0x13e0>)
 8002080:	795b      	ldrb	r3, [r3, #5]
 8002082:	f003 0304 	and.w	r3, r3, #4
 8002086:	2b00      	cmp	r3, #0
 8002088:	d018      	beq.n	80020bc <HAL_UART_RxCpltCallback+0x1324>
 800208a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800208e:	4618      	mov	r0, r3
 8002090:	f7fe f8a8 	bl	80001e4 <strlen>
 8002094:	4603      	mov	r3, r0
 8002096:	461a      	mov	r2, r3
 8002098:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800209c:	4413      	add	r3, r2
 800209e:	4a40      	ldr	r2, [pc, #256]	; (80021a0 <HAL_UART_RxCpltCallback+0x1408>)
 80020a0:	461d      	mov	r5, r3
 80020a2:	4614      	mov	r4, r2
 80020a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020a6:	6028      	str	r0, [r5, #0]
 80020a8:	6069      	str	r1, [r5, #4]
 80020aa:	60aa      	str	r2, [r5, #8]
 80020ac:	60eb      	str	r3, [r5, #12]
 80020ae:	6820      	ldr	r0, [r4, #0]
 80020b0:	6128      	str	r0, [r5, #16]
 80020b2:	88a3      	ldrh	r3, [r4, #4]
 80020b4:	82ab      	strh	r3, [r5, #20]
 80020b6:	2301      	movs	r3, #1
 80020b8:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
    			      if (TxData_failuer[5] & 0x08) { strcat(error_message, "EEPROM Error; "); error_detected = 1; }
 80020bc:	4b2e      	ldr	r3, [pc, #184]	; (8002178 <HAL_UART_RxCpltCallback+0x13e0>)
 80020be:	795b      	ldrb	r3, [r3, #5]
 80020c0:	f003 0308 	and.w	r3, r3, #8
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d017      	beq.n	80020f8 <HAL_UART_RxCpltCallback+0x1360>
 80020c8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80020cc:	4618      	mov	r0, r3
 80020ce:	f7fe f889 	bl	80001e4 <strlen>
 80020d2:	4603      	mov	r3, r0
 80020d4:	461a      	mov	r2, r3
 80020d6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80020da:	4413      	add	r3, r2
 80020dc:	4a31      	ldr	r2, [pc, #196]	; (80021a4 <HAL_UART_RxCpltCallback+0x140c>)
 80020de:	461c      	mov	r4, r3
 80020e0:	4613      	mov	r3, r2
 80020e2:	cb07      	ldmia	r3!, {r0, r1, r2}
 80020e4:	6020      	str	r0, [r4, #0]
 80020e6:	6061      	str	r1, [r4, #4]
 80020e8:	60a2      	str	r2, [r4, #8]
 80020ea:	881a      	ldrh	r2, [r3, #0]
 80020ec:	789b      	ldrb	r3, [r3, #2]
 80020ee:	81a2      	strh	r2, [r4, #12]
 80020f0:	73a3      	strb	r3, [r4, #14]
 80020f2:	2301      	movs	r3, #1
 80020f4:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
    			      if (TxData_failuer[5] & 0x10) { strcat(error_message, "RTC Error; "); error_detected = 1; }
 80020f8:	4b1f      	ldr	r3, [pc, #124]	; (8002178 <HAL_UART_RxCpltCallback+0x13e0>)
 80020fa:	795b      	ldrb	r3, [r3, #5]
 80020fc:	f003 0310 	and.w	r3, r3, #16
 8002100:	2b00      	cmp	r3, #0
 8002102:	d013      	beq.n	800212c <HAL_UART_RxCpltCallback+0x1394>
 8002104:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002108:	4618      	mov	r0, r3
 800210a:	f7fe f86b 	bl	80001e4 <strlen>
 800210e:	4603      	mov	r3, r0
 8002110:	461a      	mov	r2, r3
 8002112:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002116:	4413      	add	r3, r2
 8002118:	4a23      	ldr	r2, [pc, #140]	; (80021a8 <HAL_UART_RxCpltCallback+0x1410>)
 800211a:	461c      	mov	r4, r3
 800211c:	4613      	mov	r3, r2
 800211e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002120:	6020      	str	r0, [r4, #0]
 8002122:	6061      	str	r1, [r4, #4]
 8002124:	60a2      	str	r2, [r4, #8]
 8002126:	2301      	movs	r3, #1
 8002128:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
    			      if (TxData_failuer[5] & 0x20) { strcat(error_message, "PRECH Error; "); error_detected = 1; }
 800212c:	4b12      	ldr	r3, [pc, #72]	; (8002178 <HAL_UART_RxCpltCallback+0x13e0>)
 800212e:	795b      	ldrb	r3, [r3, #5]
 8002130:	f003 0320 	and.w	r3, r3, #32
 8002134:	2b00      	cmp	r3, #0
 8002136:	d015      	beq.n	8002164 <HAL_UART_RxCpltCallback+0x13cc>
 8002138:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800213c:	4618      	mov	r0, r3
 800213e:	f7fe f851 	bl	80001e4 <strlen>
 8002142:	4603      	mov	r3, r0
 8002144:	461a      	mov	r2, r3
 8002146:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800214a:	4413      	add	r3, r2
 800214c:	4a17      	ldr	r2, [pc, #92]	; (80021ac <HAL_UART_RxCpltCallback+0x1414>)
 800214e:	461c      	mov	r4, r3
 8002150:	4613      	mov	r3, r2
 8002152:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002154:	6020      	str	r0, [r4, #0]
 8002156:	6061      	str	r1, [r4, #4]
 8002158:	60a2      	str	r2, [r4, #8]
 800215a:	881b      	ldrh	r3, [r3, #0]
 800215c:	81a3      	strh	r3, [r4, #12]
 800215e:	2301      	movs	r3, #1
 8002160:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
    			      if (TxData_failuer[5] & 0x40) { strcat(error_message, "COMM Error; "); error_detected = 1; }
 8002164:	4b04      	ldr	r3, [pc, #16]	; (8002178 <HAL_UART_RxCpltCallback+0x13e0>)
 8002166:	795b      	ldrb	r3, [r3, #5]
 8002168:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800216c:	2b00      	cmp	r3, #0
 800216e:	d035      	beq.n	80021dc <HAL_UART_RxCpltCallback+0x1444>
 8002170:	e01e      	b.n	80021b0 <HAL_UART_RxCpltCallback+0x1418>
 8002172:	bf00      	nop
 8002174:	08005dd4 	.word	0x08005dd4
 8002178:	200000c8 	.word	0x200000c8
 800217c:	08005dec 	.word	0x08005dec
 8002180:	08005e04 	.word	0x08005e04
 8002184:	08005e1c 	.word	0x08005e1c
 8002188:	08005e34 	.word	0x08005e34
 800218c:	08005e48 	.word	0x08005e48
 8002190:	08005e5c 	.word	0x08005e5c
 8002194:	08005e70 	.word	0x08005e70
 8002198:	08005e84 	.word	0x08005e84
 800219c:	08005e98 	.word	0x08005e98
 80021a0:	08005eac 	.word	0x08005eac
 80021a4:	08005ec4 	.word	0x08005ec4
 80021a8:	08005ed4 	.word	0x08005ed4
 80021ac:	08005ee0 	.word	0x08005ee0
 80021b0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80021b4:	4618      	mov	r0, r3
 80021b6:	f7fe f815 	bl	80001e4 <strlen>
 80021ba:	4603      	mov	r3, r0
 80021bc:	461a      	mov	r2, r3
 80021be:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80021c2:	4413      	add	r3, r2
 80021c4:	4a63      	ldr	r2, [pc, #396]	; (8002354 <HAL_UART_RxCpltCallback+0x15bc>)
 80021c6:	461c      	mov	r4, r3
 80021c8:	4613      	mov	r3, r2
 80021ca:	cb07      	ldmia	r3!, {r0, r1, r2}
 80021cc:	6020      	str	r0, [r4, #0]
 80021ce:	6061      	str	r1, [r4, #4]
 80021d0:	60a2      	str	r2, [r4, #8]
 80021d2:	781b      	ldrb	r3, [r3, #0]
 80021d4:	7323      	strb	r3, [r4, #12]
 80021d6:	2301      	movs	r3, #1
 80021d8:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
    			      if (TxData_failuer[5] & 0x80) { strcat(error_message, "INTER_COMM Error; "); error_detected = 1; }
 80021dc:	4b5e      	ldr	r3, [pc, #376]	; (8002358 <HAL_UART_RxCpltCallback+0x15c0>)
 80021de:	795b      	ldrb	r3, [r3, #5]
 80021e0:	b25b      	sxtb	r3, r3
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	da19      	bge.n	800221a <HAL_UART_RxCpltCallback+0x1482>
 80021e6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80021ea:	4618      	mov	r0, r3
 80021ec:	f7fd fffa 	bl	80001e4 <strlen>
 80021f0:	4603      	mov	r3, r0
 80021f2:	461a      	mov	r2, r3
 80021f4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80021f8:	4413      	add	r3, r2
 80021fa:	4a58      	ldr	r2, [pc, #352]	; (800235c <HAL_UART_RxCpltCallback+0x15c4>)
 80021fc:	461d      	mov	r5, r3
 80021fe:	4614      	mov	r4, r2
 8002200:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002202:	6028      	str	r0, [r5, #0]
 8002204:	6069      	str	r1, [r5, #4]
 8002206:	60aa      	str	r2, [r5, #8]
 8002208:	60eb      	str	r3, [r5, #12]
 800220a:	8823      	ldrh	r3, [r4, #0]
 800220c:	78a2      	ldrb	r2, [r4, #2]
 800220e:	822b      	strh	r3, [r5, #16]
 8002210:	4613      	mov	r3, r2
 8002212:	74ab      	strb	r3, [r5, #18]
 8002214:	2301      	movs	r3, #1
 8002216:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260

    			      // Byte 6
    			      if (TxData_failuer[6] & 0x01) { strcat(error_message, "CU_MOD Error; "); error_detected = 1; }
 800221a:	4b4f      	ldr	r3, [pc, #316]	; (8002358 <HAL_UART_RxCpltCallback+0x15c0>)
 800221c:	799b      	ldrb	r3, [r3, #6]
 800221e:	f003 0301 	and.w	r3, r3, #1
 8002222:	2b00      	cmp	r3, #0
 8002224:	d017      	beq.n	8002256 <HAL_UART_RxCpltCallback+0x14be>
 8002226:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800222a:	4618      	mov	r0, r3
 800222c:	f7fd ffda 	bl	80001e4 <strlen>
 8002230:	4603      	mov	r3, r0
 8002232:	461a      	mov	r2, r3
 8002234:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002238:	4413      	add	r3, r2
 800223a:	4a49      	ldr	r2, [pc, #292]	; (8002360 <HAL_UART_RxCpltCallback+0x15c8>)
 800223c:	461c      	mov	r4, r3
 800223e:	4613      	mov	r3, r2
 8002240:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002242:	6020      	str	r0, [r4, #0]
 8002244:	6061      	str	r1, [r4, #4]
 8002246:	60a2      	str	r2, [r4, #8]
 8002248:	881a      	ldrh	r2, [r3, #0]
 800224a:	789b      	ldrb	r3, [r3, #2]
 800224c:	81a2      	strh	r2, [r4, #12]
 800224e:	73a3      	strb	r3, [r4, #14]
 8002250:	2301      	movs	r3, #1
 8002252:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
    			      if (TxData_failuer[6] & 0x02) { strcat(error_message, "SUL_VOLT_DET Error; "); error_detected = 1; }
 8002256:	4b40      	ldr	r3, [pc, #256]	; (8002358 <HAL_UART_RxCpltCallback+0x15c0>)
 8002258:	799b      	ldrb	r3, [r3, #6]
 800225a:	f003 0302 	and.w	r3, r3, #2
 800225e:	2b00      	cmp	r3, #0
 8002260:	d018      	beq.n	8002294 <HAL_UART_RxCpltCallback+0x14fc>
 8002262:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002266:	4618      	mov	r0, r3
 8002268:	f7fd ffbc 	bl	80001e4 <strlen>
 800226c:	4603      	mov	r3, r0
 800226e:	461a      	mov	r2, r3
 8002270:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002274:	4413      	add	r3, r2
 8002276:	4a3b      	ldr	r2, [pc, #236]	; (8002364 <HAL_UART_RxCpltCallback+0x15cc>)
 8002278:	461d      	mov	r5, r3
 800227a:	4614      	mov	r4, r2
 800227c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800227e:	6028      	str	r0, [r5, #0]
 8002280:	6069      	str	r1, [r5, #4]
 8002282:	60aa      	str	r2, [r5, #8]
 8002284:	60eb      	str	r3, [r5, #12]
 8002286:	6820      	ldr	r0, [r4, #0]
 8002288:	6128      	str	r0, [r5, #16]
 800228a:	7923      	ldrb	r3, [r4, #4]
 800228c:	752b      	strb	r3, [r5, #20]
 800228e:	2301      	movs	r3, #1
 8002290:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
    			      if (TxData_failuer[6] & 0x04) { strcat(error_message, "SHORT_CIR Error; "); error_detected = 1; }
 8002294:	4b30      	ldr	r3, [pc, #192]	; (8002358 <HAL_UART_RxCpltCallback+0x15c0>)
 8002296:	799b      	ldrb	r3, [r3, #6]
 8002298:	f003 0304 	and.w	r3, r3, #4
 800229c:	2b00      	cmp	r3, #0
 800229e:	d016      	beq.n	80022ce <HAL_UART_RxCpltCallback+0x1536>
 80022a0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80022a4:	4618      	mov	r0, r3
 80022a6:	f7fd ff9d 	bl	80001e4 <strlen>
 80022aa:	4603      	mov	r3, r0
 80022ac:	461a      	mov	r2, r3
 80022ae:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80022b2:	4413      	add	r3, r2
 80022b4:	4a2c      	ldr	r2, [pc, #176]	; (8002368 <HAL_UART_RxCpltCallback+0x15d0>)
 80022b6:	461d      	mov	r5, r3
 80022b8:	4614      	mov	r4, r2
 80022ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022bc:	6028      	str	r0, [r5, #0]
 80022be:	6069      	str	r1, [r5, #4]
 80022c0:	60aa      	str	r2, [r5, #8]
 80022c2:	60eb      	str	r3, [r5, #12]
 80022c4:	8823      	ldrh	r3, [r4, #0]
 80022c6:	822b      	strh	r3, [r5, #16]
 80022c8:	2301      	movs	r3, #1
 80022ca:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
    			      if (TxData_failuer[6] & 0x08) { strcat(error_message, "LOW_VOLT Error; "); error_detected = 1; }
 80022ce:	4b22      	ldr	r3, [pc, #136]	; (8002358 <HAL_UART_RxCpltCallback+0x15c0>)
 80022d0:	799b      	ldrb	r3, [r3, #6]
 80022d2:	f003 0308 	and.w	r3, r3, #8
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d016      	beq.n	8002308 <HAL_UART_RxCpltCallback+0x1570>
 80022da:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80022de:	4618      	mov	r0, r3
 80022e0:	f7fd ff80 	bl	80001e4 <strlen>
 80022e4:	4603      	mov	r3, r0
 80022e6:	461a      	mov	r2, r3
 80022e8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80022ec:	4413      	add	r3, r2
 80022ee:	4a1f      	ldr	r2, [pc, #124]	; (800236c <HAL_UART_RxCpltCallback+0x15d4>)
 80022f0:	461d      	mov	r5, r3
 80022f2:	4614      	mov	r4, r2
 80022f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022f6:	6028      	str	r0, [r5, #0]
 80022f8:	6069      	str	r1, [r5, #4]
 80022fa:	60aa      	str	r2, [r5, #8]
 80022fc:	60eb      	str	r3, [r5, #12]
 80022fe:	7823      	ldrb	r3, [r4, #0]
 8002300:	742b      	strb	r3, [r5, #16]
 8002302:	2301      	movs	r3, #1
 8002304:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260

    			      // Si une erreur a été détectée, envoyer le message
    			      if (error_detected) {
 8002308:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 800230c:	2b00      	cmp	r3, #0
 800230e:	d00d      	beq.n	800232c <HAL_UART_RxCpltCallback+0x1594>
    			    	  HAL_UART_Transmit(&huart2, (uint8_t*)error_message, strlen(error_message), 100);
 8002310:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002314:	4618      	mov	r0, r3
 8002316:	f7fd ff65 	bl	80001e4 <strlen>
 800231a:	4603      	mov	r3, r0
 800231c:	b29a      	uxth	r2, r3
 800231e:	f107 0174 	add.w	r1, r7, #116	; 0x74
 8002322:	2364      	movs	r3, #100	; 0x64
 8002324:	4812      	ldr	r0, [pc, #72]	; (8002370 <HAL_UART_RxCpltCallback+0x15d8>)
 8002326:	f001 fa52 	bl	80037ce <HAL_UART_Transmit>
 800232a:	e006      	b.n	800233a <HAL_UART_RxCpltCallback+0x15a2>
    			      }
    			      else {
    			    	  HAL_UART_Transmit(&huart2, "No Errors Detected.", 100, HAL_MAX_DELAY);
 800232c:	f04f 33ff 	mov.w	r3, #4294967295
 8002330:	2264      	movs	r2, #100	; 0x64
 8002332:	4910      	ldr	r1, [pc, #64]	; (8002374 <HAL_UART_RxCpltCallback+0x15dc>)
 8002334:	480e      	ldr	r0, [pc, #56]	; (8002370 <HAL_UART_RxCpltCallback+0x15d8>)
 8002336:	f001 fa4a 	bl	80037ce <HAL_UART_Transmit>




    		  }
    		  HAL_UART_Receive(&huart2, RxBuffer, sizeof(RxBuffer),100);
 800233a:	2364      	movs	r3, #100	; 0x64
 800233c:	2232      	movs	r2, #50	; 0x32
 800233e:	490e      	ldr	r1, [pc, #56]	; (8002378 <HAL_UART_RxCpltCallback+0x15e0>)
 8002340:	480b      	ldr	r0, [pc, #44]	; (8002370 <HAL_UART_RxCpltCallback+0x15d8>)
 8002342:	f001 fad6 	bl	80038f2 <HAL_UART_Receive>

    	  }
    }
 8002346:	bf00      	nop
 8002348:	f507 7724 	add.w	r7, r7, #656	; 0x290
 800234c:	46bd      	mov	sp, r7
 800234e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002352:	bf00      	nop
 8002354:	08005ef0 	.word	0x08005ef0
 8002358:	200000c8 	.word	0x200000c8
 800235c:	08005f00 	.word	0x08005f00
 8002360:	08005f14 	.word	0x08005f14
 8002364:	08005f24 	.word	0x08005f24
 8002368:	08005f3c 	.word	0x08005f3c
 800236c:	08005f50 	.word	0x08005f50
 8002370:	20000188 	.word	0x20000188
 8002374:	08005f64 	.word	0x08005f64
 8002378:	20000154 	.word	0x20000154

0800237c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800237c:	b480      	push	{r7}
 800237e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002380:	b672      	cpsid	i
}
 8002382:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002384:	e7fe      	b.n	8002384 <Error_Handler+0x8>
	...

08002388 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b082      	sub	sp, #8
 800238c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800238e:	2300      	movs	r3, #0
 8002390:	607b      	str	r3, [r7, #4]
 8002392:	4b10      	ldr	r3, [pc, #64]	; (80023d4 <HAL_MspInit+0x4c>)
 8002394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002396:	4a0f      	ldr	r2, [pc, #60]	; (80023d4 <HAL_MspInit+0x4c>)
 8002398:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800239c:	6453      	str	r3, [r2, #68]	; 0x44
 800239e:	4b0d      	ldr	r3, [pc, #52]	; (80023d4 <HAL_MspInit+0x4c>)
 80023a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023a6:	607b      	str	r3, [r7, #4]
 80023a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80023aa:	2300      	movs	r3, #0
 80023ac:	603b      	str	r3, [r7, #0]
 80023ae:	4b09      	ldr	r3, [pc, #36]	; (80023d4 <HAL_MspInit+0x4c>)
 80023b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b2:	4a08      	ldr	r2, [pc, #32]	; (80023d4 <HAL_MspInit+0x4c>)
 80023b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023b8:	6413      	str	r3, [r2, #64]	; 0x40
 80023ba:	4b06      	ldr	r3, [pc, #24]	; (80023d4 <HAL_MspInit+0x4c>)
 80023bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023c2:	603b      	str	r3, [r7, #0]
 80023c4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80023c6:	2007      	movs	r0, #7
 80023c8:	f000 faac 	bl	8002924 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80023cc:	bf00      	nop
 80023ce:	3708      	adds	r7, #8
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd80      	pop	{r7, pc}
 80023d4:	40023800 	.word	0x40023800

080023d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b08a      	sub	sp, #40	; 0x28
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023e0:	f107 0314 	add.w	r3, r7, #20
 80023e4:	2200      	movs	r2, #0
 80023e6:	601a      	str	r2, [r3, #0]
 80023e8:	605a      	str	r2, [r3, #4]
 80023ea:	609a      	str	r2, [r3, #8]
 80023ec:	60da      	str	r2, [r3, #12]
 80023ee:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a1d      	ldr	r2, [pc, #116]	; (800246c <HAL_UART_MspInit+0x94>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d133      	bne.n	8002462 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80023fa:	2300      	movs	r3, #0
 80023fc:	613b      	str	r3, [r7, #16]
 80023fe:	4b1c      	ldr	r3, [pc, #112]	; (8002470 <HAL_UART_MspInit+0x98>)
 8002400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002402:	4a1b      	ldr	r2, [pc, #108]	; (8002470 <HAL_UART_MspInit+0x98>)
 8002404:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002408:	6413      	str	r3, [r2, #64]	; 0x40
 800240a:	4b19      	ldr	r3, [pc, #100]	; (8002470 <HAL_UART_MspInit+0x98>)
 800240c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800240e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002412:	613b      	str	r3, [r7, #16]
 8002414:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002416:	2300      	movs	r3, #0
 8002418:	60fb      	str	r3, [r7, #12]
 800241a:	4b15      	ldr	r3, [pc, #84]	; (8002470 <HAL_UART_MspInit+0x98>)
 800241c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800241e:	4a14      	ldr	r2, [pc, #80]	; (8002470 <HAL_UART_MspInit+0x98>)
 8002420:	f043 0301 	orr.w	r3, r3, #1
 8002424:	6313      	str	r3, [r2, #48]	; 0x30
 8002426:	4b12      	ldr	r3, [pc, #72]	; (8002470 <HAL_UART_MspInit+0x98>)
 8002428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800242a:	f003 0301 	and.w	r3, r3, #1
 800242e:	60fb      	str	r3, [r7, #12]
 8002430:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002432:	230c      	movs	r3, #12
 8002434:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002436:	2302      	movs	r3, #2
 8002438:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800243a:	2300      	movs	r3, #0
 800243c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800243e:	2303      	movs	r3, #3
 8002440:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002442:	2307      	movs	r3, #7
 8002444:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002446:	f107 0314 	add.w	r3, r7, #20
 800244a:	4619      	mov	r1, r3
 800244c:	4809      	ldr	r0, [pc, #36]	; (8002474 <HAL_UART_MspInit+0x9c>)
 800244e:	f000 fb3d 	bl	8002acc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002452:	2200      	movs	r2, #0
 8002454:	2100      	movs	r1, #0
 8002456:	2026      	movs	r0, #38	; 0x26
 8002458:	f000 fa6f 	bl	800293a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800245c:	2026      	movs	r0, #38	; 0x26
 800245e:	f000 fa88 	bl	8002972 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002462:	bf00      	nop
 8002464:	3728      	adds	r7, #40	; 0x28
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}
 800246a:	bf00      	nop
 800246c:	40004400 	.word	0x40004400
 8002470:	40023800 	.word	0x40023800
 8002474:	40020000 	.word	0x40020000

08002478 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002478:	b480      	push	{r7}
 800247a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800247c:	e7fe      	b.n	800247c <NMI_Handler+0x4>

0800247e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800247e:	b480      	push	{r7}
 8002480:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002482:	e7fe      	b.n	8002482 <HardFault_Handler+0x4>

08002484 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002484:	b480      	push	{r7}
 8002486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002488:	e7fe      	b.n	8002488 <MemManage_Handler+0x4>

0800248a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800248a:	b480      	push	{r7}
 800248c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800248e:	e7fe      	b.n	800248e <BusFault_Handler+0x4>

08002490 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002490:	b480      	push	{r7}
 8002492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002494:	e7fe      	b.n	8002494 <UsageFault_Handler+0x4>

08002496 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002496:	b480      	push	{r7}
 8002498:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800249a:	bf00      	nop
 800249c:	46bd      	mov	sp, r7
 800249e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a2:	4770      	bx	lr

080024a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80024a4:	b480      	push	{r7}
 80024a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80024a8:	bf00      	nop
 80024aa:	46bd      	mov	sp, r7
 80024ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b0:	4770      	bx	lr

080024b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80024b2:	b480      	push	{r7}
 80024b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80024b6:	bf00      	nop
 80024b8:	46bd      	mov	sp, r7
 80024ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024be:	4770      	bx	lr

080024c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80024c4:	f000 f93e 	bl	8002744 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80024c8:	bf00      	nop
 80024ca:	bd80      	pop	{r7, pc}

080024cc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80024d0:	4802      	ldr	r0, [pc, #8]	; (80024dc <USART2_IRQHandler+0x10>)
 80024d2:	f001 fab1 	bl	8003a38 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80024d6:	bf00      	nop
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	bf00      	nop
 80024dc:	20000188 	.word	0x20000188

080024e0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b086      	sub	sp, #24
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	60f8      	str	r0, [r7, #12]
 80024e8:	60b9      	str	r1, [r7, #8]
 80024ea:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024ec:	2300      	movs	r3, #0
 80024ee:	617b      	str	r3, [r7, #20]
 80024f0:	e00a      	b.n	8002508 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80024f2:	f3af 8000 	nop.w
 80024f6:	4601      	mov	r1, r0
 80024f8:	68bb      	ldr	r3, [r7, #8]
 80024fa:	1c5a      	adds	r2, r3, #1
 80024fc:	60ba      	str	r2, [r7, #8]
 80024fe:	b2ca      	uxtb	r2, r1
 8002500:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	3301      	adds	r3, #1
 8002506:	617b      	str	r3, [r7, #20]
 8002508:	697a      	ldr	r2, [r7, #20]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	429a      	cmp	r2, r3
 800250e:	dbf0      	blt.n	80024f2 <_read+0x12>
  }

  return len;
 8002510:	687b      	ldr	r3, [r7, #4]
}
 8002512:	4618      	mov	r0, r3
 8002514:	3718      	adds	r7, #24
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}

0800251a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800251a:	b580      	push	{r7, lr}
 800251c:	b086      	sub	sp, #24
 800251e:	af00      	add	r7, sp, #0
 8002520:	60f8      	str	r0, [r7, #12]
 8002522:	60b9      	str	r1, [r7, #8]
 8002524:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002526:	2300      	movs	r3, #0
 8002528:	617b      	str	r3, [r7, #20]
 800252a:	e009      	b.n	8002540 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	1c5a      	adds	r2, r3, #1
 8002530:	60ba      	str	r2, [r7, #8]
 8002532:	781b      	ldrb	r3, [r3, #0]
 8002534:	4618      	mov	r0, r3
 8002536:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	3301      	adds	r3, #1
 800253e:	617b      	str	r3, [r7, #20]
 8002540:	697a      	ldr	r2, [r7, #20]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	429a      	cmp	r2, r3
 8002546:	dbf1      	blt.n	800252c <_write+0x12>
  }
  return len;
 8002548:	687b      	ldr	r3, [r7, #4]
}
 800254a:	4618      	mov	r0, r3
 800254c:	3718      	adds	r7, #24
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}

08002552 <_close>:

int _close(int file)
{
 8002552:	b480      	push	{r7}
 8002554:	b083      	sub	sp, #12
 8002556:	af00      	add	r7, sp, #0
 8002558:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800255a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800255e:	4618      	mov	r0, r3
 8002560:	370c      	adds	r7, #12
 8002562:	46bd      	mov	sp, r7
 8002564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002568:	4770      	bx	lr

0800256a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800256a:	b480      	push	{r7}
 800256c:	b083      	sub	sp, #12
 800256e:	af00      	add	r7, sp, #0
 8002570:	6078      	str	r0, [r7, #4]
 8002572:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800257a:	605a      	str	r2, [r3, #4]
  return 0;
 800257c:	2300      	movs	r3, #0
}
 800257e:	4618      	mov	r0, r3
 8002580:	370c      	adds	r7, #12
 8002582:	46bd      	mov	sp, r7
 8002584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002588:	4770      	bx	lr

0800258a <_isatty>:

int _isatty(int file)
{
 800258a:	b480      	push	{r7}
 800258c:	b083      	sub	sp, #12
 800258e:	af00      	add	r7, sp, #0
 8002590:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002592:	2301      	movs	r3, #1
}
 8002594:	4618      	mov	r0, r3
 8002596:	370c      	adds	r7, #12
 8002598:	46bd      	mov	sp, r7
 800259a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259e:	4770      	bx	lr

080025a0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b085      	sub	sp, #20
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	60f8      	str	r0, [r7, #12]
 80025a8:	60b9      	str	r1, [r7, #8]
 80025aa:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80025ac:	2300      	movs	r3, #0
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	3714      	adds	r7, #20
 80025b2:	46bd      	mov	sp, r7
 80025b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b8:	4770      	bx	lr
	...

080025bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b086      	sub	sp, #24
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80025c4:	4a14      	ldr	r2, [pc, #80]	; (8002618 <_sbrk+0x5c>)
 80025c6:	4b15      	ldr	r3, [pc, #84]	; (800261c <_sbrk+0x60>)
 80025c8:	1ad3      	subs	r3, r2, r3
 80025ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80025d0:	4b13      	ldr	r3, [pc, #76]	; (8002620 <_sbrk+0x64>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d102      	bne.n	80025de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80025d8:	4b11      	ldr	r3, [pc, #68]	; (8002620 <_sbrk+0x64>)
 80025da:	4a12      	ldr	r2, [pc, #72]	; (8002624 <_sbrk+0x68>)
 80025dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80025de:	4b10      	ldr	r3, [pc, #64]	; (8002620 <_sbrk+0x64>)
 80025e0:	681a      	ldr	r2, [r3, #0]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	4413      	add	r3, r2
 80025e6:	693a      	ldr	r2, [r7, #16]
 80025e8:	429a      	cmp	r2, r3
 80025ea:	d207      	bcs.n	80025fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80025ec:	f002 fbb2 	bl	8004d54 <__errno>
 80025f0:	4603      	mov	r3, r0
 80025f2:	220c      	movs	r2, #12
 80025f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80025f6:	f04f 33ff 	mov.w	r3, #4294967295
 80025fa:	e009      	b.n	8002610 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80025fc:	4b08      	ldr	r3, [pc, #32]	; (8002620 <_sbrk+0x64>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002602:	4b07      	ldr	r3, [pc, #28]	; (8002620 <_sbrk+0x64>)
 8002604:	681a      	ldr	r2, [r3, #0]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	4413      	add	r3, r2
 800260a:	4a05      	ldr	r2, [pc, #20]	; (8002620 <_sbrk+0x64>)
 800260c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800260e:	68fb      	ldr	r3, [r7, #12]
}
 8002610:	4618      	mov	r0, r3
 8002612:	3718      	adds	r7, #24
 8002614:	46bd      	mov	sp, r7
 8002616:	bd80      	pop	{r7, pc}
 8002618:	20020000 	.word	0x20020000
 800261c:	00000400 	.word	0x00000400
 8002620:	200001cc 	.word	0x200001cc
 8002624:	20000320 	.word	0x20000320

08002628 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002628:	b480      	push	{r7}
 800262a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800262c:	4b06      	ldr	r3, [pc, #24]	; (8002648 <SystemInit+0x20>)
 800262e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002632:	4a05      	ldr	r2, [pc, #20]	; (8002648 <SystemInit+0x20>)
 8002634:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002638:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800263c:	bf00      	nop
 800263e:	46bd      	mov	sp, r7
 8002640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002644:	4770      	bx	lr
 8002646:	bf00      	nop
 8002648:	e000ed00 	.word	0xe000ed00

0800264c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800264c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002684 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002650:	480d      	ldr	r0, [pc, #52]	; (8002688 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002652:	490e      	ldr	r1, [pc, #56]	; (800268c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002654:	4a0e      	ldr	r2, [pc, #56]	; (8002690 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002656:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002658:	e002      	b.n	8002660 <LoopCopyDataInit>

0800265a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800265a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800265c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800265e:	3304      	adds	r3, #4

08002660 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002660:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002662:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002664:	d3f9      	bcc.n	800265a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002666:	4a0b      	ldr	r2, [pc, #44]	; (8002694 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002668:	4c0b      	ldr	r4, [pc, #44]	; (8002698 <LoopFillZerobss+0x26>)
  movs r3, #0
 800266a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800266c:	e001      	b.n	8002672 <LoopFillZerobss>

0800266e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800266e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002670:	3204      	adds	r2, #4

08002672 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002672:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002674:	d3fb      	bcc.n	800266e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002676:	f7ff ffd7 	bl	8002628 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800267a:	f002 fb71 	bl	8004d60 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800267e:	f7fe fac3 	bl	8000c08 <main>
  bx  lr    
 8002682:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002684:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002688:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800268c:	20000138 	.word	0x20000138
  ldr r2, =_sidata
 8002690:	08005fd4 	.word	0x08005fd4
  ldr r2, =_sbss
 8002694:	20000138 	.word	0x20000138
  ldr r4, =_ebss
 8002698:	20000320 	.word	0x20000320

0800269c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800269c:	e7fe      	b.n	800269c <ADC_IRQHandler>
	...

080026a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80026a4:	4b0e      	ldr	r3, [pc, #56]	; (80026e0 <HAL_Init+0x40>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a0d      	ldr	r2, [pc, #52]	; (80026e0 <HAL_Init+0x40>)
 80026aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80026ae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80026b0:	4b0b      	ldr	r3, [pc, #44]	; (80026e0 <HAL_Init+0x40>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a0a      	ldr	r2, [pc, #40]	; (80026e0 <HAL_Init+0x40>)
 80026b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80026ba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80026bc:	4b08      	ldr	r3, [pc, #32]	; (80026e0 <HAL_Init+0x40>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a07      	ldr	r2, [pc, #28]	; (80026e0 <HAL_Init+0x40>)
 80026c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026c6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026c8:	2003      	movs	r0, #3
 80026ca:	f000 f92b 	bl	8002924 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80026ce:	2000      	movs	r0, #0
 80026d0:	f000 f808 	bl	80026e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80026d4:	f7ff fe58 	bl	8002388 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80026d8:	2300      	movs	r3, #0
}
 80026da:	4618      	mov	r0, r3
 80026dc:	bd80      	pop	{r7, pc}
 80026de:	bf00      	nop
 80026e0:	40023c00 	.word	0x40023c00

080026e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b082      	sub	sp, #8
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80026ec:	4b12      	ldr	r3, [pc, #72]	; (8002738 <HAL_InitTick+0x54>)
 80026ee:	681a      	ldr	r2, [r3, #0]
 80026f0:	4b12      	ldr	r3, [pc, #72]	; (800273c <HAL_InitTick+0x58>)
 80026f2:	781b      	ldrb	r3, [r3, #0]
 80026f4:	4619      	mov	r1, r3
 80026f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80026fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002702:	4618      	mov	r0, r3
 8002704:	f000 f943 	bl	800298e <HAL_SYSTICK_Config>
 8002708:	4603      	mov	r3, r0
 800270a:	2b00      	cmp	r3, #0
 800270c:	d001      	beq.n	8002712 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800270e:	2301      	movs	r3, #1
 8002710:	e00e      	b.n	8002730 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2b0f      	cmp	r3, #15
 8002716:	d80a      	bhi.n	800272e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002718:	2200      	movs	r2, #0
 800271a:	6879      	ldr	r1, [r7, #4]
 800271c:	f04f 30ff 	mov.w	r0, #4294967295
 8002720:	f000 f90b 	bl	800293a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002724:	4a06      	ldr	r2, [pc, #24]	; (8002740 <HAL_InitTick+0x5c>)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800272a:	2300      	movs	r3, #0
 800272c:	e000      	b.n	8002730 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800272e:	2301      	movs	r3, #1
}
 8002730:	4618      	mov	r0, r3
 8002732:	3708      	adds	r7, #8
 8002734:	46bd      	mov	sp, r7
 8002736:	bd80      	pop	{r7, pc}
 8002738:	200000d0 	.word	0x200000d0
 800273c:	200000d8 	.word	0x200000d8
 8002740:	200000d4 	.word	0x200000d4

08002744 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002744:	b480      	push	{r7}
 8002746:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002748:	4b06      	ldr	r3, [pc, #24]	; (8002764 <HAL_IncTick+0x20>)
 800274a:	781b      	ldrb	r3, [r3, #0]
 800274c:	461a      	mov	r2, r3
 800274e:	4b06      	ldr	r3, [pc, #24]	; (8002768 <HAL_IncTick+0x24>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4413      	add	r3, r2
 8002754:	4a04      	ldr	r2, [pc, #16]	; (8002768 <HAL_IncTick+0x24>)
 8002756:	6013      	str	r3, [r2, #0]
}
 8002758:	bf00      	nop
 800275a:	46bd      	mov	sp, r7
 800275c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002760:	4770      	bx	lr
 8002762:	bf00      	nop
 8002764:	200000d8 	.word	0x200000d8
 8002768:	200001d0 	.word	0x200001d0

0800276c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800276c:	b480      	push	{r7}
 800276e:	af00      	add	r7, sp, #0
  return uwTick;
 8002770:	4b03      	ldr	r3, [pc, #12]	; (8002780 <HAL_GetTick+0x14>)
 8002772:	681b      	ldr	r3, [r3, #0]
}
 8002774:	4618      	mov	r0, r3
 8002776:	46bd      	mov	sp, r7
 8002778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277c:	4770      	bx	lr
 800277e:	bf00      	nop
 8002780:	200001d0 	.word	0x200001d0

08002784 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002784:	b480      	push	{r7}
 8002786:	b085      	sub	sp, #20
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	f003 0307 	and.w	r3, r3, #7
 8002792:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002794:	4b0c      	ldr	r3, [pc, #48]	; (80027c8 <__NVIC_SetPriorityGrouping+0x44>)
 8002796:	68db      	ldr	r3, [r3, #12]
 8002798:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800279a:	68ba      	ldr	r2, [r7, #8]
 800279c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80027a0:	4013      	ands	r3, r2
 80027a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80027ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80027b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027b6:	4a04      	ldr	r2, [pc, #16]	; (80027c8 <__NVIC_SetPriorityGrouping+0x44>)
 80027b8:	68bb      	ldr	r3, [r7, #8]
 80027ba:	60d3      	str	r3, [r2, #12]
}
 80027bc:	bf00      	nop
 80027be:	3714      	adds	r7, #20
 80027c0:	46bd      	mov	sp, r7
 80027c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c6:	4770      	bx	lr
 80027c8:	e000ed00 	.word	0xe000ed00

080027cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80027cc:	b480      	push	{r7}
 80027ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027d0:	4b04      	ldr	r3, [pc, #16]	; (80027e4 <__NVIC_GetPriorityGrouping+0x18>)
 80027d2:	68db      	ldr	r3, [r3, #12]
 80027d4:	0a1b      	lsrs	r3, r3, #8
 80027d6:	f003 0307 	and.w	r3, r3, #7
}
 80027da:	4618      	mov	r0, r3
 80027dc:	46bd      	mov	sp, r7
 80027de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e2:	4770      	bx	lr
 80027e4:	e000ed00 	.word	0xe000ed00

080027e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027e8:	b480      	push	{r7}
 80027ea:	b083      	sub	sp, #12
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	4603      	mov	r3, r0
 80027f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	db0b      	blt.n	8002812 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027fa:	79fb      	ldrb	r3, [r7, #7]
 80027fc:	f003 021f 	and.w	r2, r3, #31
 8002800:	4907      	ldr	r1, [pc, #28]	; (8002820 <__NVIC_EnableIRQ+0x38>)
 8002802:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002806:	095b      	lsrs	r3, r3, #5
 8002808:	2001      	movs	r0, #1
 800280a:	fa00 f202 	lsl.w	r2, r0, r2
 800280e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002812:	bf00      	nop
 8002814:	370c      	adds	r7, #12
 8002816:	46bd      	mov	sp, r7
 8002818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281c:	4770      	bx	lr
 800281e:	bf00      	nop
 8002820:	e000e100 	.word	0xe000e100

08002824 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002824:	b480      	push	{r7}
 8002826:	b083      	sub	sp, #12
 8002828:	af00      	add	r7, sp, #0
 800282a:	4603      	mov	r3, r0
 800282c:	6039      	str	r1, [r7, #0]
 800282e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002830:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002834:	2b00      	cmp	r3, #0
 8002836:	db0a      	blt.n	800284e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	b2da      	uxtb	r2, r3
 800283c:	490c      	ldr	r1, [pc, #48]	; (8002870 <__NVIC_SetPriority+0x4c>)
 800283e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002842:	0112      	lsls	r2, r2, #4
 8002844:	b2d2      	uxtb	r2, r2
 8002846:	440b      	add	r3, r1
 8002848:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800284c:	e00a      	b.n	8002864 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	b2da      	uxtb	r2, r3
 8002852:	4908      	ldr	r1, [pc, #32]	; (8002874 <__NVIC_SetPriority+0x50>)
 8002854:	79fb      	ldrb	r3, [r7, #7]
 8002856:	f003 030f 	and.w	r3, r3, #15
 800285a:	3b04      	subs	r3, #4
 800285c:	0112      	lsls	r2, r2, #4
 800285e:	b2d2      	uxtb	r2, r2
 8002860:	440b      	add	r3, r1
 8002862:	761a      	strb	r2, [r3, #24]
}
 8002864:	bf00      	nop
 8002866:	370c      	adds	r7, #12
 8002868:	46bd      	mov	sp, r7
 800286a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286e:	4770      	bx	lr
 8002870:	e000e100 	.word	0xe000e100
 8002874:	e000ed00 	.word	0xe000ed00

08002878 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002878:	b480      	push	{r7}
 800287a:	b089      	sub	sp, #36	; 0x24
 800287c:	af00      	add	r7, sp, #0
 800287e:	60f8      	str	r0, [r7, #12]
 8002880:	60b9      	str	r1, [r7, #8]
 8002882:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	f003 0307 	and.w	r3, r3, #7
 800288a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800288c:	69fb      	ldr	r3, [r7, #28]
 800288e:	f1c3 0307 	rsb	r3, r3, #7
 8002892:	2b04      	cmp	r3, #4
 8002894:	bf28      	it	cs
 8002896:	2304      	movcs	r3, #4
 8002898:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800289a:	69fb      	ldr	r3, [r7, #28]
 800289c:	3304      	adds	r3, #4
 800289e:	2b06      	cmp	r3, #6
 80028a0:	d902      	bls.n	80028a8 <NVIC_EncodePriority+0x30>
 80028a2:	69fb      	ldr	r3, [r7, #28]
 80028a4:	3b03      	subs	r3, #3
 80028a6:	e000      	b.n	80028aa <NVIC_EncodePriority+0x32>
 80028a8:	2300      	movs	r3, #0
 80028aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028ac:	f04f 32ff 	mov.w	r2, #4294967295
 80028b0:	69bb      	ldr	r3, [r7, #24]
 80028b2:	fa02 f303 	lsl.w	r3, r2, r3
 80028b6:	43da      	mvns	r2, r3
 80028b8:	68bb      	ldr	r3, [r7, #8]
 80028ba:	401a      	ands	r2, r3
 80028bc:	697b      	ldr	r3, [r7, #20]
 80028be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028c0:	f04f 31ff 	mov.w	r1, #4294967295
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	fa01 f303 	lsl.w	r3, r1, r3
 80028ca:	43d9      	mvns	r1, r3
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028d0:	4313      	orrs	r3, r2
         );
}
 80028d2:	4618      	mov	r0, r3
 80028d4:	3724      	adds	r7, #36	; 0x24
 80028d6:	46bd      	mov	sp, r7
 80028d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028dc:	4770      	bx	lr
	...

080028e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b082      	sub	sp, #8
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	3b01      	subs	r3, #1
 80028ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80028f0:	d301      	bcc.n	80028f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80028f2:	2301      	movs	r3, #1
 80028f4:	e00f      	b.n	8002916 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80028f6:	4a0a      	ldr	r2, [pc, #40]	; (8002920 <SysTick_Config+0x40>)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	3b01      	subs	r3, #1
 80028fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80028fe:	210f      	movs	r1, #15
 8002900:	f04f 30ff 	mov.w	r0, #4294967295
 8002904:	f7ff ff8e 	bl	8002824 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002908:	4b05      	ldr	r3, [pc, #20]	; (8002920 <SysTick_Config+0x40>)
 800290a:	2200      	movs	r2, #0
 800290c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800290e:	4b04      	ldr	r3, [pc, #16]	; (8002920 <SysTick_Config+0x40>)
 8002910:	2207      	movs	r2, #7
 8002912:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002914:	2300      	movs	r3, #0
}
 8002916:	4618      	mov	r0, r3
 8002918:	3708      	adds	r7, #8
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}
 800291e:	bf00      	nop
 8002920:	e000e010 	.word	0xe000e010

08002924 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b082      	sub	sp, #8
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800292c:	6878      	ldr	r0, [r7, #4]
 800292e:	f7ff ff29 	bl	8002784 <__NVIC_SetPriorityGrouping>
}
 8002932:	bf00      	nop
 8002934:	3708      	adds	r7, #8
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}

0800293a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800293a:	b580      	push	{r7, lr}
 800293c:	b086      	sub	sp, #24
 800293e:	af00      	add	r7, sp, #0
 8002940:	4603      	mov	r3, r0
 8002942:	60b9      	str	r1, [r7, #8]
 8002944:	607a      	str	r2, [r7, #4]
 8002946:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002948:	2300      	movs	r3, #0
 800294a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800294c:	f7ff ff3e 	bl	80027cc <__NVIC_GetPriorityGrouping>
 8002950:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002952:	687a      	ldr	r2, [r7, #4]
 8002954:	68b9      	ldr	r1, [r7, #8]
 8002956:	6978      	ldr	r0, [r7, #20]
 8002958:	f7ff ff8e 	bl	8002878 <NVIC_EncodePriority>
 800295c:	4602      	mov	r2, r0
 800295e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002962:	4611      	mov	r1, r2
 8002964:	4618      	mov	r0, r3
 8002966:	f7ff ff5d 	bl	8002824 <__NVIC_SetPriority>
}
 800296a:	bf00      	nop
 800296c:	3718      	adds	r7, #24
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}

08002972 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002972:	b580      	push	{r7, lr}
 8002974:	b082      	sub	sp, #8
 8002976:	af00      	add	r7, sp, #0
 8002978:	4603      	mov	r3, r0
 800297a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800297c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002980:	4618      	mov	r0, r3
 8002982:	f7ff ff31 	bl	80027e8 <__NVIC_EnableIRQ>
}
 8002986:	bf00      	nop
 8002988:	3708      	adds	r7, #8
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}

0800298e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800298e:	b580      	push	{r7, lr}
 8002990:	b082      	sub	sp, #8
 8002992:	af00      	add	r7, sp, #0
 8002994:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002996:	6878      	ldr	r0, [r7, #4]
 8002998:	f7ff ffa2 	bl	80028e0 <SysTick_Config>
 800299c:	4603      	mov	r3, r0
}
 800299e:	4618      	mov	r0, r3
 80029a0:	3708      	adds	r7, #8
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}

080029a6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80029a6:	b580      	push	{r7, lr}
 80029a8:	b084      	sub	sp, #16
 80029aa:	af00      	add	r7, sp, #0
 80029ac:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029b2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80029b4:	f7ff feda 	bl	800276c <HAL_GetTick>
 80029b8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80029c0:	b2db      	uxtb	r3, r3
 80029c2:	2b02      	cmp	r3, #2
 80029c4:	d008      	beq.n	80029d8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2280      	movs	r2, #128	; 0x80
 80029ca:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2200      	movs	r2, #0
 80029d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80029d4:	2301      	movs	r3, #1
 80029d6:	e052      	b.n	8002a7e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	681a      	ldr	r2, [r3, #0]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f022 0216 	bic.w	r2, r2, #22
 80029e6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	695a      	ldr	r2, [r3, #20]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80029f6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d103      	bne.n	8002a08 <HAL_DMA_Abort+0x62>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d007      	beq.n	8002a18 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	681a      	ldr	r2, [r3, #0]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f022 0208 	bic.w	r2, r2, #8
 8002a16:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	681a      	ldr	r2, [r3, #0]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f022 0201 	bic.w	r2, r2, #1
 8002a26:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a28:	e013      	b.n	8002a52 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002a2a:	f7ff fe9f 	bl	800276c <HAL_GetTick>
 8002a2e:	4602      	mov	r2, r0
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	1ad3      	subs	r3, r2, r3
 8002a34:	2b05      	cmp	r3, #5
 8002a36:	d90c      	bls.n	8002a52 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2220      	movs	r2, #32
 8002a3c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2203      	movs	r2, #3
 8002a42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002a4e:	2303      	movs	r3, #3
 8002a50:	e015      	b.n	8002a7e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f003 0301 	and.w	r3, r3, #1
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d1e4      	bne.n	8002a2a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a64:	223f      	movs	r2, #63	; 0x3f
 8002a66:	409a      	lsls	r2, r3
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2201      	movs	r2, #1
 8002a70:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2200      	movs	r2, #0
 8002a78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002a7c:	2300      	movs	r3, #0
}
 8002a7e:	4618      	mov	r0, r3
 8002a80:	3710      	adds	r7, #16
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}

08002a86 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002a86:	b480      	push	{r7}
 8002a88:	b083      	sub	sp, #12
 8002a8a:	af00      	add	r7, sp, #0
 8002a8c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a94:	b2db      	uxtb	r3, r3
 8002a96:	2b02      	cmp	r3, #2
 8002a98:	d004      	beq.n	8002aa4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2280      	movs	r2, #128	; 0x80
 8002a9e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	e00c      	b.n	8002abe <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2205      	movs	r2, #5
 8002aa8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	681a      	ldr	r2, [r3, #0]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f022 0201 	bic.w	r2, r2, #1
 8002aba:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002abc:	2300      	movs	r3, #0
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	370c      	adds	r7, #12
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac8:	4770      	bx	lr
	...

08002acc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002acc:	b480      	push	{r7}
 8002ace:	b089      	sub	sp, #36	; 0x24
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
 8002ad4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002ada:	2300      	movs	r3, #0
 8002adc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	61fb      	str	r3, [r7, #28]
 8002ae6:	e16b      	b.n	8002dc0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002ae8:	2201      	movs	r2, #1
 8002aea:	69fb      	ldr	r3, [r7, #28]
 8002aec:	fa02 f303 	lsl.w	r3, r2, r3
 8002af0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	697a      	ldr	r2, [r7, #20]
 8002af8:	4013      	ands	r3, r2
 8002afa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002afc:	693a      	ldr	r2, [r7, #16]
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	429a      	cmp	r2, r3
 8002b02:	f040 815a 	bne.w	8002dba <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	f003 0303 	and.w	r3, r3, #3
 8002b0e:	2b01      	cmp	r3, #1
 8002b10:	d005      	beq.n	8002b1e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b1a:	2b02      	cmp	r3, #2
 8002b1c:	d130      	bne.n	8002b80 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	689b      	ldr	r3, [r3, #8]
 8002b22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002b24:	69fb      	ldr	r3, [r7, #28]
 8002b26:	005b      	lsls	r3, r3, #1
 8002b28:	2203      	movs	r2, #3
 8002b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b2e:	43db      	mvns	r3, r3
 8002b30:	69ba      	ldr	r2, [r7, #24]
 8002b32:	4013      	ands	r3, r2
 8002b34:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	68da      	ldr	r2, [r3, #12]
 8002b3a:	69fb      	ldr	r3, [r7, #28]
 8002b3c:	005b      	lsls	r3, r3, #1
 8002b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b42:	69ba      	ldr	r2, [r7, #24]
 8002b44:	4313      	orrs	r3, r2
 8002b46:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	69ba      	ldr	r2, [r7, #24]
 8002b4c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b54:	2201      	movs	r2, #1
 8002b56:	69fb      	ldr	r3, [r7, #28]
 8002b58:	fa02 f303 	lsl.w	r3, r2, r3
 8002b5c:	43db      	mvns	r3, r3
 8002b5e:	69ba      	ldr	r2, [r7, #24]
 8002b60:	4013      	ands	r3, r2
 8002b62:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	091b      	lsrs	r3, r3, #4
 8002b6a:	f003 0201 	and.w	r2, r3, #1
 8002b6e:	69fb      	ldr	r3, [r7, #28]
 8002b70:	fa02 f303 	lsl.w	r3, r2, r3
 8002b74:	69ba      	ldr	r2, [r7, #24]
 8002b76:	4313      	orrs	r3, r2
 8002b78:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	69ba      	ldr	r2, [r7, #24]
 8002b7e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	f003 0303 	and.w	r3, r3, #3
 8002b88:	2b03      	cmp	r3, #3
 8002b8a:	d017      	beq.n	8002bbc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	68db      	ldr	r3, [r3, #12]
 8002b90:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002b92:	69fb      	ldr	r3, [r7, #28]
 8002b94:	005b      	lsls	r3, r3, #1
 8002b96:	2203      	movs	r2, #3
 8002b98:	fa02 f303 	lsl.w	r3, r2, r3
 8002b9c:	43db      	mvns	r3, r3
 8002b9e:	69ba      	ldr	r2, [r7, #24]
 8002ba0:	4013      	ands	r3, r2
 8002ba2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	689a      	ldr	r2, [r3, #8]
 8002ba8:	69fb      	ldr	r3, [r7, #28]
 8002baa:	005b      	lsls	r3, r3, #1
 8002bac:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb0:	69ba      	ldr	r2, [r7, #24]
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	69ba      	ldr	r2, [r7, #24]
 8002bba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	f003 0303 	and.w	r3, r3, #3
 8002bc4:	2b02      	cmp	r3, #2
 8002bc6:	d123      	bne.n	8002c10 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002bc8:	69fb      	ldr	r3, [r7, #28]
 8002bca:	08da      	lsrs	r2, r3, #3
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	3208      	adds	r2, #8
 8002bd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002bd6:	69fb      	ldr	r3, [r7, #28]
 8002bd8:	f003 0307 	and.w	r3, r3, #7
 8002bdc:	009b      	lsls	r3, r3, #2
 8002bde:	220f      	movs	r2, #15
 8002be0:	fa02 f303 	lsl.w	r3, r2, r3
 8002be4:	43db      	mvns	r3, r3
 8002be6:	69ba      	ldr	r2, [r7, #24]
 8002be8:	4013      	ands	r3, r2
 8002bea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	691a      	ldr	r2, [r3, #16]
 8002bf0:	69fb      	ldr	r3, [r7, #28]
 8002bf2:	f003 0307 	and.w	r3, r3, #7
 8002bf6:	009b      	lsls	r3, r3, #2
 8002bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bfc:	69ba      	ldr	r2, [r7, #24]
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002c02:	69fb      	ldr	r3, [r7, #28]
 8002c04:	08da      	lsrs	r2, r3, #3
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	3208      	adds	r2, #8
 8002c0a:	69b9      	ldr	r1, [r7, #24]
 8002c0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002c16:	69fb      	ldr	r3, [r7, #28]
 8002c18:	005b      	lsls	r3, r3, #1
 8002c1a:	2203      	movs	r2, #3
 8002c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c20:	43db      	mvns	r3, r3
 8002c22:	69ba      	ldr	r2, [r7, #24]
 8002c24:	4013      	ands	r3, r2
 8002c26:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	f003 0203 	and.w	r2, r3, #3
 8002c30:	69fb      	ldr	r3, [r7, #28]
 8002c32:	005b      	lsls	r3, r3, #1
 8002c34:	fa02 f303 	lsl.w	r3, r2, r3
 8002c38:	69ba      	ldr	r2, [r7, #24]
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	69ba      	ldr	r2, [r7, #24]
 8002c42:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	f000 80b4 	beq.w	8002dba <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c52:	2300      	movs	r3, #0
 8002c54:	60fb      	str	r3, [r7, #12]
 8002c56:	4b60      	ldr	r3, [pc, #384]	; (8002dd8 <HAL_GPIO_Init+0x30c>)
 8002c58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c5a:	4a5f      	ldr	r2, [pc, #380]	; (8002dd8 <HAL_GPIO_Init+0x30c>)
 8002c5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c60:	6453      	str	r3, [r2, #68]	; 0x44
 8002c62:	4b5d      	ldr	r3, [pc, #372]	; (8002dd8 <HAL_GPIO_Init+0x30c>)
 8002c64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c6a:	60fb      	str	r3, [r7, #12]
 8002c6c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c6e:	4a5b      	ldr	r2, [pc, #364]	; (8002ddc <HAL_GPIO_Init+0x310>)
 8002c70:	69fb      	ldr	r3, [r7, #28]
 8002c72:	089b      	lsrs	r3, r3, #2
 8002c74:	3302      	adds	r3, #2
 8002c76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002c7c:	69fb      	ldr	r3, [r7, #28]
 8002c7e:	f003 0303 	and.w	r3, r3, #3
 8002c82:	009b      	lsls	r3, r3, #2
 8002c84:	220f      	movs	r2, #15
 8002c86:	fa02 f303 	lsl.w	r3, r2, r3
 8002c8a:	43db      	mvns	r3, r3
 8002c8c:	69ba      	ldr	r2, [r7, #24]
 8002c8e:	4013      	ands	r3, r2
 8002c90:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	4a52      	ldr	r2, [pc, #328]	; (8002de0 <HAL_GPIO_Init+0x314>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d02b      	beq.n	8002cf2 <HAL_GPIO_Init+0x226>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	4a51      	ldr	r2, [pc, #324]	; (8002de4 <HAL_GPIO_Init+0x318>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d025      	beq.n	8002cee <HAL_GPIO_Init+0x222>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	4a50      	ldr	r2, [pc, #320]	; (8002de8 <HAL_GPIO_Init+0x31c>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d01f      	beq.n	8002cea <HAL_GPIO_Init+0x21e>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	4a4f      	ldr	r2, [pc, #316]	; (8002dec <HAL_GPIO_Init+0x320>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d019      	beq.n	8002ce6 <HAL_GPIO_Init+0x21a>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	4a4e      	ldr	r2, [pc, #312]	; (8002df0 <HAL_GPIO_Init+0x324>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d013      	beq.n	8002ce2 <HAL_GPIO_Init+0x216>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	4a4d      	ldr	r2, [pc, #308]	; (8002df4 <HAL_GPIO_Init+0x328>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d00d      	beq.n	8002cde <HAL_GPIO_Init+0x212>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	4a4c      	ldr	r2, [pc, #304]	; (8002df8 <HAL_GPIO_Init+0x32c>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d007      	beq.n	8002cda <HAL_GPIO_Init+0x20e>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	4a4b      	ldr	r2, [pc, #300]	; (8002dfc <HAL_GPIO_Init+0x330>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d101      	bne.n	8002cd6 <HAL_GPIO_Init+0x20a>
 8002cd2:	2307      	movs	r3, #7
 8002cd4:	e00e      	b.n	8002cf4 <HAL_GPIO_Init+0x228>
 8002cd6:	2308      	movs	r3, #8
 8002cd8:	e00c      	b.n	8002cf4 <HAL_GPIO_Init+0x228>
 8002cda:	2306      	movs	r3, #6
 8002cdc:	e00a      	b.n	8002cf4 <HAL_GPIO_Init+0x228>
 8002cde:	2305      	movs	r3, #5
 8002ce0:	e008      	b.n	8002cf4 <HAL_GPIO_Init+0x228>
 8002ce2:	2304      	movs	r3, #4
 8002ce4:	e006      	b.n	8002cf4 <HAL_GPIO_Init+0x228>
 8002ce6:	2303      	movs	r3, #3
 8002ce8:	e004      	b.n	8002cf4 <HAL_GPIO_Init+0x228>
 8002cea:	2302      	movs	r3, #2
 8002cec:	e002      	b.n	8002cf4 <HAL_GPIO_Init+0x228>
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e000      	b.n	8002cf4 <HAL_GPIO_Init+0x228>
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	69fa      	ldr	r2, [r7, #28]
 8002cf6:	f002 0203 	and.w	r2, r2, #3
 8002cfa:	0092      	lsls	r2, r2, #2
 8002cfc:	4093      	lsls	r3, r2
 8002cfe:	69ba      	ldr	r2, [r7, #24]
 8002d00:	4313      	orrs	r3, r2
 8002d02:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002d04:	4935      	ldr	r1, [pc, #212]	; (8002ddc <HAL_GPIO_Init+0x310>)
 8002d06:	69fb      	ldr	r3, [r7, #28]
 8002d08:	089b      	lsrs	r3, r3, #2
 8002d0a:	3302      	adds	r3, #2
 8002d0c:	69ba      	ldr	r2, [r7, #24]
 8002d0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d12:	4b3b      	ldr	r3, [pc, #236]	; (8002e00 <HAL_GPIO_Init+0x334>)
 8002d14:	689b      	ldr	r3, [r3, #8]
 8002d16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d18:	693b      	ldr	r3, [r7, #16]
 8002d1a:	43db      	mvns	r3, r3
 8002d1c:	69ba      	ldr	r2, [r7, #24]
 8002d1e:	4013      	ands	r3, r2
 8002d20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d003      	beq.n	8002d36 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002d2e:	69ba      	ldr	r2, [r7, #24]
 8002d30:	693b      	ldr	r3, [r7, #16]
 8002d32:	4313      	orrs	r3, r2
 8002d34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d36:	4a32      	ldr	r2, [pc, #200]	; (8002e00 <HAL_GPIO_Init+0x334>)
 8002d38:	69bb      	ldr	r3, [r7, #24]
 8002d3a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d3c:	4b30      	ldr	r3, [pc, #192]	; (8002e00 <HAL_GPIO_Init+0x334>)
 8002d3e:	68db      	ldr	r3, [r3, #12]
 8002d40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d42:	693b      	ldr	r3, [r7, #16]
 8002d44:	43db      	mvns	r3, r3
 8002d46:	69ba      	ldr	r2, [r7, #24]
 8002d48:	4013      	ands	r3, r2
 8002d4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d003      	beq.n	8002d60 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002d58:	69ba      	ldr	r2, [r7, #24]
 8002d5a:	693b      	ldr	r3, [r7, #16]
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d60:	4a27      	ldr	r2, [pc, #156]	; (8002e00 <HAL_GPIO_Init+0x334>)
 8002d62:	69bb      	ldr	r3, [r7, #24]
 8002d64:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002d66:	4b26      	ldr	r3, [pc, #152]	; (8002e00 <HAL_GPIO_Init+0x334>)
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d6c:	693b      	ldr	r3, [r7, #16]
 8002d6e:	43db      	mvns	r3, r3
 8002d70:	69ba      	ldr	r2, [r7, #24]
 8002d72:	4013      	ands	r3, r2
 8002d74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d003      	beq.n	8002d8a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002d82:	69ba      	ldr	r2, [r7, #24]
 8002d84:	693b      	ldr	r3, [r7, #16]
 8002d86:	4313      	orrs	r3, r2
 8002d88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d8a:	4a1d      	ldr	r2, [pc, #116]	; (8002e00 <HAL_GPIO_Init+0x334>)
 8002d8c:	69bb      	ldr	r3, [r7, #24]
 8002d8e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d90:	4b1b      	ldr	r3, [pc, #108]	; (8002e00 <HAL_GPIO_Init+0x334>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	43db      	mvns	r3, r3
 8002d9a:	69ba      	ldr	r2, [r7, #24]
 8002d9c:	4013      	ands	r3, r2
 8002d9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d003      	beq.n	8002db4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002dac:	69ba      	ldr	r2, [r7, #24]
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	4313      	orrs	r3, r2
 8002db2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002db4:	4a12      	ldr	r2, [pc, #72]	; (8002e00 <HAL_GPIO_Init+0x334>)
 8002db6:	69bb      	ldr	r3, [r7, #24]
 8002db8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002dba:	69fb      	ldr	r3, [r7, #28]
 8002dbc:	3301      	adds	r3, #1
 8002dbe:	61fb      	str	r3, [r7, #28]
 8002dc0:	69fb      	ldr	r3, [r7, #28]
 8002dc2:	2b0f      	cmp	r3, #15
 8002dc4:	f67f ae90 	bls.w	8002ae8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002dc8:	bf00      	nop
 8002dca:	bf00      	nop
 8002dcc:	3724      	adds	r7, #36	; 0x24
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd4:	4770      	bx	lr
 8002dd6:	bf00      	nop
 8002dd8:	40023800 	.word	0x40023800
 8002ddc:	40013800 	.word	0x40013800
 8002de0:	40020000 	.word	0x40020000
 8002de4:	40020400 	.word	0x40020400
 8002de8:	40020800 	.word	0x40020800
 8002dec:	40020c00 	.word	0x40020c00
 8002df0:	40021000 	.word	0x40021000
 8002df4:	40021400 	.word	0x40021400
 8002df8:	40021800 	.word	0x40021800
 8002dfc:	40021c00 	.word	0x40021c00
 8002e00:	40013c00 	.word	0x40013c00

08002e04 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b086      	sub	sp, #24
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d101      	bne.n	8002e16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	e267      	b.n	80032e6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f003 0301 	and.w	r3, r3, #1
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d075      	beq.n	8002f0e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002e22:	4b88      	ldr	r3, [pc, #544]	; (8003044 <HAL_RCC_OscConfig+0x240>)
 8002e24:	689b      	ldr	r3, [r3, #8]
 8002e26:	f003 030c 	and.w	r3, r3, #12
 8002e2a:	2b04      	cmp	r3, #4
 8002e2c:	d00c      	beq.n	8002e48 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e2e:	4b85      	ldr	r3, [pc, #532]	; (8003044 <HAL_RCC_OscConfig+0x240>)
 8002e30:	689b      	ldr	r3, [r3, #8]
 8002e32:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002e36:	2b08      	cmp	r3, #8
 8002e38:	d112      	bne.n	8002e60 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e3a:	4b82      	ldr	r3, [pc, #520]	; (8003044 <HAL_RCC_OscConfig+0x240>)
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e42:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e46:	d10b      	bne.n	8002e60 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e48:	4b7e      	ldr	r3, [pc, #504]	; (8003044 <HAL_RCC_OscConfig+0x240>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d05b      	beq.n	8002f0c <HAL_RCC_OscConfig+0x108>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d157      	bne.n	8002f0c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	e242      	b.n	80032e6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e68:	d106      	bne.n	8002e78 <HAL_RCC_OscConfig+0x74>
 8002e6a:	4b76      	ldr	r3, [pc, #472]	; (8003044 <HAL_RCC_OscConfig+0x240>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a75      	ldr	r2, [pc, #468]	; (8003044 <HAL_RCC_OscConfig+0x240>)
 8002e70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e74:	6013      	str	r3, [r2, #0]
 8002e76:	e01d      	b.n	8002eb4 <HAL_RCC_OscConfig+0xb0>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e80:	d10c      	bne.n	8002e9c <HAL_RCC_OscConfig+0x98>
 8002e82:	4b70      	ldr	r3, [pc, #448]	; (8003044 <HAL_RCC_OscConfig+0x240>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a6f      	ldr	r2, [pc, #444]	; (8003044 <HAL_RCC_OscConfig+0x240>)
 8002e88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e8c:	6013      	str	r3, [r2, #0]
 8002e8e:	4b6d      	ldr	r3, [pc, #436]	; (8003044 <HAL_RCC_OscConfig+0x240>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a6c      	ldr	r2, [pc, #432]	; (8003044 <HAL_RCC_OscConfig+0x240>)
 8002e94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e98:	6013      	str	r3, [r2, #0]
 8002e9a:	e00b      	b.n	8002eb4 <HAL_RCC_OscConfig+0xb0>
 8002e9c:	4b69      	ldr	r3, [pc, #420]	; (8003044 <HAL_RCC_OscConfig+0x240>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a68      	ldr	r2, [pc, #416]	; (8003044 <HAL_RCC_OscConfig+0x240>)
 8002ea2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ea6:	6013      	str	r3, [r2, #0]
 8002ea8:	4b66      	ldr	r3, [pc, #408]	; (8003044 <HAL_RCC_OscConfig+0x240>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a65      	ldr	r2, [pc, #404]	; (8003044 <HAL_RCC_OscConfig+0x240>)
 8002eae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002eb2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d013      	beq.n	8002ee4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ebc:	f7ff fc56 	bl	800276c <HAL_GetTick>
 8002ec0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ec2:	e008      	b.n	8002ed6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ec4:	f7ff fc52 	bl	800276c <HAL_GetTick>
 8002ec8:	4602      	mov	r2, r0
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	1ad3      	subs	r3, r2, r3
 8002ece:	2b64      	cmp	r3, #100	; 0x64
 8002ed0:	d901      	bls.n	8002ed6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002ed2:	2303      	movs	r3, #3
 8002ed4:	e207      	b.n	80032e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ed6:	4b5b      	ldr	r3, [pc, #364]	; (8003044 <HAL_RCC_OscConfig+0x240>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d0f0      	beq.n	8002ec4 <HAL_RCC_OscConfig+0xc0>
 8002ee2:	e014      	b.n	8002f0e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ee4:	f7ff fc42 	bl	800276c <HAL_GetTick>
 8002ee8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002eea:	e008      	b.n	8002efe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002eec:	f7ff fc3e 	bl	800276c <HAL_GetTick>
 8002ef0:	4602      	mov	r2, r0
 8002ef2:	693b      	ldr	r3, [r7, #16]
 8002ef4:	1ad3      	subs	r3, r2, r3
 8002ef6:	2b64      	cmp	r3, #100	; 0x64
 8002ef8:	d901      	bls.n	8002efe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002efa:	2303      	movs	r3, #3
 8002efc:	e1f3      	b.n	80032e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002efe:	4b51      	ldr	r3, [pc, #324]	; (8003044 <HAL_RCC_OscConfig+0x240>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d1f0      	bne.n	8002eec <HAL_RCC_OscConfig+0xe8>
 8002f0a:	e000      	b.n	8002f0e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f003 0302 	and.w	r3, r3, #2
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d063      	beq.n	8002fe2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002f1a:	4b4a      	ldr	r3, [pc, #296]	; (8003044 <HAL_RCC_OscConfig+0x240>)
 8002f1c:	689b      	ldr	r3, [r3, #8]
 8002f1e:	f003 030c 	and.w	r3, r3, #12
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d00b      	beq.n	8002f3e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f26:	4b47      	ldr	r3, [pc, #284]	; (8003044 <HAL_RCC_OscConfig+0x240>)
 8002f28:	689b      	ldr	r3, [r3, #8]
 8002f2a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002f2e:	2b08      	cmp	r3, #8
 8002f30:	d11c      	bne.n	8002f6c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f32:	4b44      	ldr	r3, [pc, #272]	; (8003044 <HAL_RCC_OscConfig+0x240>)
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d116      	bne.n	8002f6c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f3e:	4b41      	ldr	r3, [pc, #260]	; (8003044 <HAL_RCC_OscConfig+0x240>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f003 0302 	and.w	r3, r3, #2
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d005      	beq.n	8002f56 <HAL_RCC_OscConfig+0x152>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	68db      	ldr	r3, [r3, #12]
 8002f4e:	2b01      	cmp	r3, #1
 8002f50:	d001      	beq.n	8002f56 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	e1c7      	b.n	80032e6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f56:	4b3b      	ldr	r3, [pc, #236]	; (8003044 <HAL_RCC_OscConfig+0x240>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	691b      	ldr	r3, [r3, #16]
 8002f62:	00db      	lsls	r3, r3, #3
 8002f64:	4937      	ldr	r1, [pc, #220]	; (8003044 <HAL_RCC_OscConfig+0x240>)
 8002f66:	4313      	orrs	r3, r2
 8002f68:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f6a:	e03a      	b.n	8002fe2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	68db      	ldr	r3, [r3, #12]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d020      	beq.n	8002fb6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f74:	4b34      	ldr	r3, [pc, #208]	; (8003048 <HAL_RCC_OscConfig+0x244>)
 8002f76:	2201      	movs	r2, #1
 8002f78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f7a:	f7ff fbf7 	bl	800276c <HAL_GetTick>
 8002f7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f80:	e008      	b.n	8002f94 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f82:	f7ff fbf3 	bl	800276c <HAL_GetTick>
 8002f86:	4602      	mov	r2, r0
 8002f88:	693b      	ldr	r3, [r7, #16]
 8002f8a:	1ad3      	subs	r3, r2, r3
 8002f8c:	2b02      	cmp	r3, #2
 8002f8e:	d901      	bls.n	8002f94 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002f90:	2303      	movs	r3, #3
 8002f92:	e1a8      	b.n	80032e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f94:	4b2b      	ldr	r3, [pc, #172]	; (8003044 <HAL_RCC_OscConfig+0x240>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f003 0302 	and.w	r3, r3, #2
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d0f0      	beq.n	8002f82 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fa0:	4b28      	ldr	r3, [pc, #160]	; (8003044 <HAL_RCC_OscConfig+0x240>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	691b      	ldr	r3, [r3, #16]
 8002fac:	00db      	lsls	r3, r3, #3
 8002fae:	4925      	ldr	r1, [pc, #148]	; (8003044 <HAL_RCC_OscConfig+0x240>)
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	600b      	str	r3, [r1, #0]
 8002fb4:	e015      	b.n	8002fe2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002fb6:	4b24      	ldr	r3, [pc, #144]	; (8003048 <HAL_RCC_OscConfig+0x244>)
 8002fb8:	2200      	movs	r2, #0
 8002fba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fbc:	f7ff fbd6 	bl	800276c <HAL_GetTick>
 8002fc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fc2:	e008      	b.n	8002fd6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002fc4:	f7ff fbd2 	bl	800276c <HAL_GetTick>
 8002fc8:	4602      	mov	r2, r0
 8002fca:	693b      	ldr	r3, [r7, #16]
 8002fcc:	1ad3      	subs	r3, r2, r3
 8002fce:	2b02      	cmp	r3, #2
 8002fd0:	d901      	bls.n	8002fd6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002fd2:	2303      	movs	r3, #3
 8002fd4:	e187      	b.n	80032e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fd6:	4b1b      	ldr	r3, [pc, #108]	; (8003044 <HAL_RCC_OscConfig+0x240>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f003 0302 	and.w	r3, r3, #2
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d1f0      	bne.n	8002fc4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f003 0308 	and.w	r3, r3, #8
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d036      	beq.n	800305c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	695b      	ldr	r3, [r3, #20]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d016      	beq.n	8003024 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ff6:	4b15      	ldr	r3, [pc, #84]	; (800304c <HAL_RCC_OscConfig+0x248>)
 8002ff8:	2201      	movs	r2, #1
 8002ffa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ffc:	f7ff fbb6 	bl	800276c <HAL_GetTick>
 8003000:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003002:	e008      	b.n	8003016 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003004:	f7ff fbb2 	bl	800276c <HAL_GetTick>
 8003008:	4602      	mov	r2, r0
 800300a:	693b      	ldr	r3, [r7, #16]
 800300c:	1ad3      	subs	r3, r2, r3
 800300e:	2b02      	cmp	r3, #2
 8003010:	d901      	bls.n	8003016 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003012:	2303      	movs	r3, #3
 8003014:	e167      	b.n	80032e6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003016:	4b0b      	ldr	r3, [pc, #44]	; (8003044 <HAL_RCC_OscConfig+0x240>)
 8003018:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800301a:	f003 0302 	and.w	r3, r3, #2
 800301e:	2b00      	cmp	r3, #0
 8003020:	d0f0      	beq.n	8003004 <HAL_RCC_OscConfig+0x200>
 8003022:	e01b      	b.n	800305c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003024:	4b09      	ldr	r3, [pc, #36]	; (800304c <HAL_RCC_OscConfig+0x248>)
 8003026:	2200      	movs	r2, #0
 8003028:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800302a:	f7ff fb9f 	bl	800276c <HAL_GetTick>
 800302e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003030:	e00e      	b.n	8003050 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003032:	f7ff fb9b 	bl	800276c <HAL_GetTick>
 8003036:	4602      	mov	r2, r0
 8003038:	693b      	ldr	r3, [r7, #16]
 800303a:	1ad3      	subs	r3, r2, r3
 800303c:	2b02      	cmp	r3, #2
 800303e:	d907      	bls.n	8003050 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003040:	2303      	movs	r3, #3
 8003042:	e150      	b.n	80032e6 <HAL_RCC_OscConfig+0x4e2>
 8003044:	40023800 	.word	0x40023800
 8003048:	42470000 	.word	0x42470000
 800304c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003050:	4b88      	ldr	r3, [pc, #544]	; (8003274 <HAL_RCC_OscConfig+0x470>)
 8003052:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003054:	f003 0302 	and.w	r3, r3, #2
 8003058:	2b00      	cmp	r3, #0
 800305a:	d1ea      	bne.n	8003032 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f003 0304 	and.w	r3, r3, #4
 8003064:	2b00      	cmp	r3, #0
 8003066:	f000 8097 	beq.w	8003198 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800306a:	2300      	movs	r3, #0
 800306c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800306e:	4b81      	ldr	r3, [pc, #516]	; (8003274 <HAL_RCC_OscConfig+0x470>)
 8003070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003072:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003076:	2b00      	cmp	r3, #0
 8003078:	d10f      	bne.n	800309a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800307a:	2300      	movs	r3, #0
 800307c:	60bb      	str	r3, [r7, #8]
 800307e:	4b7d      	ldr	r3, [pc, #500]	; (8003274 <HAL_RCC_OscConfig+0x470>)
 8003080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003082:	4a7c      	ldr	r2, [pc, #496]	; (8003274 <HAL_RCC_OscConfig+0x470>)
 8003084:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003088:	6413      	str	r3, [r2, #64]	; 0x40
 800308a:	4b7a      	ldr	r3, [pc, #488]	; (8003274 <HAL_RCC_OscConfig+0x470>)
 800308c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800308e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003092:	60bb      	str	r3, [r7, #8]
 8003094:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003096:	2301      	movs	r3, #1
 8003098:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800309a:	4b77      	ldr	r3, [pc, #476]	; (8003278 <HAL_RCC_OscConfig+0x474>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d118      	bne.n	80030d8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030a6:	4b74      	ldr	r3, [pc, #464]	; (8003278 <HAL_RCC_OscConfig+0x474>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a73      	ldr	r2, [pc, #460]	; (8003278 <HAL_RCC_OscConfig+0x474>)
 80030ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030b2:	f7ff fb5b 	bl	800276c <HAL_GetTick>
 80030b6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030b8:	e008      	b.n	80030cc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030ba:	f7ff fb57 	bl	800276c <HAL_GetTick>
 80030be:	4602      	mov	r2, r0
 80030c0:	693b      	ldr	r3, [r7, #16]
 80030c2:	1ad3      	subs	r3, r2, r3
 80030c4:	2b02      	cmp	r3, #2
 80030c6:	d901      	bls.n	80030cc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80030c8:	2303      	movs	r3, #3
 80030ca:	e10c      	b.n	80032e6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030cc:	4b6a      	ldr	r3, [pc, #424]	; (8003278 <HAL_RCC_OscConfig+0x474>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d0f0      	beq.n	80030ba <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	689b      	ldr	r3, [r3, #8]
 80030dc:	2b01      	cmp	r3, #1
 80030de:	d106      	bne.n	80030ee <HAL_RCC_OscConfig+0x2ea>
 80030e0:	4b64      	ldr	r3, [pc, #400]	; (8003274 <HAL_RCC_OscConfig+0x470>)
 80030e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030e4:	4a63      	ldr	r2, [pc, #396]	; (8003274 <HAL_RCC_OscConfig+0x470>)
 80030e6:	f043 0301 	orr.w	r3, r3, #1
 80030ea:	6713      	str	r3, [r2, #112]	; 0x70
 80030ec:	e01c      	b.n	8003128 <HAL_RCC_OscConfig+0x324>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	689b      	ldr	r3, [r3, #8]
 80030f2:	2b05      	cmp	r3, #5
 80030f4:	d10c      	bne.n	8003110 <HAL_RCC_OscConfig+0x30c>
 80030f6:	4b5f      	ldr	r3, [pc, #380]	; (8003274 <HAL_RCC_OscConfig+0x470>)
 80030f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030fa:	4a5e      	ldr	r2, [pc, #376]	; (8003274 <HAL_RCC_OscConfig+0x470>)
 80030fc:	f043 0304 	orr.w	r3, r3, #4
 8003100:	6713      	str	r3, [r2, #112]	; 0x70
 8003102:	4b5c      	ldr	r3, [pc, #368]	; (8003274 <HAL_RCC_OscConfig+0x470>)
 8003104:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003106:	4a5b      	ldr	r2, [pc, #364]	; (8003274 <HAL_RCC_OscConfig+0x470>)
 8003108:	f043 0301 	orr.w	r3, r3, #1
 800310c:	6713      	str	r3, [r2, #112]	; 0x70
 800310e:	e00b      	b.n	8003128 <HAL_RCC_OscConfig+0x324>
 8003110:	4b58      	ldr	r3, [pc, #352]	; (8003274 <HAL_RCC_OscConfig+0x470>)
 8003112:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003114:	4a57      	ldr	r2, [pc, #348]	; (8003274 <HAL_RCC_OscConfig+0x470>)
 8003116:	f023 0301 	bic.w	r3, r3, #1
 800311a:	6713      	str	r3, [r2, #112]	; 0x70
 800311c:	4b55      	ldr	r3, [pc, #340]	; (8003274 <HAL_RCC_OscConfig+0x470>)
 800311e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003120:	4a54      	ldr	r2, [pc, #336]	; (8003274 <HAL_RCC_OscConfig+0x470>)
 8003122:	f023 0304 	bic.w	r3, r3, #4
 8003126:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	689b      	ldr	r3, [r3, #8]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d015      	beq.n	800315c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003130:	f7ff fb1c 	bl	800276c <HAL_GetTick>
 8003134:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003136:	e00a      	b.n	800314e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003138:	f7ff fb18 	bl	800276c <HAL_GetTick>
 800313c:	4602      	mov	r2, r0
 800313e:	693b      	ldr	r3, [r7, #16]
 8003140:	1ad3      	subs	r3, r2, r3
 8003142:	f241 3288 	movw	r2, #5000	; 0x1388
 8003146:	4293      	cmp	r3, r2
 8003148:	d901      	bls.n	800314e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800314a:	2303      	movs	r3, #3
 800314c:	e0cb      	b.n	80032e6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800314e:	4b49      	ldr	r3, [pc, #292]	; (8003274 <HAL_RCC_OscConfig+0x470>)
 8003150:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003152:	f003 0302 	and.w	r3, r3, #2
 8003156:	2b00      	cmp	r3, #0
 8003158:	d0ee      	beq.n	8003138 <HAL_RCC_OscConfig+0x334>
 800315a:	e014      	b.n	8003186 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800315c:	f7ff fb06 	bl	800276c <HAL_GetTick>
 8003160:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003162:	e00a      	b.n	800317a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003164:	f7ff fb02 	bl	800276c <HAL_GetTick>
 8003168:	4602      	mov	r2, r0
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	1ad3      	subs	r3, r2, r3
 800316e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003172:	4293      	cmp	r3, r2
 8003174:	d901      	bls.n	800317a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003176:	2303      	movs	r3, #3
 8003178:	e0b5      	b.n	80032e6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800317a:	4b3e      	ldr	r3, [pc, #248]	; (8003274 <HAL_RCC_OscConfig+0x470>)
 800317c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800317e:	f003 0302 	and.w	r3, r3, #2
 8003182:	2b00      	cmp	r3, #0
 8003184:	d1ee      	bne.n	8003164 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003186:	7dfb      	ldrb	r3, [r7, #23]
 8003188:	2b01      	cmp	r3, #1
 800318a:	d105      	bne.n	8003198 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800318c:	4b39      	ldr	r3, [pc, #228]	; (8003274 <HAL_RCC_OscConfig+0x470>)
 800318e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003190:	4a38      	ldr	r2, [pc, #224]	; (8003274 <HAL_RCC_OscConfig+0x470>)
 8003192:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003196:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	699b      	ldr	r3, [r3, #24]
 800319c:	2b00      	cmp	r3, #0
 800319e:	f000 80a1 	beq.w	80032e4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80031a2:	4b34      	ldr	r3, [pc, #208]	; (8003274 <HAL_RCC_OscConfig+0x470>)
 80031a4:	689b      	ldr	r3, [r3, #8]
 80031a6:	f003 030c 	and.w	r3, r3, #12
 80031aa:	2b08      	cmp	r3, #8
 80031ac:	d05c      	beq.n	8003268 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	699b      	ldr	r3, [r3, #24]
 80031b2:	2b02      	cmp	r3, #2
 80031b4:	d141      	bne.n	800323a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031b6:	4b31      	ldr	r3, [pc, #196]	; (800327c <HAL_RCC_OscConfig+0x478>)
 80031b8:	2200      	movs	r2, #0
 80031ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031bc:	f7ff fad6 	bl	800276c <HAL_GetTick>
 80031c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031c2:	e008      	b.n	80031d6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031c4:	f7ff fad2 	bl	800276c <HAL_GetTick>
 80031c8:	4602      	mov	r2, r0
 80031ca:	693b      	ldr	r3, [r7, #16]
 80031cc:	1ad3      	subs	r3, r2, r3
 80031ce:	2b02      	cmp	r3, #2
 80031d0:	d901      	bls.n	80031d6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80031d2:	2303      	movs	r3, #3
 80031d4:	e087      	b.n	80032e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031d6:	4b27      	ldr	r3, [pc, #156]	; (8003274 <HAL_RCC_OscConfig+0x470>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d1f0      	bne.n	80031c4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	69da      	ldr	r2, [r3, #28]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6a1b      	ldr	r3, [r3, #32]
 80031ea:	431a      	orrs	r2, r3
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f0:	019b      	lsls	r3, r3, #6
 80031f2:	431a      	orrs	r2, r3
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031f8:	085b      	lsrs	r3, r3, #1
 80031fa:	3b01      	subs	r3, #1
 80031fc:	041b      	lsls	r3, r3, #16
 80031fe:	431a      	orrs	r2, r3
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003204:	061b      	lsls	r3, r3, #24
 8003206:	491b      	ldr	r1, [pc, #108]	; (8003274 <HAL_RCC_OscConfig+0x470>)
 8003208:	4313      	orrs	r3, r2
 800320a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800320c:	4b1b      	ldr	r3, [pc, #108]	; (800327c <HAL_RCC_OscConfig+0x478>)
 800320e:	2201      	movs	r2, #1
 8003210:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003212:	f7ff faab 	bl	800276c <HAL_GetTick>
 8003216:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003218:	e008      	b.n	800322c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800321a:	f7ff faa7 	bl	800276c <HAL_GetTick>
 800321e:	4602      	mov	r2, r0
 8003220:	693b      	ldr	r3, [r7, #16]
 8003222:	1ad3      	subs	r3, r2, r3
 8003224:	2b02      	cmp	r3, #2
 8003226:	d901      	bls.n	800322c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003228:	2303      	movs	r3, #3
 800322a:	e05c      	b.n	80032e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800322c:	4b11      	ldr	r3, [pc, #68]	; (8003274 <HAL_RCC_OscConfig+0x470>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003234:	2b00      	cmp	r3, #0
 8003236:	d0f0      	beq.n	800321a <HAL_RCC_OscConfig+0x416>
 8003238:	e054      	b.n	80032e4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800323a:	4b10      	ldr	r3, [pc, #64]	; (800327c <HAL_RCC_OscConfig+0x478>)
 800323c:	2200      	movs	r2, #0
 800323e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003240:	f7ff fa94 	bl	800276c <HAL_GetTick>
 8003244:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003246:	e008      	b.n	800325a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003248:	f7ff fa90 	bl	800276c <HAL_GetTick>
 800324c:	4602      	mov	r2, r0
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	1ad3      	subs	r3, r2, r3
 8003252:	2b02      	cmp	r3, #2
 8003254:	d901      	bls.n	800325a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003256:	2303      	movs	r3, #3
 8003258:	e045      	b.n	80032e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800325a:	4b06      	ldr	r3, [pc, #24]	; (8003274 <HAL_RCC_OscConfig+0x470>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003262:	2b00      	cmp	r3, #0
 8003264:	d1f0      	bne.n	8003248 <HAL_RCC_OscConfig+0x444>
 8003266:	e03d      	b.n	80032e4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	699b      	ldr	r3, [r3, #24]
 800326c:	2b01      	cmp	r3, #1
 800326e:	d107      	bne.n	8003280 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003270:	2301      	movs	r3, #1
 8003272:	e038      	b.n	80032e6 <HAL_RCC_OscConfig+0x4e2>
 8003274:	40023800 	.word	0x40023800
 8003278:	40007000 	.word	0x40007000
 800327c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003280:	4b1b      	ldr	r3, [pc, #108]	; (80032f0 <HAL_RCC_OscConfig+0x4ec>)
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	699b      	ldr	r3, [r3, #24]
 800328a:	2b01      	cmp	r3, #1
 800328c:	d028      	beq.n	80032e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003298:	429a      	cmp	r2, r3
 800329a:	d121      	bne.n	80032e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032a6:	429a      	cmp	r2, r3
 80032a8:	d11a      	bne.n	80032e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80032aa:	68fa      	ldr	r2, [r7, #12]
 80032ac:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80032b0:	4013      	ands	r3, r2
 80032b2:	687a      	ldr	r2, [r7, #4]
 80032b4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80032b6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d111      	bne.n	80032e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032c6:	085b      	lsrs	r3, r3, #1
 80032c8:	3b01      	subs	r3, #1
 80032ca:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80032cc:	429a      	cmp	r2, r3
 80032ce:	d107      	bne.n	80032e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032da:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80032dc:	429a      	cmp	r2, r3
 80032de:	d001      	beq.n	80032e4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80032e0:	2301      	movs	r3, #1
 80032e2:	e000      	b.n	80032e6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80032e4:	2300      	movs	r3, #0
}
 80032e6:	4618      	mov	r0, r3
 80032e8:	3718      	adds	r7, #24
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bd80      	pop	{r7, pc}
 80032ee:	bf00      	nop
 80032f0:	40023800 	.word	0x40023800

080032f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b084      	sub	sp, #16
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
 80032fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d101      	bne.n	8003308 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003304:	2301      	movs	r3, #1
 8003306:	e0cc      	b.n	80034a2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003308:	4b68      	ldr	r3, [pc, #416]	; (80034ac <HAL_RCC_ClockConfig+0x1b8>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f003 0307 	and.w	r3, r3, #7
 8003310:	683a      	ldr	r2, [r7, #0]
 8003312:	429a      	cmp	r2, r3
 8003314:	d90c      	bls.n	8003330 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003316:	4b65      	ldr	r3, [pc, #404]	; (80034ac <HAL_RCC_ClockConfig+0x1b8>)
 8003318:	683a      	ldr	r2, [r7, #0]
 800331a:	b2d2      	uxtb	r2, r2
 800331c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800331e:	4b63      	ldr	r3, [pc, #396]	; (80034ac <HAL_RCC_ClockConfig+0x1b8>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f003 0307 	and.w	r3, r3, #7
 8003326:	683a      	ldr	r2, [r7, #0]
 8003328:	429a      	cmp	r2, r3
 800332a:	d001      	beq.n	8003330 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800332c:	2301      	movs	r3, #1
 800332e:	e0b8      	b.n	80034a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f003 0302 	and.w	r3, r3, #2
 8003338:	2b00      	cmp	r3, #0
 800333a:	d020      	beq.n	800337e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f003 0304 	and.w	r3, r3, #4
 8003344:	2b00      	cmp	r3, #0
 8003346:	d005      	beq.n	8003354 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003348:	4b59      	ldr	r3, [pc, #356]	; (80034b0 <HAL_RCC_ClockConfig+0x1bc>)
 800334a:	689b      	ldr	r3, [r3, #8]
 800334c:	4a58      	ldr	r2, [pc, #352]	; (80034b0 <HAL_RCC_ClockConfig+0x1bc>)
 800334e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003352:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f003 0308 	and.w	r3, r3, #8
 800335c:	2b00      	cmp	r3, #0
 800335e:	d005      	beq.n	800336c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003360:	4b53      	ldr	r3, [pc, #332]	; (80034b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	4a52      	ldr	r2, [pc, #328]	; (80034b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003366:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800336a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800336c:	4b50      	ldr	r3, [pc, #320]	; (80034b0 <HAL_RCC_ClockConfig+0x1bc>)
 800336e:	689b      	ldr	r3, [r3, #8]
 8003370:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	689b      	ldr	r3, [r3, #8]
 8003378:	494d      	ldr	r1, [pc, #308]	; (80034b0 <HAL_RCC_ClockConfig+0x1bc>)
 800337a:	4313      	orrs	r3, r2
 800337c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f003 0301 	and.w	r3, r3, #1
 8003386:	2b00      	cmp	r3, #0
 8003388:	d044      	beq.n	8003414 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	2b01      	cmp	r3, #1
 8003390:	d107      	bne.n	80033a2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003392:	4b47      	ldr	r3, [pc, #284]	; (80034b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800339a:	2b00      	cmp	r3, #0
 800339c:	d119      	bne.n	80033d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	e07f      	b.n	80034a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	2b02      	cmp	r3, #2
 80033a8:	d003      	beq.n	80033b2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80033ae:	2b03      	cmp	r3, #3
 80033b0:	d107      	bne.n	80033c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033b2:	4b3f      	ldr	r3, [pc, #252]	; (80034b0 <HAL_RCC_ClockConfig+0x1bc>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d109      	bne.n	80033d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033be:	2301      	movs	r3, #1
 80033c0:	e06f      	b.n	80034a2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033c2:	4b3b      	ldr	r3, [pc, #236]	; (80034b0 <HAL_RCC_ClockConfig+0x1bc>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f003 0302 	and.w	r3, r3, #2
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d101      	bne.n	80033d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033ce:	2301      	movs	r3, #1
 80033d0:	e067      	b.n	80034a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80033d2:	4b37      	ldr	r3, [pc, #220]	; (80034b0 <HAL_RCC_ClockConfig+0x1bc>)
 80033d4:	689b      	ldr	r3, [r3, #8]
 80033d6:	f023 0203 	bic.w	r2, r3, #3
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	4934      	ldr	r1, [pc, #208]	; (80034b0 <HAL_RCC_ClockConfig+0x1bc>)
 80033e0:	4313      	orrs	r3, r2
 80033e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80033e4:	f7ff f9c2 	bl	800276c <HAL_GetTick>
 80033e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033ea:	e00a      	b.n	8003402 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033ec:	f7ff f9be 	bl	800276c <HAL_GetTick>
 80033f0:	4602      	mov	r2, r0
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	1ad3      	subs	r3, r2, r3
 80033f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d901      	bls.n	8003402 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80033fe:	2303      	movs	r3, #3
 8003400:	e04f      	b.n	80034a2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003402:	4b2b      	ldr	r3, [pc, #172]	; (80034b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003404:	689b      	ldr	r3, [r3, #8]
 8003406:	f003 020c 	and.w	r2, r3, #12
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	009b      	lsls	r3, r3, #2
 8003410:	429a      	cmp	r2, r3
 8003412:	d1eb      	bne.n	80033ec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003414:	4b25      	ldr	r3, [pc, #148]	; (80034ac <HAL_RCC_ClockConfig+0x1b8>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f003 0307 	and.w	r3, r3, #7
 800341c:	683a      	ldr	r2, [r7, #0]
 800341e:	429a      	cmp	r2, r3
 8003420:	d20c      	bcs.n	800343c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003422:	4b22      	ldr	r3, [pc, #136]	; (80034ac <HAL_RCC_ClockConfig+0x1b8>)
 8003424:	683a      	ldr	r2, [r7, #0]
 8003426:	b2d2      	uxtb	r2, r2
 8003428:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800342a:	4b20      	ldr	r3, [pc, #128]	; (80034ac <HAL_RCC_ClockConfig+0x1b8>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f003 0307 	and.w	r3, r3, #7
 8003432:	683a      	ldr	r2, [r7, #0]
 8003434:	429a      	cmp	r2, r3
 8003436:	d001      	beq.n	800343c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003438:	2301      	movs	r3, #1
 800343a:	e032      	b.n	80034a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f003 0304 	and.w	r3, r3, #4
 8003444:	2b00      	cmp	r3, #0
 8003446:	d008      	beq.n	800345a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003448:	4b19      	ldr	r3, [pc, #100]	; (80034b0 <HAL_RCC_ClockConfig+0x1bc>)
 800344a:	689b      	ldr	r3, [r3, #8]
 800344c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	68db      	ldr	r3, [r3, #12]
 8003454:	4916      	ldr	r1, [pc, #88]	; (80034b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003456:	4313      	orrs	r3, r2
 8003458:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f003 0308 	and.w	r3, r3, #8
 8003462:	2b00      	cmp	r3, #0
 8003464:	d009      	beq.n	800347a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003466:	4b12      	ldr	r3, [pc, #72]	; (80034b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003468:	689b      	ldr	r3, [r3, #8]
 800346a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	691b      	ldr	r3, [r3, #16]
 8003472:	00db      	lsls	r3, r3, #3
 8003474:	490e      	ldr	r1, [pc, #56]	; (80034b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003476:	4313      	orrs	r3, r2
 8003478:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800347a:	f000 f821 	bl	80034c0 <HAL_RCC_GetSysClockFreq>
 800347e:	4602      	mov	r2, r0
 8003480:	4b0b      	ldr	r3, [pc, #44]	; (80034b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003482:	689b      	ldr	r3, [r3, #8]
 8003484:	091b      	lsrs	r3, r3, #4
 8003486:	f003 030f 	and.w	r3, r3, #15
 800348a:	490a      	ldr	r1, [pc, #40]	; (80034b4 <HAL_RCC_ClockConfig+0x1c0>)
 800348c:	5ccb      	ldrb	r3, [r1, r3]
 800348e:	fa22 f303 	lsr.w	r3, r2, r3
 8003492:	4a09      	ldr	r2, [pc, #36]	; (80034b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003494:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003496:	4b09      	ldr	r3, [pc, #36]	; (80034bc <HAL_RCC_ClockConfig+0x1c8>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4618      	mov	r0, r3
 800349c:	f7ff f922 	bl	80026e4 <HAL_InitTick>

  return HAL_OK;
 80034a0:	2300      	movs	r3, #0
}
 80034a2:	4618      	mov	r0, r3
 80034a4:	3710      	adds	r7, #16
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd80      	pop	{r7, pc}
 80034aa:	bf00      	nop
 80034ac:	40023c00 	.word	0x40023c00
 80034b0:	40023800 	.word	0x40023800
 80034b4:	08005f78 	.word	0x08005f78
 80034b8:	200000d0 	.word	0x200000d0
 80034bc:	200000d4 	.word	0x200000d4

080034c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80034c4:	b094      	sub	sp, #80	; 0x50
 80034c6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80034c8:	2300      	movs	r3, #0
 80034ca:	647b      	str	r3, [r7, #68]	; 0x44
 80034cc:	2300      	movs	r3, #0
 80034ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80034d0:	2300      	movs	r3, #0
 80034d2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80034d4:	2300      	movs	r3, #0
 80034d6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80034d8:	4b79      	ldr	r3, [pc, #484]	; (80036c0 <HAL_RCC_GetSysClockFreq+0x200>)
 80034da:	689b      	ldr	r3, [r3, #8]
 80034dc:	f003 030c 	and.w	r3, r3, #12
 80034e0:	2b08      	cmp	r3, #8
 80034e2:	d00d      	beq.n	8003500 <HAL_RCC_GetSysClockFreq+0x40>
 80034e4:	2b08      	cmp	r3, #8
 80034e6:	f200 80e1 	bhi.w	80036ac <HAL_RCC_GetSysClockFreq+0x1ec>
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d002      	beq.n	80034f4 <HAL_RCC_GetSysClockFreq+0x34>
 80034ee:	2b04      	cmp	r3, #4
 80034f0:	d003      	beq.n	80034fa <HAL_RCC_GetSysClockFreq+0x3a>
 80034f2:	e0db      	b.n	80036ac <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80034f4:	4b73      	ldr	r3, [pc, #460]	; (80036c4 <HAL_RCC_GetSysClockFreq+0x204>)
 80034f6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80034f8:	e0db      	b.n	80036b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80034fa:	4b73      	ldr	r3, [pc, #460]	; (80036c8 <HAL_RCC_GetSysClockFreq+0x208>)
 80034fc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80034fe:	e0d8      	b.n	80036b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003500:	4b6f      	ldr	r3, [pc, #444]	; (80036c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003508:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800350a:	4b6d      	ldr	r3, [pc, #436]	; (80036c0 <HAL_RCC_GetSysClockFreq+0x200>)
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003512:	2b00      	cmp	r3, #0
 8003514:	d063      	beq.n	80035de <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003516:	4b6a      	ldr	r3, [pc, #424]	; (80036c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	099b      	lsrs	r3, r3, #6
 800351c:	2200      	movs	r2, #0
 800351e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003520:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003522:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003524:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003528:	633b      	str	r3, [r7, #48]	; 0x30
 800352a:	2300      	movs	r3, #0
 800352c:	637b      	str	r3, [r7, #52]	; 0x34
 800352e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003532:	4622      	mov	r2, r4
 8003534:	462b      	mov	r3, r5
 8003536:	f04f 0000 	mov.w	r0, #0
 800353a:	f04f 0100 	mov.w	r1, #0
 800353e:	0159      	lsls	r1, r3, #5
 8003540:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003544:	0150      	lsls	r0, r2, #5
 8003546:	4602      	mov	r2, r0
 8003548:	460b      	mov	r3, r1
 800354a:	4621      	mov	r1, r4
 800354c:	1a51      	subs	r1, r2, r1
 800354e:	6139      	str	r1, [r7, #16]
 8003550:	4629      	mov	r1, r5
 8003552:	eb63 0301 	sbc.w	r3, r3, r1
 8003556:	617b      	str	r3, [r7, #20]
 8003558:	f04f 0200 	mov.w	r2, #0
 800355c:	f04f 0300 	mov.w	r3, #0
 8003560:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003564:	4659      	mov	r1, fp
 8003566:	018b      	lsls	r3, r1, #6
 8003568:	4651      	mov	r1, sl
 800356a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800356e:	4651      	mov	r1, sl
 8003570:	018a      	lsls	r2, r1, #6
 8003572:	4651      	mov	r1, sl
 8003574:	ebb2 0801 	subs.w	r8, r2, r1
 8003578:	4659      	mov	r1, fp
 800357a:	eb63 0901 	sbc.w	r9, r3, r1
 800357e:	f04f 0200 	mov.w	r2, #0
 8003582:	f04f 0300 	mov.w	r3, #0
 8003586:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800358a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800358e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003592:	4690      	mov	r8, r2
 8003594:	4699      	mov	r9, r3
 8003596:	4623      	mov	r3, r4
 8003598:	eb18 0303 	adds.w	r3, r8, r3
 800359c:	60bb      	str	r3, [r7, #8]
 800359e:	462b      	mov	r3, r5
 80035a0:	eb49 0303 	adc.w	r3, r9, r3
 80035a4:	60fb      	str	r3, [r7, #12]
 80035a6:	f04f 0200 	mov.w	r2, #0
 80035aa:	f04f 0300 	mov.w	r3, #0
 80035ae:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80035b2:	4629      	mov	r1, r5
 80035b4:	024b      	lsls	r3, r1, #9
 80035b6:	4621      	mov	r1, r4
 80035b8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80035bc:	4621      	mov	r1, r4
 80035be:	024a      	lsls	r2, r1, #9
 80035c0:	4610      	mov	r0, r2
 80035c2:	4619      	mov	r1, r3
 80035c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80035c6:	2200      	movs	r2, #0
 80035c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80035ca:	62fa      	str	r2, [r7, #44]	; 0x2c
 80035cc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80035d0:	f7fd f99c 	bl	800090c <__aeabi_uldivmod>
 80035d4:	4602      	mov	r2, r0
 80035d6:	460b      	mov	r3, r1
 80035d8:	4613      	mov	r3, r2
 80035da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80035dc:	e058      	b.n	8003690 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035de:	4b38      	ldr	r3, [pc, #224]	; (80036c0 <HAL_RCC_GetSysClockFreq+0x200>)
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	099b      	lsrs	r3, r3, #6
 80035e4:	2200      	movs	r2, #0
 80035e6:	4618      	mov	r0, r3
 80035e8:	4611      	mov	r1, r2
 80035ea:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80035ee:	623b      	str	r3, [r7, #32]
 80035f0:	2300      	movs	r3, #0
 80035f2:	627b      	str	r3, [r7, #36]	; 0x24
 80035f4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80035f8:	4642      	mov	r2, r8
 80035fa:	464b      	mov	r3, r9
 80035fc:	f04f 0000 	mov.w	r0, #0
 8003600:	f04f 0100 	mov.w	r1, #0
 8003604:	0159      	lsls	r1, r3, #5
 8003606:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800360a:	0150      	lsls	r0, r2, #5
 800360c:	4602      	mov	r2, r0
 800360e:	460b      	mov	r3, r1
 8003610:	4641      	mov	r1, r8
 8003612:	ebb2 0a01 	subs.w	sl, r2, r1
 8003616:	4649      	mov	r1, r9
 8003618:	eb63 0b01 	sbc.w	fp, r3, r1
 800361c:	f04f 0200 	mov.w	r2, #0
 8003620:	f04f 0300 	mov.w	r3, #0
 8003624:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003628:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800362c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003630:	ebb2 040a 	subs.w	r4, r2, sl
 8003634:	eb63 050b 	sbc.w	r5, r3, fp
 8003638:	f04f 0200 	mov.w	r2, #0
 800363c:	f04f 0300 	mov.w	r3, #0
 8003640:	00eb      	lsls	r3, r5, #3
 8003642:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003646:	00e2      	lsls	r2, r4, #3
 8003648:	4614      	mov	r4, r2
 800364a:	461d      	mov	r5, r3
 800364c:	4643      	mov	r3, r8
 800364e:	18e3      	adds	r3, r4, r3
 8003650:	603b      	str	r3, [r7, #0]
 8003652:	464b      	mov	r3, r9
 8003654:	eb45 0303 	adc.w	r3, r5, r3
 8003658:	607b      	str	r3, [r7, #4]
 800365a:	f04f 0200 	mov.w	r2, #0
 800365e:	f04f 0300 	mov.w	r3, #0
 8003662:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003666:	4629      	mov	r1, r5
 8003668:	028b      	lsls	r3, r1, #10
 800366a:	4621      	mov	r1, r4
 800366c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003670:	4621      	mov	r1, r4
 8003672:	028a      	lsls	r2, r1, #10
 8003674:	4610      	mov	r0, r2
 8003676:	4619      	mov	r1, r3
 8003678:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800367a:	2200      	movs	r2, #0
 800367c:	61bb      	str	r3, [r7, #24]
 800367e:	61fa      	str	r2, [r7, #28]
 8003680:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003684:	f7fd f942 	bl	800090c <__aeabi_uldivmod>
 8003688:	4602      	mov	r2, r0
 800368a:	460b      	mov	r3, r1
 800368c:	4613      	mov	r3, r2
 800368e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003690:	4b0b      	ldr	r3, [pc, #44]	; (80036c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	0c1b      	lsrs	r3, r3, #16
 8003696:	f003 0303 	and.w	r3, r3, #3
 800369a:	3301      	adds	r3, #1
 800369c:	005b      	lsls	r3, r3, #1
 800369e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80036a0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80036a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80036a8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80036aa:	e002      	b.n	80036b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80036ac:	4b05      	ldr	r3, [pc, #20]	; (80036c4 <HAL_RCC_GetSysClockFreq+0x204>)
 80036ae:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80036b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80036b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80036b4:	4618      	mov	r0, r3
 80036b6:	3750      	adds	r7, #80	; 0x50
 80036b8:	46bd      	mov	sp, r7
 80036ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80036be:	bf00      	nop
 80036c0:	40023800 	.word	0x40023800
 80036c4:	00f42400 	.word	0x00f42400
 80036c8:	007a1200 	.word	0x007a1200

080036cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80036cc:	b480      	push	{r7}
 80036ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80036d0:	4b03      	ldr	r3, [pc, #12]	; (80036e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80036d2:	681b      	ldr	r3, [r3, #0]
}
 80036d4:	4618      	mov	r0, r3
 80036d6:	46bd      	mov	sp, r7
 80036d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036dc:	4770      	bx	lr
 80036de:	bf00      	nop
 80036e0:	200000d0 	.word	0x200000d0

080036e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80036e8:	f7ff fff0 	bl	80036cc <HAL_RCC_GetHCLKFreq>
 80036ec:	4602      	mov	r2, r0
 80036ee:	4b05      	ldr	r3, [pc, #20]	; (8003704 <HAL_RCC_GetPCLK1Freq+0x20>)
 80036f0:	689b      	ldr	r3, [r3, #8]
 80036f2:	0a9b      	lsrs	r3, r3, #10
 80036f4:	f003 0307 	and.w	r3, r3, #7
 80036f8:	4903      	ldr	r1, [pc, #12]	; (8003708 <HAL_RCC_GetPCLK1Freq+0x24>)
 80036fa:	5ccb      	ldrb	r3, [r1, r3]
 80036fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003700:	4618      	mov	r0, r3
 8003702:	bd80      	pop	{r7, pc}
 8003704:	40023800 	.word	0x40023800
 8003708:	08005f88 	.word	0x08005f88

0800370c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003710:	f7ff ffdc 	bl	80036cc <HAL_RCC_GetHCLKFreq>
 8003714:	4602      	mov	r2, r0
 8003716:	4b05      	ldr	r3, [pc, #20]	; (800372c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003718:	689b      	ldr	r3, [r3, #8]
 800371a:	0b5b      	lsrs	r3, r3, #13
 800371c:	f003 0307 	and.w	r3, r3, #7
 8003720:	4903      	ldr	r1, [pc, #12]	; (8003730 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003722:	5ccb      	ldrb	r3, [r1, r3]
 8003724:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003728:	4618      	mov	r0, r3
 800372a:	bd80      	pop	{r7, pc}
 800372c:	40023800 	.word	0x40023800
 8003730:	08005f88 	.word	0x08005f88

08003734 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b082      	sub	sp, #8
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d101      	bne.n	8003746 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003742:	2301      	movs	r3, #1
 8003744:	e03f      	b.n	80037c6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800374c:	b2db      	uxtb	r3, r3
 800374e:	2b00      	cmp	r3, #0
 8003750:	d106      	bne.n	8003760 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2200      	movs	r2, #0
 8003756:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800375a:	6878      	ldr	r0, [r7, #4]
 800375c:	f7fe fe3c 	bl	80023d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2224      	movs	r2, #36	; 0x24
 8003764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	68da      	ldr	r2, [r3, #12]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003776:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003778:	6878      	ldr	r0, [r7, #4]
 800377a:	f000 fe13 	bl	80043a4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	691a      	ldr	r2, [r3, #16]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800378c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	695a      	ldr	r2, [r3, #20]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800379c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	68da      	ldr	r2, [r3, #12]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80037ac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2200      	movs	r2, #0
 80037b2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2220      	movs	r2, #32
 80037b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2220      	movs	r2, #32
 80037c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80037c4:	2300      	movs	r3, #0
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	3708      	adds	r7, #8
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}

080037ce <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037ce:	b580      	push	{r7, lr}
 80037d0:	b08a      	sub	sp, #40	; 0x28
 80037d2:	af02      	add	r7, sp, #8
 80037d4:	60f8      	str	r0, [r7, #12]
 80037d6:	60b9      	str	r1, [r7, #8]
 80037d8:	603b      	str	r3, [r7, #0]
 80037da:	4613      	mov	r3, r2
 80037dc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80037de:	2300      	movs	r3, #0
 80037e0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037e8:	b2db      	uxtb	r3, r3
 80037ea:	2b20      	cmp	r3, #32
 80037ec:	d17c      	bne.n	80038e8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80037ee:	68bb      	ldr	r3, [r7, #8]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d002      	beq.n	80037fa <HAL_UART_Transmit+0x2c>
 80037f4:	88fb      	ldrh	r3, [r7, #6]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d101      	bne.n	80037fe <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80037fa:	2301      	movs	r3, #1
 80037fc:	e075      	b.n	80038ea <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003804:	2b01      	cmp	r3, #1
 8003806:	d101      	bne.n	800380c <HAL_UART_Transmit+0x3e>
 8003808:	2302      	movs	r3, #2
 800380a:	e06e      	b.n	80038ea <HAL_UART_Transmit+0x11c>
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	2201      	movs	r2, #1
 8003810:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	2200      	movs	r2, #0
 8003818:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	2221      	movs	r2, #33	; 0x21
 800381e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003822:	f7fe ffa3 	bl	800276c <HAL_GetTick>
 8003826:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	88fa      	ldrh	r2, [r7, #6]
 800382c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	88fa      	ldrh	r2, [r7, #6]
 8003832:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	689b      	ldr	r3, [r3, #8]
 8003838:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800383c:	d108      	bne.n	8003850 <HAL_UART_Transmit+0x82>
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	691b      	ldr	r3, [r3, #16]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d104      	bne.n	8003850 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003846:	2300      	movs	r3, #0
 8003848:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800384a:	68bb      	ldr	r3, [r7, #8]
 800384c:	61bb      	str	r3, [r7, #24]
 800384e:	e003      	b.n	8003858 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003850:	68bb      	ldr	r3, [r7, #8]
 8003852:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003854:	2300      	movs	r3, #0
 8003856:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	2200      	movs	r2, #0
 800385c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003860:	e02a      	b.n	80038b8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	9300      	str	r3, [sp, #0]
 8003866:	697b      	ldr	r3, [r7, #20]
 8003868:	2200      	movs	r2, #0
 800386a:	2180      	movs	r1, #128	; 0x80
 800386c:	68f8      	ldr	r0, [r7, #12]
 800386e:	f000 fb91 	bl	8003f94 <UART_WaitOnFlagUntilTimeout>
 8003872:	4603      	mov	r3, r0
 8003874:	2b00      	cmp	r3, #0
 8003876:	d001      	beq.n	800387c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003878:	2303      	movs	r3, #3
 800387a:	e036      	b.n	80038ea <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800387c:	69fb      	ldr	r3, [r7, #28]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d10b      	bne.n	800389a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003882:	69bb      	ldr	r3, [r7, #24]
 8003884:	881b      	ldrh	r3, [r3, #0]
 8003886:	461a      	mov	r2, r3
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003890:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003892:	69bb      	ldr	r3, [r7, #24]
 8003894:	3302      	adds	r3, #2
 8003896:	61bb      	str	r3, [r7, #24]
 8003898:	e007      	b.n	80038aa <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800389a:	69fb      	ldr	r3, [r7, #28]
 800389c:	781a      	ldrb	r2, [r3, #0]
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80038a4:	69fb      	ldr	r3, [r7, #28]
 80038a6:	3301      	adds	r3, #1
 80038a8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80038ae:	b29b      	uxth	r3, r3
 80038b0:	3b01      	subs	r3, #1
 80038b2:	b29a      	uxth	r2, r3
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80038bc:	b29b      	uxth	r3, r3
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d1cf      	bne.n	8003862 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	9300      	str	r3, [sp, #0]
 80038c6:	697b      	ldr	r3, [r7, #20]
 80038c8:	2200      	movs	r2, #0
 80038ca:	2140      	movs	r1, #64	; 0x40
 80038cc:	68f8      	ldr	r0, [r7, #12]
 80038ce:	f000 fb61 	bl	8003f94 <UART_WaitOnFlagUntilTimeout>
 80038d2:	4603      	mov	r3, r0
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d001      	beq.n	80038dc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80038d8:	2303      	movs	r3, #3
 80038da:	e006      	b.n	80038ea <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	2220      	movs	r2, #32
 80038e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80038e4:	2300      	movs	r3, #0
 80038e6:	e000      	b.n	80038ea <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80038e8:	2302      	movs	r3, #2
  }
}
 80038ea:	4618      	mov	r0, r3
 80038ec:	3720      	adds	r7, #32
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}

080038f2 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038f2:	b580      	push	{r7, lr}
 80038f4:	b08a      	sub	sp, #40	; 0x28
 80038f6:	af02      	add	r7, sp, #8
 80038f8:	60f8      	str	r0, [r7, #12]
 80038fa:	60b9      	str	r1, [r7, #8]
 80038fc:	603b      	str	r3, [r7, #0]
 80038fe:	4613      	mov	r3, r2
 8003900:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003902:	2300      	movs	r3, #0
 8003904:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800390c:	b2db      	uxtb	r3, r3
 800390e:	2b20      	cmp	r3, #32
 8003910:	f040 808c 	bne.w	8003a2c <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003914:	68bb      	ldr	r3, [r7, #8]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d002      	beq.n	8003920 <HAL_UART_Receive+0x2e>
 800391a:	88fb      	ldrh	r3, [r7, #6]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d101      	bne.n	8003924 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003920:	2301      	movs	r3, #1
 8003922:	e084      	b.n	8003a2e <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800392a:	2b01      	cmp	r3, #1
 800392c:	d101      	bne.n	8003932 <HAL_UART_Receive+0x40>
 800392e:	2302      	movs	r3, #2
 8003930:	e07d      	b.n	8003a2e <HAL_UART_Receive+0x13c>
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	2201      	movs	r2, #1
 8003936:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	2200      	movs	r2, #0
 800393e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	2222      	movs	r2, #34	; 0x22
 8003944:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	2200      	movs	r2, #0
 800394c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800394e:	f7fe ff0d 	bl	800276c <HAL_GetTick>
 8003952:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	88fa      	ldrh	r2, [r7, #6]
 8003958:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	88fa      	ldrh	r2, [r7, #6]
 800395e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	689b      	ldr	r3, [r3, #8]
 8003964:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003968:	d108      	bne.n	800397c <HAL_UART_Receive+0x8a>
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	691b      	ldr	r3, [r3, #16]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d104      	bne.n	800397c <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8003972:	2300      	movs	r3, #0
 8003974:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003976:	68bb      	ldr	r3, [r7, #8]
 8003978:	61bb      	str	r3, [r7, #24]
 800397a:	e003      	b.n	8003984 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 800397c:	68bb      	ldr	r3, [r7, #8]
 800397e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003980:	2300      	movs	r3, #0
 8003982:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	2200      	movs	r2, #0
 8003988:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800398c:	e043      	b.n	8003a16 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	9300      	str	r3, [sp, #0]
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	2200      	movs	r2, #0
 8003996:	2120      	movs	r1, #32
 8003998:	68f8      	ldr	r0, [r7, #12]
 800399a:	f000 fafb 	bl	8003f94 <UART_WaitOnFlagUntilTimeout>
 800399e:	4603      	mov	r3, r0
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d001      	beq.n	80039a8 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 80039a4:	2303      	movs	r3, #3
 80039a6:	e042      	b.n	8003a2e <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 80039a8:	69fb      	ldr	r3, [r7, #28]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d10c      	bne.n	80039c8 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	b29b      	uxth	r3, r3
 80039b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039ba:	b29a      	uxth	r2, r3
 80039bc:	69bb      	ldr	r3, [r7, #24]
 80039be:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80039c0:	69bb      	ldr	r3, [r7, #24]
 80039c2:	3302      	adds	r3, #2
 80039c4:	61bb      	str	r3, [r7, #24]
 80039c6:	e01f      	b.n	8003a08 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	689b      	ldr	r3, [r3, #8]
 80039cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039d0:	d007      	beq.n	80039e2 <HAL_UART_Receive+0xf0>
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	689b      	ldr	r3, [r3, #8]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d10a      	bne.n	80039f0 <HAL_UART_Receive+0xfe>
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	691b      	ldr	r3, [r3, #16]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d106      	bne.n	80039f0 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	b2da      	uxtb	r2, r3
 80039ea:	69fb      	ldr	r3, [r7, #28]
 80039ec:	701a      	strb	r2, [r3, #0]
 80039ee:	e008      	b.n	8003a02 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	b2db      	uxtb	r3, r3
 80039f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80039fc:	b2da      	uxtb	r2, r3
 80039fe:	69fb      	ldr	r3, [r7, #28]
 8003a00:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003a02:	69fb      	ldr	r3, [r7, #28]
 8003a04:	3301      	adds	r3, #1
 8003a06:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003a0c:	b29b      	uxth	r3, r3
 8003a0e:	3b01      	subs	r3, #1
 8003a10:	b29a      	uxth	r2, r3
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003a1a:	b29b      	uxth	r3, r3
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d1b6      	bne.n	800398e <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	2220      	movs	r2, #32
 8003a24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8003a28:	2300      	movs	r3, #0
 8003a2a:	e000      	b.n	8003a2e <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8003a2c:	2302      	movs	r3, #2
  }
}
 8003a2e:	4618      	mov	r0, r3
 8003a30:	3720      	adds	r7, #32
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd80      	pop	{r7, pc}
	...

08003a38 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b0ba      	sub	sp, #232	; 0xe8
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	68db      	ldr	r3, [r3, #12]
 8003a50:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	695b      	ldr	r3, [r3, #20]
 8003a5a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003a5e:	2300      	movs	r3, #0
 8003a60:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003a64:	2300      	movs	r3, #0
 8003a66:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003a6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a6e:	f003 030f 	and.w	r3, r3, #15
 8003a72:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003a76:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d10f      	bne.n	8003a9e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003a7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a82:	f003 0320 	and.w	r3, r3, #32
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d009      	beq.n	8003a9e <HAL_UART_IRQHandler+0x66>
 8003a8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a8e:	f003 0320 	and.w	r3, r3, #32
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d003      	beq.n	8003a9e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003a96:	6878      	ldr	r0, [r7, #4]
 8003a98:	f000 fbc9 	bl	800422e <UART_Receive_IT>
      return;
 8003a9c:	e256      	b.n	8003f4c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003a9e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	f000 80de 	beq.w	8003c64 <HAL_UART_IRQHandler+0x22c>
 8003aa8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003aac:	f003 0301 	and.w	r3, r3, #1
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d106      	bne.n	8003ac2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003ab4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ab8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	f000 80d1 	beq.w	8003c64 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003ac2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ac6:	f003 0301 	and.w	r3, r3, #1
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d00b      	beq.n	8003ae6 <HAL_UART_IRQHandler+0xae>
 8003ace:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ad2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d005      	beq.n	8003ae6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ade:	f043 0201 	orr.w	r2, r3, #1
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003ae6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003aea:	f003 0304 	and.w	r3, r3, #4
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d00b      	beq.n	8003b0a <HAL_UART_IRQHandler+0xd2>
 8003af2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003af6:	f003 0301 	and.w	r3, r3, #1
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d005      	beq.n	8003b0a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b02:	f043 0202 	orr.w	r2, r3, #2
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003b0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b0e:	f003 0302 	and.w	r3, r3, #2
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d00b      	beq.n	8003b2e <HAL_UART_IRQHandler+0xf6>
 8003b16:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b1a:	f003 0301 	and.w	r3, r3, #1
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d005      	beq.n	8003b2e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b26:	f043 0204 	orr.w	r2, r3, #4
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003b2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b32:	f003 0308 	and.w	r3, r3, #8
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d011      	beq.n	8003b5e <HAL_UART_IRQHandler+0x126>
 8003b3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b3e:	f003 0320 	and.w	r3, r3, #32
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d105      	bne.n	8003b52 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003b46:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b4a:	f003 0301 	and.w	r3, r3, #1
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d005      	beq.n	8003b5e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b56:	f043 0208 	orr.w	r2, r3, #8
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	f000 81ed 	beq.w	8003f42 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003b68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b6c:	f003 0320 	and.w	r3, r3, #32
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d008      	beq.n	8003b86 <HAL_UART_IRQHandler+0x14e>
 8003b74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b78:	f003 0320 	and.w	r3, r3, #32
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d002      	beq.n	8003b86 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003b80:	6878      	ldr	r0, [r7, #4]
 8003b82:	f000 fb54 	bl	800422e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	695b      	ldr	r3, [r3, #20]
 8003b8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b90:	2b40      	cmp	r3, #64	; 0x40
 8003b92:	bf0c      	ite	eq
 8003b94:	2301      	moveq	r3, #1
 8003b96:	2300      	movne	r3, #0
 8003b98:	b2db      	uxtb	r3, r3
 8003b9a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba2:	f003 0308 	and.w	r3, r3, #8
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d103      	bne.n	8003bb2 <HAL_UART_IRQHandler+0x17a>
 8003baa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d04f      	beq.n	8003c52 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003bb2:	6878      	ldr	r0, [r7, #4]
 8003bb4:	f000 fa5c 	bl	8004070 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	695b      	ldr	r3, [r3, #20]
 8003bbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bc2:	2b40      	cmp	r3, #64	; 0x40
 8003bc4:	d141      	bne.n	8003c4a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	3314      	adds	r3, #20
 8003bcc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bd0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003bd4:	e853 3f00 	ldrex	r3, [r3]
 8003bd8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003bdc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003be0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003be4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	3314      	adds	r3, #20
 8003bee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003bf2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003bf6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bfa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003bfe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003c02:	e841 2300 	strex	r3, r2, [r1]
 8003c06:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003c0a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d1d9      	bne.n	8003bc6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d013      	beq.n	8003c42 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c1e:	4a7d      	ldr	r2, [pc, #500]	; (8003e14 <HAL_UART_IRQHandler+0x3dc>)
 8003c20:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c26:	4618      	mov	r0, r3
 8003c28:	f7fe ff2d 	bl	8002a86 <HAL_DMA_Abort_IT>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d016      	beq.n	8003c60 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c38:	687a      	ldr	r2, [r7, #4]
 8003c3a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003c3c:	4610      	mov	r0, r2
 8003c3e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c40:	e00e      	b.n	8003c60 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003c42:	6878      	ldr	r0, [r7, #4]
 8003c44:	f000 f990 	bl	8003f68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c48:	e00a      	b.n	8003c60 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003c4a:	6878      	ldr	r0, [r7, #4]
 8003c4c:	f000 f98c 	bl	8003f68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c50:	e006      	b.n	8003c60 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003c52:	6878      	ldr	r0, [r7, #4]
 8003c54:	f000 f988 	bl	8003f68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003c5e:	e170      	b.n	8003f42 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c60:	bf00      	nop
    return;
 8003c62:	e16e      	b.n	8003f42 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c68:	2b01      	cmp	r3, #1
 8003c6a:	f040 814a 	bne.w	8003f02 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003c6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c72:	f003 0310 	and.w	r3, r3, #16
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	f000 8143 	beq.w	8003f02 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003c7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c80:	f003 0310 	and.w	r3, r3, #16
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	f000 813c 	beq.w	8003f02 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	60bb      	str	r3, [r7, #8]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	60bb      	str	r3, [r7, #8]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	60bb      	str	r3, [r7, #8]
 8003c9e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	695b      	ldr	r3, [r3, #20]
 8003ca6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003caa:	2b40      	cmp	r3, #64	; 0x40
 8003cac:	f040 80b4 	bne.w	8003e18 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003cbc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	f000 8140 	beq.w	8003f46 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003cca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003cce:	429a      	cmp	r2, r3
 8003cd0:	f080 8139 	bcs.w	8003f46 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003cda:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ce0:	69db      	ldr	r3, [r3, #28]
 8003ce2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ce6:	f000 8088 	beq.w	8003dfa <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	330c      	adds	r3, #12
 8003cf0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cf4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003cf8:	e853 3f00 	ldrex	r3, [r3]
 8003cfc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003d00:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003d04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d08:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	330c      	adds	r3, #12
 8003d12:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003d16:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003d1a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d1e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003d22:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003d26:	e841 2300 	strex	r3, r2, [r1]
 8003d2a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003d2e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d1d9      	bne.n	8003cea <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	3314      	adds	r3, #20
 8003d3c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d3e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d40:	e853 3f00 	ldrex	r3, [r3]
 8003d44:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003d46:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003d48:	f023 0301 	bic.w	r3, r3, #1
 8003d4c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	3314      	adds	r3, #20
 8003d56:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003d5a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003d5e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d60:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003d62:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003d66:	e841 2300 	strex	r3, r2, [r1]
 8003d6a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003d6c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d1e1      	bne.n	8003d36 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	3314      	adds	r3, #20
 8003d78:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d7a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003d7c:	e853 3f00 	ldrex	r3, [r3]
 8003d80:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003d82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d84:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d88:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	3314      	adds	r3, #20
 8003d92:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003d96:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003d98:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d9a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003d9c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003d9e:	e841 2300 	strex	r3, r2, [r1]
 8003da2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003da4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d1e3      	bne.n	8003d72 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2220      	movs	r2, #32
 8003dae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2200      	movs	r2, #0
 8003db6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	330c      	adds	r3, #12
 8003dbe:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003dc2:	e853 3f00 	ldrex	r3, [r3]
 8003dc6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003dc8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003dca:	f023 0310 	bic.w	r3, r3, #16
 8003dce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	330c      	adds	r3, #12
 8003dd8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003ddc:	65ba      	str	r2, [r7, #88]	; 0x58
 8003dde:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003de0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003de2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003de4:	e841 2300 	strex	r3, r2, [r1]
 8003de8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003dea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d1e3      	bne.n	8003db8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003df4:	4618      	mov	r0, r3
 8003df6:	f7fe fdd6 	bl	80029a6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e02:	b29b      	uxth	r3, r3
 8003e04:	1ad3      	subs	r3, r2, r3
 8003e06:	b29b      	uxth	r3, r3
 8003e08:	4619      	mov	r1, r3
 8003e0a:	6878      	ldr	r0, [r7, #4]
 8003e0c:	f000 f8b6 	bl	8003f7c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003e10:	e099      	b.n	8003f46 <HAL_UART_IRQHandler+0x50e>
 8003e12:	bf00      	nop
 8003e14:	08004137 	.word	0x08004137
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e20:	b29b      	uxth	r3, r3
 8003e22:	1ad3      	subs	r3, r2, r3
 8003e24:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e2c:	b29b      	uxth	r3, r3
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	f000 808b 	beq.w	8003f4a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003e34:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	f000 8086 	beq.w	8003f4a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	330c      	adds	r3, #12
 8003e44:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e48:	e853 3f00 	ldrex	r3, [r3]
 8003e4c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003e4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e50:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003e54:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	330c      	adds	r3, #12
 8003e5e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003e62:	647a      	str	r2, [r7, #68]	; 0x44
 8003e64:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e66:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003e68:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003e6a:	e841 2300 	strex	r3, r2, [r1]
 8003e6e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003e70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d1e3      	bne.n	8003e3e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	3314      	adds	r3, #20
 8003e7c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e80:	e853 3f00 	ldrex	r3, [r3]
 8003e84:	623b      	str	r3, [r7, #32]
   return(result);
 8003e86:	6a3b      	ldr	r3, [r7, #32]
 8003e88:	f023 0301 	bic.w	r3, r3, #1
 8003e8c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	3314      	adds	r3, #20
 8003e96:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003e9a:	633a      	str	r2, [r7, #48]	; 0x30
 8003e9c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e9e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003ea0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ea2:	e841 2300 	strex	r3, r2, [r1]
 8003ea6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003ea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d1e3      	bne.n	8003e76 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2220      	movs	r2, #32
 8003eb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2200      	movs	r2, #0
 8003eba:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	330c      	adds	r3, #12
 8003ec2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ec4:	693b      	ldr	r3, [r7, #16]
 8003ec6:	e853 3f00 	ldrex	r3, [r3]
 8003eca:	60fb      	str	r3, [r7, #12]
   return(result);
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	f023 0310 	bic.w	r3, r3, #16
 8003ed2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	330c      	adds	r3, #12
 8003edc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003ee0:	61fa      	str	r2, [r7, #28]
 8003ee2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ee4:	69b9      	ldr	r1, [r7, #24]
 8003ee6:	69fa      	ldr	r2, [r7, #28]
 8003ee8:	e841 2300 	strex	r3, r2, [r1]
 8003eec:	617b      	str	r3, [r7, #20]
   return(result);
 8003eee:	697b      	ldr	r3, [r7, #20]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d1e3      	bne.n	8003ebc <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003ef4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003ef8:	4619      	mov	r1, r3
 8003efa:	6878      	ldr	r0, [r7, #4]
 8003efc:	f000 f83e 	bl	8003f7c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003f00:	e023      	b.n	8003f4a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003f02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d009      	beq.n	8003f22 <HAL_UART_IRQHandler+0x4ea>
 8003f0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d003      	beq.n	8003f22 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003f1a:	6878      	ldr	r0, [r7, #4]
 8003f1c:	f000 f91f 	bl	800415e <UART_Transmit_IT>
    return;
 8003f20:	e014      	b.n	8003f4c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003f22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d00e      	beq.n	8003f4c <HAL_UART_IRQHandler+0x514>
 8003f2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d008      	beq.n	8003f4c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003f3a:	6878      	ldr	r0, [r7, #4]
 8003f3c:	f000 f95f 	bl	80041fe <UART_EndTransmit_IT>
    return;
 8003f40:	e004      	b.n	8003f4c <HAL_UART_IRQHandler+0x514>
    return;
 8003f42:	bf00      	nop
 8003f44:	e002      	b.n	8003f4c <HAL_UART_IRQHandler+0x514>
      return;
 8003f46:	bf00      	nop
 8003f48:	e000      	b.n	8003f4c <HAL_UART_IRQHandler+0x514>
      return;
 8003f4a:	bf00      	nop
  }
}
 8003f4c:	37e8      	adds	r7, #232	; 0xe8
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd80      	pop	{r7, pc}
 8003f52:	bf00      	nop

08003f54 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003f54:	b480      	push	{r7}
 8003f56:	b083      	sub	sp, #12
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003f5c:	bf00      	nop
 8003f5e:	370c      	adds	r7, #12
 8003f60:	46bd      	mov	sp, r7
 8003f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f66:	4770      	bx	lr

08003f68 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b083      	sub	sp, #12
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003f70:	bf00      	nop
 8003f72:	370c      	adds	r7, #12
 8003f74:	46bd      	mov	sp, r7
 8003f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7a:	4770      	bx	lr

08003f7c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	b083      	sub	sp, #12
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
 8003f84:	460b      	mov	r3, r1
 8003f86:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003f88:	bf00      	nop
 8003f8a:	370c      	adds	r7, #12
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f92:	4770      	bx	lr

08003f94 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b090      	sub	sp, #64	; 0x40
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	60f8      	str	r0, [r7, #12]
 8003f9c:	60b9      	str	r1, [r7, #8]
 8003f9e:	603b      	str	r3, [r7, #0]
 8003fa0:	4613      	mov	r3, r2
 8003fa2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fa4:	e050      	b.n	8004048 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fa6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003fa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fac:	d04c      	beq.n	8004048 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003fae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d007      	beq.n	8003fc4 <UART_WaitOnFlagUntilTimeout+0x30>
 8003fb4:	f7fe fbda 	bl	800276c <HAL_GetTick>
 8003fb8:	4602      	mov	r2, r0
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	1ad3      	subs	r3, r2, r3
 8003fbe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003fc0:	429a      	cmp	r2, r3
 8003fc2:	d241      	bcs.n	8004048 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	330c      	adds	r3, #12
 8003fca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fce:	e853 3f00 	ldrex	r3, [r3]
 8003fd2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003fda:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	330c      	adds	r3, #12
 8003fe2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003fe4:	637a      	str	r2, [r7, #52]	; 0x34
 8003fe6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fe8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003fea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003fec:	e841 2300 	strex	r3, r2, [r1]
 8003ff0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003ff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d1e5      	bne.n	8003fc4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	3314      	adds	r3, #20
 8003ffe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004000:	697b      	ldr	r3, [r7, #20]
 8004002:	e853 3f00 	ldrex	r3, [r3]
 8004006:	613b      	str	r3, [r7, #16]
   return(result);
 8004008:	693b      	ldr	r3, [r7, #16]
 800400a:	f023 0301 	bic.w	r3, r3, #1
 800400e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	3314      	adds	r3, #20
 8004016:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004018:	623a      	str	r2, [r7, #32]
 800401a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800401c:	69f9      	ldr	r1, [r7, #28]
 800401e:	6a3a      	ldr	r2, [r7, #32]
 8004020:	e841 2300 	strex	r3, r2, [r1]
 8004024:	61bb      	str	r3, [r7, #24]
   return(result);
 8004026:	69bb      	ldr	r3, [r7, #24]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d1e5      	bne.n	8003ff8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	2220      	movs	r2, #32
 8004030:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	2220      	movs	r2, #32
 8004038:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	2200      	movs	r2, #0
 8004040:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004044:	2303      	movs	r3, #3
 8004046:	e00f      	b.n	8004068 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	681a      	ldr	r2, [r3, #0]
 800404e:	68bb      	ldr	r3, [r7, #8]
 8004050:	4013      	ands	r3, r2
 8004052:	68ba      	ldr	r2, [r7, #8]
 8004054:	429a      	cmp	r2, r3
 8004056:	bf0c      	ite	eq
 8004058:	2301      	moveq	r3, #1
 800405a:	2300      	movne	r3, #0
 800405c:	b2db      	uxtb	r3, r3
 800405e:	461a      	mov	r2, r3
 8004060:	79fb      	ldrb	r3, [r7, #7]
 8004062:	429a      	cmp	r2, r3
 8004064:	d09f      	beq.n	8003fa6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004066:	2300      	movs	r3, #0
}
 8004068:	4618      	mov	r0, r3
 800406a:	3740      	adds	r7, #64	; 0x40
 800406c:	46bd      	mov	sp, r7
 800406e:	bd80      	pop	{r7, pc}

08004070 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004070:	b480      	push	{r7}
 8004072:	b095      	sub	sp, #84	; 0x54
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	330c      	adds	r3, #12
 800407e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004080:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004082:	e853 3f00 	ldrex	r3, [r3]
 8004086:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800408a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800408e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	330c      	adds	r3, #12
 8004096:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004098:	643a      	str	r2, [r7, #64]	; 0x40
 800409a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800409c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800409e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80040a0:	e841 2300 	strex	r3, r2, [r1]
 80040a4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80040a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d1e5      	bne.n	8004078 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	3314      	adds	r3, #20
 80040b2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040b4:	6a3b      	ldr	r3, [r7, #32]
 80040b6:	e853 3f00 	ldrex	r3, [r3]
 80040ba:	61fb      	str	r3, [r7, #28]
   return(result);
 80040bc:	69fb      	ldr	r3, [r7, #28]
 80040be:	f023 0301 	bic.w	r3, r3, #1
 80040c2:	64bb      	str	r3, [r7, #72]	; 0x48
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	3314      	adds	r3, #20
 80040ca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80040cc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80040ce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80040d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80040d4:	e841 2300 	strex	r3, r2, [r1]
 80040d8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80040da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d1e5      	bne.n	80040ac <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040e4:	2b01      	cmp	r3, #1
 80040e6:	d119      	bne.n	800411c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	330c      	adds	r3, #12
 80040ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	e853 3f00 	ldrex	r3, [r3]
 80040f6:	60bb      	str	r3, [r7, #8]
   return(result);
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	f023 0310 	bic.w	r3, r3, #16
 80040fe:	647b      	str	r3, [r7, #68]	; 0x44
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	330c      	adds	r3, #12
 8004106:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004108:	61ba      	str	r2, [r7, #24]
 800410a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800410c:	6979      	ldr	r1, [r7, #20]
 800410e:	69ba      	ldr	r2, [r7, #24]
 8004110:	e841 2300 	strex	r3, r2, [r1]
 8004114:	613b      	str	r3, [r7, #16]
   return(result);
 8004116:	693b      	ldr	r3, [r7, #16]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d1e5      	bne.n	80040e8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2220      	movs	r2, #32
 8004120:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2200      	movs	r2, #0
 8004128:	631a      	str	r2, [r3, #48]	; 0x30
}
 800412a:	bf00      	nop
 800412c:	3754      	adds	r7, #84	; 0x54
 800412e:	46bd      	mov	sp, r7
 8004130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004134:	4770      	bx	lr

08004136 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004136:	b580      	push	{r7, lr}
 8004138:	b084      	sub	sp, #16
 800413a:	af00      	add	r7, sp, #0
 800413c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004142:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	2200      	movs	r2, #0
 8004148:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	2200      	movs	r2, #0
 800414e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004150:	68f8      	ldr	r0, [r7, #12]
 8004152:	f7ff ff09 	bl	8003f68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004156:	bf00      	nop
 8004158:	3710      	adds	r7, #16
 800415a:	46bd      	mov	sp, r7
 800415c:	bd80      	pop	{r7, pc}

0800415e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800415e:	b480      	push	{r7}
 8004160:	b085      	sub	sp, #20
 8004162:	af00      	add	r7, sp, #0
 8004164:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800416c:	b2db      	uxtb	r3, r3
 800416e:	2b21      	cmp	r3, #33	; 0x21
 8004170:	d13e      	bne.n	80041f0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	689b      	ldr	r3, [r3, #8]
 8004176:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800417a:	d114      	bne.n	80041a6 <UART_Transmit_IT+0x48>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	691b      	ldr	r3, [r3, #16]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d110      	bne.n	80041a6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6a1b      	ldr	r3, [r3, #32]
 8004188:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	881b      	ldrh	r3, [r3, #0]
 800418e:	461a      	mov	r2, r3
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004198:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6a1b      	ldr	r3, [r3, #32]
 800419e:	1c9a      	adds	r2, r3, #2
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	621a      	str	r2, [r3, #32]
 80041a4:	e008      	b.n	80041b8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6a1b      	ldr	r3, [r3, #32]
 80041aa:	1c59      	adds	r1, r3, #1
 80041ac:	687a      	ldr	r2, [r7, #4]
 80041ae:	6211      	str	r1, [r2, #32]
 80041b0:	781a      	ldrb	r2, [r3, #0]
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80041bc:	b29b      	uxth	r3, r3
 80041be:	3b01      	subs	r3, #1
 80041c0:	b29b      	uxth	r3, r3
 80041c2:	687a      	ldr	r2, [r7, #4]
 80041c4:	4619      	mov	r1, r3
 80041c6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d10f      	bne.n	80041ec <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	68da      	ldr	r2, [r3, #12]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80041da:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	68da      	ldr	r2, [r3, #12]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80041ea:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80041ec:	2300      	movs	r3, #0
 80041ee:	e000      	b.n	80041f2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80041f0:	2302      	movs	r3, #2
  }
}
 80041f2:	4618      	mov	r0, r3
 80041f4:	3714      	adds	r7, #20
 80041f6:	46bd      	mov	sp, r7
 80041f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fc:	4770      	bx	lr

080041fe <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80041fe:	b580      	push	{r7, lr}
 8004200:	b082      	sub	sp, #8
 8004202:	af00      	add	r7, sp, #0
 8004204:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	68da      	ldr	r2, [r3, #12]
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004214:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2220      	movs	r2, #32
 800421a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800421e:	6878      	ldr	r0, [r7, #4]
 8004220:	f7ff fe98 	bl	8003f54 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004224:	2300      	movs	r3, #0
}
 8004226:	4618      	mov	r0, r3
 8004228:	3708      	adds	r7, #8
 800422a:	46bd      	mov	sp, r7
 800422c:	bd80      	pop	{r7, pc}

0800422e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800422e:	b580      	push	{r7, lr}
 8004230:	b08c      	sub	sp, #48	; 0x30
 8004232:	af00      	add	r7, sp, #0
 8004234:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800423c:	b2db      	uxtb	r3, r3
 800423e:	2b22      	cmp	r3, #34	; 0x22
 8004240:	f040 80ab 	bne.w	800439a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	689b      	ldr	r3, [r3, #8]
 8004248:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800424c:	d117      	bne.n	800427e <UART_Receive_IT+0x50>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	691b      	ldr	r3, [r3, #16]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d113      	bne.n	800427e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004256:	2300      	movs	r3, #0
 8004258:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800425e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	b29b      	uxth	r3, r3
 8004268:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800426c:	b29a      	uxth	r2, r3
 800426e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004270:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004276:	1c9a      	adds	r2, r3, #2
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	629a      	str	r2, [r3, #40]	; 0x28
 800427c:	e026      	b.n	80042cc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004282:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004284:	2300      	movs	r3, #0
 8004286:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	689b      	ldr	r3, [r3, #8]
 800428c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004290:	d007      	beq.n	80042a2 <UART_Receive_IT+0x74>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	689b      	ldr	r3, [r3, #8]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d10a      	bne.n	80042b0 <UART_Receive_IT+0x82>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	691b      	ldr	r3, [r3, #16]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d106      	bne.n	80042b0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	b2da      	uxtb	r2, r3
 80042aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042ac:	701a      	strb	r2, [r3, #0]
 80042ae:	e008      	b.n	80042c2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	b2db      	uxtb	r3, r3
 80042b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80042bc:	b2da      	uxtb	r2, r3
 80042be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042c0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042c6:	1c5a      	adds	r2, r3, #1
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80042d0:	b29b      	uxth	r3, r3
 80042d2:	3b01      	subs	r3, #1
 80042d4:	b29b      	uxth	r3, r3
 80042d6:	687a      	ldr	r2, [r7, #4]
 80042d8:	4619      	mov	r1, r3
 80042da:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d15a      	bne.n	8004396 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	68da      	ldr	r2, [r3, #12]
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f022 0220 	bic.w	r2, r2, #32
 80042ee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	68da      	ldr	r2, [r3, #12]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80042fe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	695a      	ldr	r2, [r3, #20]
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f022 0201 	bic.w	r2, r2, #1
 800430e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2220      	movs	r2, #32
 8004314:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800431c:	2b01      	cmp	r3, #1
 800431e:	d135      	bne.n	800438c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2200      	movs	r2, #0
 8004324:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	330c      	adds	r3, #12
 800432c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800432e:	697b      	ldr	r3, [r7, #20]
 8004330:	e853 3f00 	ldrex	r3, [r3]
 8004334:	613b      	str	r3, [r7, #16]
   return(result);
 8004336:	693b      	ldr	r3, [r7, #16]
 8004338:	f023 0310 	bic.w	r3, r3, #16
 800433c:	627b      	str	r3, [r7, #36]	; 0x24
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	330c      	adds	r3, #12
 8004344:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004346:	623a      	str	r2, [r7, #32]
 8004348:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800434a:	69f9      	ldr	r1, [r7, #28]
 800434c:	6a3a      	ldr	r2, [r7, #32]
 800434e:	e841 2300 	strex	r3, r2, [r1]
 8004352:	61bb      	str	r3, [r7, #24]
   return(result);
 8004354:	69bb      	ldr	r3, [r7, #24]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d1e5      	bne.n	8004326 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f003 0310 	and.w	r3, r3, #16
 8004364:	2b10      	cmp	r3, #16
 8004366:	d10a      	bne.n	800437e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004368:	2300      	movs	r3, #0
 800436a:	60fb      	str	r3, [r7, #12]
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	60fb      	str	r3, [r7, #12]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	685b      	ldr	r3, [r3, #4]
 800437a:	60fb      	str	r3, [r7, #12]
 800437c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004382:	4619      	mov	r1, r3
 8004384:	6878      	ldr	r0, [r7, #4]
 8004386:	f7ff fdf9 	bl	8003f7c <HAL_UARTEx_RxEventCallback>
 800438a:	e002      	b.n	8004392 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800438c:	6878      	ldr	r0, [r7, #4]
 800438e:	f7fc fd03 	bl	8000d98 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004392:	2300      	movs	r3, #0
 8004394:	e002      	b.n	800439c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004396:	2300      	movs	r3, #0
 8004398:	e000      	b.n	800439c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800439a:	2302      	movs	r3, #2
  }
}
 800439c:	4618      	mov	r0, r3
 800439e:	3730      	adds	r7, #48	; 0x30
 80043a0:	46bd      	mov	sp, r7
 80043a2:	bd80      	pop	{r7, pc}

080043a4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80043a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80043a8:	b0c0      	sub	sp, #256	; 0x100
 80043aa:	af00      	add	r7, sp, #0
 80043ac:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80043b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	691b      	ldr	r3, [r3, #16]
 80043b8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80043bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043c0:	68d9      	ldr	r1, [r3, #12]
 80043c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043c6:	681a      	ldr	r2, [r3, #0]
 80043c8:	ea40 0301 	orr.w	r3, r0, r1
 80043cc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80043ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043d2:	689a      	ldr	r2, [r3, #8]
 80043d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043d8:	691b      	ldr	r3, [r3, #16]
 80043da:	431a      	orrs	r2, r3
 80043dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043e0:	695b      	ldr	r3, [r3, #20]
 80043e2:	431a      	orrs	r2, r3
 80043e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043e8:	69db      	ldr	r3, [r3, #28]
 80043ea:	4313      	orrs	r3, r2
 80043ec:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80043f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	68db      	ldr	r3, [r3, #12]
 80043f8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80043fc:	f021 010c 	bic.w	r1, r1, #12
 8004400:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004404:	681a      	ldr	r2, [r3, #0]
 8004406:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800440a:	430b      	orrs	r3, r1
 800440c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800440e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	695b      	ldr	r3, [r3, #20]
 8004416:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800441a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800441e:	6999      	ldr	r1, [r3, #24]
 8004420:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004424:	681a      	ldr	r2, [r3, #0]
 8004426:	ea40 0301 	orr.w	r3, r0, r1
 800442a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800442c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004430:	681a      	ldr	r2, [r3, #0]
 8004432:	4b8f      	ldr	r3, [pc, #572]	; (8004670 <UART_SetConfig+0x2cc>)
 8004434:	429a      	cmp	r2, r3
 8004436:	d005      	beq.n	8004444 <UART_SetConfig+0xa0>
 8004438:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800443c:	681a      	ldr	r2, [r3, #0]
 800443e:	4b8d      	ldr	r3, [pc, #564]	; (8004674 <UART_SetConfig+0x2d0>)
 8004440:	429a      	cmp	r2, r3
 8004442:	d104      	bne.n	800444e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004444:	f7ff f962 	bl	800370c <HAL_RCC_GetPCLK2Freq>
 8004448:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800444c:	e003      	b.n	8004456 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800444e:	f7ff f949 	bl	80036e4 <HAL_RCC_GetPCLK1Freq>
 8004452:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004456:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800445a:	69db      	ldr	r3, [r3, #28]
 800445c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004460:	f040 810c 	bne.w	800467c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004464:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004468:	2200      	movs	r2, #0
 800446a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800446e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004472:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004476:	4622      	mov	r2, r4
 8004478:	462b      	mov	r3, r5
 800447a:	1891      	adds	r1, r2, r2
 800447c:	65b9      	str	r1, [r7, #88]	; 0x58
 800447e:	415b      	adcs	r3, r3
 8004480:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004482:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004486:	4621      	mov	r1, r4
 8004488:	eb12 0801 	adds.w	r8, r2, r1
 800448c:	4629      	mov	r1, r5
 800448e:	eb43 0901 	adc.w	r9, r3, r1
 8004492:	f04f 0200 	mov.w	r2, #0
 8004496:	f04f 0300 	mov.w	r3, #0
 800449a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800449e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80044a2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80044a6:	4690      	mov	r8, r2
 80044a8:	4699      	mov	r9, r3
 80044aa:	4623      	mov	r3, r4
 80044ac:	eb18 0303 	adds.w	r3, r8, r3
 80044b0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80044b4:	462b      	mov	r3, r5
 80044b6:	eb49 0303 	adc.w	r3, r9, r3
 80044ba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80044be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044c2:	685b      	ldr	r3, [r3, #4]
 80044c4:	2200      	movs	r2, #0
 80044c6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80044ca:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80044ce:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80044d2:	460b      	mov	r3, r1
 80044d4:	18db      	adds	r3, r3, r3
 80044d6:	653b      	str	r3, [r7, #80]	; 0x50
 80044d8:	4613      	mov	r3, r2
 80044da:	eb42 0303 	adc.w	r3, r2, r3
 80044de:	657b      	str	r3, [r7, #84]	; 0x54
 80044e0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80044e4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80044e8:	f7fc fa10 	bl	800090c <__aeabi_uldivmod>
 80044ec:	4602      	mov	r2, r0
 80044ee:	460b      	mov	r3, r1
 80044f0:	4b61      	ldr	r3, [pc, #388]	; (8004678 <UART_SetConfig+0x2d4>)
 80044f2:	fba3 2302 	umull	r2, r3, r3, r2
 80044f6:	095b      	lsrs	r3, r3, #5
 80044f8:	011c      	lsls	r4, r3, #4
 80044fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80044fe:	2200      	movs	r2, #0
 8004500:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004504:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004508:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800450c:	4642      	mov	r2, r8
 800450e:	464b      	mov	r3, r9
 8004510:	1891      	adds	r1, r2, r2
 8004512:	64b9      	str	r1, [r7, #72]	; 0x48
 8004514:	415b      	adcs	r3, r3
 8004516:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004518:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800451c:	4641      	mov	r1, r8
 800451e:	eb12 0a01 	adds.w	sl, r2, r1
 8004522:	4649      	mov	r1, r9
 8004524:	eb43 0b01 	adc.w	fp, r3, r1
 8004528:	f04f 0200 	mov.w	r2, #0
 800452c:	f04f 0300 	mov.w	r3, #0
 8004530:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004534:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004538:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800453c:	4692      	mov	sl, r2
 800453e:	469b      	mov	fp, r3
 8004540:	4643      	mov	r3, r8
 8004542:	eb1a 0303 	adds.w	r3, sl, r3
 8004546:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800454a:	464b      	mov	r3, r9
 800454c:	eb4b 0303 	adc.w	r3, fp, r3
 8004550:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004554:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	2200      	movs	r2, #0
 800455c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004560:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004564:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004568:	460b      	mov	r3, r1
 800456a:	18db      	adds	r3, r3, r3
 800456c:	643b      	str	r3, [r7, #64]	; 0x40
 800456e:	4613      	mov	r3, r2
 8004570:	eb42 0303 	adc.w	r3, r2, r3
 8004574:	647b      	str	r3, [r7, #68]	; 0x44
 8004576:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800457a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800457e:	f7fc f9c5 	bl	800090c <__aeabi_uldivmod>
 8004582:	4602      	mov	r2, r0
 8004584:	460b      	mov	r3, r1
 8004586:	4611      	mov	r1, r2
 8004588:	4b3b      	ldr	r3, [pc, #236]	; (8004678 <UART_SetConfig+0x2d4>)
 800458a:	fba3 2301 	umull	r2, r3, r3, r1
 800458e:	095b      	lsrs	r3, r3, #5
 8004590:	2264      	movs	r2, #100	; 0x64
 8004592:	fb02 f303 	mul.w	r3, r2, r3
 8004596:	1acb      	subs	r3, r1, r3
 8004598:	00db      	lsls	r3, r3, #3
 800459a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800459e:	4b36      	ldr	r3, [pc, #216]	; (8004678 <UART_SetConfig+0x2d4>)
 80045a0:	fba3 2302 	umull	r2, r3, r3, r2
 80045a4:	095b      	lsrs	r3, r3, #5
 80045a6:	005b      	lsls	r3, r3, #1
 80045a8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80045ac:	441c      	add	r4, r3
 80045ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80045b2:	2200      	movs	r2, #0
 80045b4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80045b8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80045bc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80045c0:	4642      	mov	r2, r8
 80045c2:	464b      	mov	r3, r9
 80045c4:	1891      	adds	r1, r2, r2
 80045c6:	63b9      	str	r1, [r7, #56]	; 0x38
 80045c8:	415b      	adcs	r3, r3
 80045ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80045cc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80045d0:	4641      	mov	r1, r8
 80045d2:	1851      	adds	r1, r2, r1
 80045d4:	6339      	str	r1, [r7, #48]	; 0x30
 80045d6:	4649      	mov	r1, r9
 80045d8:	414b      	adcs	r3, r1
 80045da:	637b      	str	r3, [r7, #52]	; 0x34
 80045dc:	f04f 0200 	mov.w	r2, #0
 80045e0:	f04f 0300 	mov.w	r3, #0
 80045e4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80045e8:	4659      	mov	r1, fp
 80045ea:	00cb      	lsls	r3, r1, #3
 80045ec:	4651      	mov	r1, sl
 80045ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80045f2:	4651      	mov	r1, sl
 80045f4:	00ca      	lsls	r2, r1, #3
 80045f6:	4610      	mov	r0, r2
 80045f8:	4619      	mov	r1, r3
 80045fa:	4603      	mov	r3, r0
 80045fc:	4642      	mov	r2, r8
 80045fe:	189b      	adds	r3, r3, r2
 8004600:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004604:	464b      	mov	r3, r9
 8004606:	460a      	mov	r2, r1
 8004608:	eb42 0303 	adc.w	r3, r2, r3
 800460c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004610:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	2200      	movs	r2, #0
 8004618:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800461c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004620:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004624:	460b      	mov	r3, r1
 8004626:	18db      	adds	r3, r3, r3
 8004628:	62bb      	str	r3, [r7, #40]	; 0x28
 800462a:	4613      	mov	r3, r2
 800462c:	eb42 0303 	adc.w	r3, r2, r3
 8004630:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004632:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004636:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800463a:	f7fc f967 	bl	800090c <__aeabi_uldivmod>
 800463e:	4602      	mov	r2, r0
 8004640:	460b      	mov	r3, r1
 8004642:	4b0d      	ldr	r3, [pc, #52]	; (8004678 <UART_SetConfig+0x2d4>)
 8004644:	fba3 1302 	umull	r1, r3, r3, r2
 8004648:	095b      	lsrs	r3, r3, #5
 800464a:	2164      	movs	r1, #100	; 0x64
 800464c:	fb01 f303 	mul.w	r3, r1, r3
 8004650:	1ad3      	subs	r3, r2, r3
 8004652:	00db      	lsls	r3, r3, #3
 8004654:	3332      	adds	r3, #50	; 0x32
 8004656:	4a08      	ldr	r2, [pc, #32]	; (8004678 <UART_SetConfig+0x2d4>)
 8004658:	fba2 2303 	umull	r2, r3, r2, r3
 800465c:	095b      	lsrs	r3, r3, #5
 800465e:	f003 0207 	and.w	r2, r3, #7
 8004662:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4422      	add	r2, r4
 800466a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800466c:	e106      	b.n	800487c <UART_SetConfig+0x4d8>
 800466e:	bf00      	nop
 8004670:	40011000 	.word	0x40011000
 8004674:	40011400 	.word	0x40011400
 8004678:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800467c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004680:	2200      	movs	r2, #0
 8004682:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004686:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800468a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800468e:	4642      	mov	r2, r8
 8004690:	464b      	mov	r3, r9
 8004692:	1891      	adds	r1, r2, r2
 8004694:	6239      	str	r1, [r7, #32]
 8004696:	415b      	adcs	r3, r3
 8004698:	627b      	str	r3, [r7, #36]	; 0x24
 800469a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800469e:	4641      	mov	r1, r8
 80046a0:	1854      	adds	r4, r2, r1
 80046a2:	4649      	mov	r1, r9
 80046a4:	eb43 0501 	adc.w	r5, r3, r1
 80046a8:	f04f 0200 	mov.w	r2, #0
 80046ac:	f04f 0300 	mov.w	r3, #0
 80046b0:	00eb      	lsls	r3, r5, #3
 80046b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80046b6:	00e2      	lsls	r2, r4, #3
 80046b8:	4614      	mov	r4, r2
 80046ba:	461d      	mov	r5, r3
 80046bc:	4643      	mov	r3, r8
 80046be:	18e3      	adds	r3, r4, r3
 80046c0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80046c4:	464b      	mov	r3, r9
 80046c6:	eb45 0303 	adc.w	r3, r5, r3
 80046ca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80046ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046d2:	685b      	ldr	r3, [r3, #4]
 80046d4:	2200      	movs	r2, #0
 80046d6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80046da:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80046de:	f04f 0200 	mov.w	r2, #0
 80046e2:	f04f 0300 	mov.w	r3, #0
 80046e6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80046ea:	4629      	mov	r1, r5
 80046ec:	008b      	lsls	r3, r1, #2
 80046ee:	4621      	mov	r1, r4
 80046f0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80046f4:	4621      	mov	r1, r4
 80046f6:	008a      	lsls	r2, r1, #2
 80046f8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80046fc:	f7fc f906 	bl	800090c <__aeabi_uldivmod>
 8004700:	4602      	mov	r2, r0
 8004702:	460b      	mov	r3, r1
 8004704:	4b60      	ldr	r3, [pc, #384]	; (8004888 <UART_SetConfig+0x4e4>)
 8004706:	fba3 2302 	umull	r2, r3, r3, r2
 800470a:	095b      	lsrs	r3, r3, #5
 800470c:	011c      	lsls	r4, r3, #4
 800470e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004712:	2200      	movs	r2, #0
 8004714:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004718:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800471c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004720:	4642      	mov	r2, r8
 8004722:	464b      	mov	r3, r9
 8004724:	1891      	adds	r1, r2, r2
 8004726:	61b9      	str	r1, [r7, #24]
 8004728:	415b      	adcs	r3, r3
 800472a:	61fb      	str	r3, [r7, #28]
 800472c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004730:	4641      	mov	r1, r8
 8004732:	1851      	adds	r1, r2, r1
 8004734:	6139      	str	r1, [r7, #16]
 8004736:	4649      	mov	r1, r9
 8004738:	414b      	adcs	r3, r1
 800473a:	617b      	str	r3, [r7, #20]
 800473c:	f04f 0200 	mov.w	r2, #0
 8004740:	f04f 0300 	mov.w	r3, #0
 8004744:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004748:	4659      	mov	r1, fp
 800474a:	00cb      	lsls	r3, r1, #3
 800474c:	4651      	mov	r1, sl
 800474e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004752:	4651      	mov	r1, sl
 8004754:	00ca      	lsls	r2, r1, #3
 8004756:	4610      	mov	r0, r2
 8004758:	4619      	mov	r1, r3
 800475a:	4603      	mov	r3, r0
 800475c:	4642      	mov	r2, r8
 800475e:	189b      	adds	r3, r3, r2
 8004760:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004764:	464b      	mov	r3, r9
 8004766:	460a      	mov	r2, r1
 8004768:	eb42 0303 	adc.w	r3, r2, r3
 800476c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004770:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	2200      	movs	r2, #0
 8004778:	67bb      	str	r3, [r7, #120]	; 0x78
 800477a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800477c:	f04f 0200 	mov.w	r2, #0
 8004780:	f04f 0300 	mov.w	r3, #0
 8004784:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004788:	4649      	mov	r1, r9
 800478a:	008b      	lsls	r3, r1, #2
 800478c:	4641      	mov	r1, r8
 800478e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004792:	4641      	mov	r1, r8
 8004794:	008a      	lsls	r2, r1, #2
 8004796:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800479a:	f7fc f8b7 	bl	800090c <__aeabi_uldivmod>
 800479e:	4602      	mov	r2, r0
 80047a0:	460b      	mov	r3, r1
 80047a2:	4611      	mov	r1, r2
 80047a4:	4b38      	ldr	r3, [pc, #224]	; (8004888 <UART_SetConfig+0x4e4>)
 80047a6:	fba3 2301 	umull	r2, r3, r3, r1
 80047aa:	095b      	lsrs	r3, r3, #5
 80047ac:	2264      	movs	r2, #100	; 0x64
 80047ae:	fb02 f303 	mul.w	r3, r2, r3
 80047b2:	1acb      	subs	r3, r1, r3
 80047b4:	011b      	lsls	r3, r3, #4
 80047b6:	3332      	adds	r3, #50	; 0x32
 80047b8:	4a33      	ldr	r2, [pc, #204]	; (8004888 <UART_SetConfig+0x4e4>)
 80047ba:	fba2 2303 	umull	r2, r3, r2, r3
 80047be:	095b      	lsrs	r3, r3, #5
 80047c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80047c4:	441c      	add	r4, r3
 80047c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80047ca:	2200      	movs	r2, #0
 80047cc:	673b      	str	r3, [r7, #112]	; 0x70
 80047ce:	677a      	str	r2, [r7, #116]	; 0x74
 80047d0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80047d4:	4642      	mov	r2, r8
 80047d6:	464b      	mov	r3, r9
 80047d8:	1891      	adds	r1, r2, r2
 80047da:	60b9      	str	r1, [r7, #8]
 80047dc:	415b      	adcs	r3, r3
 80047de:	60fb      	str	r3, [r7, #12]
 80047e0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80047e4:	4641      	mov	r1, r8
 80047e6:	1851      	adds	r1, r2, r1
 80047e8:	6039      	str	r1, [r7, #0]
 80047ea:	4649      	mov	r1, r9
 80047ec:	414b      	adcs	r3, r1
 80047ee:	607b      	str	r3, [r7, #4]
 80047f0:	f04f 0200 	mov.w	r2, #0
 80047f4:	f04f 0300 	mov.w	r3, #0
 80047f8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80047fc:	4659      	mov	r1, fp
 80047fe:	00cb      	lsls	r3, r1, #3
 8004800:	4651      	mov	r1, sl
 8004802:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004806:	4651      	mov	r1, sl
 8004808:	00ca      	lsls	r2, r1, #3
 800480a:	4610      	mov	r0, r2
 800480c:	4619      	mov	r1, r3
 800480e:	4603      	mov	r3, r0
 8004810:	4642      	mov	r2, r8
 8004812:	189b      	adds	r3, r3, r2
 8004814:	66bb      	str	r3, [r7, #104]	; 0x68
 8004816:	464b      	mov	r3, r9
 8004818:	460a      	mov	r2, r1
 800481a:	eb42 0303 	adc.w	r3, r2, r3
 800481e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004820:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004824:	685b      	ldr	r3, [r3, #4]
 8004826:	2200      	movs	r2, #0
 8004828:	663b      	str	r3, [r7, #96]	; 0x60
 800482a:	667a      	str	r2, [r7, #100]	; 0x64
 800482c:	f04f 0200 	mov.w	r2, #0
 8004830:	f04f 0300 	mov.w	r3, #0
 8004834:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004838:	4649      	mov	r1, r9
 800483a:	008b      	lsls	r3, r1, #2
 800483c:	4641      	mov	r1, r8
 800483e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004842:	4641      	mov	r1, r8
 8004844:	008a      	lsls	r2, r1, #2
 8004846:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800484a:	f7fc f85f 	bl	800090c <__aeabi_uldivmod>
 800484e:	4602      	mov	r2, r0
 8004850:	460b      	mov	r3, r1
 8004852:	4b0d      	ldr	r3, [pc, #52]	; (8004888 <UART_SetConfig+0x4e4>)
 8004854:	fba3 1302 	umull	r1, r3, r3, r2
 8004858:	095b      	lsrs	r3, r3, #5
 800485a:	2164      	movs	r1, #100	; 0x64
 800485c:	fb01 f303 	mul.w	r3, r1, r3
 8004860:	1ad3      	subs	r3, r2, r3
 8004862:	011b      	lsls	r3, r3, #4
 8004864:	3332      	adds	r3, #50	; 0x32
 8004866:	4a08      	ldr	r2, [pc, #32]	; (8004888 <UART_SetConfig+0x4e4>)
 8004868:	fba2 2303 	umull	r2, r3, r2, r3
 800486c:	095b      	lsrs	r3, r3, #5
 800486e:	f003 020f 	and.w	r2, r3, #15
 8004872:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4422      	add	r2, r4
 800487a:	609a      	str	r2, [r3, #8]
}
 800487c:	bf00      	nop
 800487e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004882:	46bd      	mov	sp, r7
 8004884:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004888:	51eb851f 	.word	0x51eb851f

0800488c <std>:
 800488c:	2300      	movs	r3, #0
 800488e:	b510      	push	{r4, lr}
 8004890:	4604      	mov	r4, r0
 8004892:	e9c0 3300 	strd	r3, r3, [r0]
 8004896:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800489a:	6083      	str	r3, [r0, #8]
 800489c:	8181      	strh	r1, [r0, #12]
 800489e:	6643      	str	r3, [r0, #100]	; 0x64
 80048a0:	81c2      	strh	r2, [r0, #14]
 80048a2:	6183      	str	r3, [r0, #24]
 80048a4:	4619      	mov	r1, r3
 80048a6:	2208      	movs	r2, #8
 80048a8:	305c      	adds	r0, #92	; 0x5c
 80048aa:	f000 fa05 	bl	8004cb8 <memset>
 80048ae:	4b0d      	ldr	r3, [pc, #52]	; (80048e4 <std+0x58>)
 80048b0:	6263      	str	r3, [r4, #36]	; 0x24
 80048b2:	4b0d      	ldr	r3, [pc, #52]	; (80048e8 <std+0x5c>)
 80048b4:	62a3      	str	r3, [r4, #40]	; 0x28
 80048b6:	4b0d      	ldr	r3, [pc, #52]	; (80048ec <std+0x60>)
 80048b8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80048ba:	4b0d      	ldr	r3, [pc, #52]	; (80048f0 <std+0x64>)
 80048bc:	6323      	str	r3, [r4, #48]	; 0x30
 80048be:	4b0d      	ldr	r3, [pc, #52]	; (80048f4 <std+0x68>)
 80048c0:	6224      	str	r4, [r4, #32]
 80048c2:	429c      	cmp	r4, r3
 80048c4:	d006      	beq.n	80048d4 <std+0x48>
 80048c6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80048ca:	4294      	cmp	r4, r2
 80048cc:	d002      	beq.n	80048d4 <std+0x48>
 80048ce:	33d0      	adds	r3, #208	; 0xd0
 80048d0:	429c      	cmp	r4, r3
 80048d2:	d105      	bne.n	80048e0 <std+0x54>
 80048d4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80048d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80048dc:	f000 ba64 	b.w	8004da8 <__retarget_lock_init_recursive>
 80048e0:	bd10      	pop	{r4, pc}
 80048e2:	bf00      	nop
 80048e4:	08004b09 	.word	0x08004b09
 80048e8:	08004b2b 	.word	0x08004b2b
 80048ec:	08004b63 	.word	0x08004b63
 80048f0:	08004b87 	.word	0x08004b87
 80048f4:	200001d4 	.word	0x200001d4

080048f8 <stdio_exit_handler>:
 80048f8:	4a02      	ldr	r2, [pc, #8]	; (8004904 <stdio_exit_handler+0xc>)
 80048fa:	4903      	ldr	r1, [pc, #12]	; (8004908 <stdio_exit_handler+0x10>)
 80048fc:	4803      	ldr	r0, [pc, #12]	; (800490c <stdio_exit_handler+0x14>)
 80048fe:	f000 b869 	b.w	80049d4 <_fwalk_sglue>
 8004902:	bf00      	nop
 8004904:	200000dc 	.word	0x200000dc
 8004908:	0800567d 	.word	0x0800567d
 800490c:	200000e8 	.word	0x200000e8

08004910 <cleanup_stdio>:
 8004910:	6841      	ldr	r1, [r0, #4]
 8004912:	4b0c      	ldr	r3, [pc, #48]	; (8004944 <cleanup_stdio+0x34>)
 8004914:	4299      	cmp	r1, r3
 8004916:	b510      	push	{r4, lr}
 8004918:	4604      	mov	r4, r0
 800491a:	d001      	beq.n	8004920 <cleanup_stdio+0x10>
 800491c:	f000 feae 	bl	800567c <_fflush_r>
 8004920:	68a1      	ldr	r1, [r4, #8]
 8004922:	4b09      	ldr	r3, [pc, #36]	; (8004948 <cleanup_stdio+0x38>)
 8004924:	4299      	cmp	r1, r3
 8004926:	d002      	beq.n	800492e <cleanup_stdio+0x1e>
 8004928:	4620      	mov	r0, r4
 800492a:	f000 fea7 	bl	800567c <_fflush_r>
 800492e:	68e1      	ldr	r1, [r4, #12]
 8004930:	4b06      	ldr	r3, [pc, #24]	; (800494c <cleanup_stdio+0x3c>)
 8004932:	4299      	cmp	r1, r3
 8004934:	d004      	beq.n	8004940 <cleanup_stdio+0x30>
 8004936:	4620      	mov	r0, r4
 8004938:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800493c:	f000 be9e 	b.w	800567c <_fflush_r>
 8004940:	bd10      	pop	{r4, pc}
 8004942:	bf00      	nop
 8004944:	200001d4 	.word	0x200001d4
 8004948:	2000023c 	.word	0x2000023c
 800494c:	200002a4 	.word	0x200002a4

08004950 <global_stdio_init.part.0>:
 8004950:	b510      	push	{r4, lr}
 8004952:	4b0b      	ldr	r3, [pc, #44]	; (8004980 <global_stdio_init.part.0+0x30>)
 8004954:	4c0b      	ldr	r4, [pc, #44]	; (8004984 <global_stdio_init.part.0+0x34>)
 8004956:	4a0c      	ldr	r2, [pc, #48]	; (8004988 <global_stdio_init.part.0+0x38>)
 8004958:	601a      	str	r2, [r3, #0]
 800495a:	4620      	mov	r0, r4
 800495c:	2200      	movs	r2, #0
 800495e:	2104      	movs	r1, #4
 8004960:	f7ff ff94 	bl	800488c <std>
 8004964:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004968:	2201      	movs	r2, #1
 800496a:	2109      	movs	r1, #9
 800496c:	f7ff ff8e 	bl	800488c <std>
 8004970:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004974:	2202      	movs	r2, #2
 8004976:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800497a:	2112      	movs	r1, #18
 800497c:	f7ff bf86 	b.w	800488c <std>
 8004980:	2000030c 	.word	0x2000030c
 8004984:	200001d4 	.word	0x200001d4
 8004988:	080048f9 	.word	0x080048f9

0800498c <__sfp_lock_acquire>:
 800498c:	4801      	ldr	r0, [pc, #4]	; (8004994 <__sfp_lock_acquire+0x8>)
 800498e:	f000 ba0c 	b.w	8004daa <__retarget_lock_acquire_recursive>
 8004992:	bf00      	nop
 8004994:	20000315 	.word	0x20000315

08004998 <__sfp_lock_release>:
 8004998:	4801      	ldr	r0, [pc, #4]	; (80049a0 <__sfp_lock_release+0x8>)
 800499a:	f000 ba07 	b.w	8004dac <__retarget_lock_release_recursive>
 800499e:	bf00      	nop
 80049a0:	20000315 	.word	0x20000315

080049a4 <__sinit>:
 80049a4:	b510      	push	{r4, lr}
 80049a6:	4604      	mov	r4, r0
 80049a8:	f7ff fff0 	bl	800498c <__sfp_lock_acquire>
 80049ac:	6a23      	ldr	r3, [r4, #32]
 80049ae:	b11b      	cbz	r3, 80049b8 <__sinit+0x14>
 80049b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80049b4:	f7ff bff0 	b.w	8004998 <__sfp_lock_release>
 80049b8:	4b04      	ldr	r3, [pc, #16]	; (80049cc <__sinit+0x28>)
 80049ba:	6223      	str	r3, [r4, #32]
 80049bc:	4b04      	ldr	r3, [pc, #16]	; (80049d0 <__sinit+0x2c>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d1f5      	bne.n	80049b0 <__sinit+0xc>
 80049c4:	f7ff ffc4 	bl	8004950 <global_stdio_init.part.0>
 80049c8:	e7f2      	b.n	80049b0 <__sinit+0xc>
 80049ca:	bf00      	nop
 80049cc:	08004911 	.word	0x08004911
 80049d0:	2000030c 	.word	0x2000030c

080049d4 <_fwalk_sglue>:
 80049d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80049d8:	4607      	mov	r7, r0
 80049da:	4688      	mov	r8, r1
 80049dc:	4614      	mov	r4, r2
 80049de:	2600      	movs	r6, #0
 80049e0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80049e4:	f1b9 0901 	subs.w	r9, r9, #1
 80049e8:	d505      	bpl.n	80049f6 <_fwalk_sglue+0x22>
 80049ea:	6824      	ldr	r4, [r4, #0]
 80049ec:	2c00      	cmp	r4, #0
 80049ee:	d1f7      	bne.n	80049e0 <_fwalk_sglue+0xc>
 80049f0:	4630      	mov	r0, r6
 80049f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80049f6:	89ab      	ldrh	r3, [r5, #12]
 80049f8:	2b01      	cmp	r3, #1
 80049fa:	d907      	bls.n	8004a0c <_fwalk_sglue+0x38>
 80049fc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004a00:	3301      	adds	r3, #1
 8004a02:	d003      	beq.n	8004a0c <_fwalk_sglue+0x38>
 8004a04:	4629      	mov	r1, r5
 8004a06:	4638      	mov	r0, r7
 8004a08:	47c0      	blx	r8
 8004a0a:	4306      	orrs	r6, r0
 8004a0c:	3568      	adds	r5, #104	; 0x68
 8004a0e:	e7e9      	b.n	80049e4 <_fwalk_sglue+0x10>

08004a10 <_puts_r>:
 8004a10:	6a03      	ldr	r3, [r0, #32]
 8004a12:	b570      	push	{r4, r5, r6, lr}
 8004a14:	6884      	ldr	r4, [r0, #8]
 8004a16:	4605      	mov	r5, r0
 8004a18:	460e      	mov	r6, r1
 8004a1a:	b90b      	cbnz	r3, 8004a20 <_puts_r+0x10>
 8004a1c:	f7ff ffc2 	bl	80049a4 <__sinit>
 8004a20:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004a22:	07db      	lsls	r3, r3, #31
 8004a24:	d405      	bmi.n	8004a32 <_puts_r+0x22>
 8004a26:	89a3      	ldrh	r3, [r4, #12]
 8004a28:	0598      	lsls	r0, r3, #22
 8004a2a:	d402      	bmi.n	8004a32 <_puts_r+0x22>
 8004a2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004a2e:	f000 f9bc 	bl	8004daa <__retarget_lock_acquire_recursive>
 8004a32:	89a3      	ldrh	r3, [r4, #12]
 8004a34:	0719      	lsls	r1, r3, #28
 8004a36:	d513      	bpl.n	8004a60 <_puts_r+0x50>
 8004a38:	6923      	ldr	r3, [r4, #16]
 8004a3a:	b18b      	cbz	r3, 8004a60 <_puts_r+0x50>
 8004a3c:	3e01      	subs	r6, #1
 8004a3e:	68a3      	ldr	r3, [r4, #8]
 8004a40:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004a44:	3b01      	subs	r3, #1
 8004a46:	60a3      	str	r3, [r4, #8]
 8004a48:	b9e9      	cbnz	r1, 8004a86 <_puts_r+0x76>
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	da2e      	bge.n	8004aac <_puts_r+0x9c>
 8004a4e:	4622      	mov	r2, r4
 8004a50:	210a      	movs	r1, #10
 8004a52:	4628      	mov	r0, r5
 8004a54:	f000 f89b 	bl	8004b8e <__swbuf_r>
 8004a58:	3001      	adds	r0, #1
 8004a5a:	d007      	beq.n	8004a6c <_puts_r+0x5c>
 8004a5c:	250a      	movs	r5, #10
 8004a5e:	e007      	b.n	8004a70 <_puts_r+0x60>
 8004a60:	4621      	mov	r1, r4
 8004a62:	4628      	mov	r0, r5
 8004a64:	f000 f8d0 	bl	8004c08 <__swsetup_r>
 8004a68:	2800      	cmp	r0, #0
 8004a6a:	d0e7      	beq.n	8004a3c <_puts_r+0x2c>
 8004a6c:	f04f 35ff 	mov.w	r5, #4294967295
 8004a70:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004a72:	07da      	lsls	r2, r3, #31
 8004a74:	d405      	bmi.n	8004a82 <_puts_r+0x72>
 8004a76:	89a3      	ldrh	r3, [r4, #12]
 8004a78:	059b      	lsls	r3, r3, #22
 8004a7a:	d402      	bmi.n	8004a82 <_puts_r+0x72>
 8004a7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004a7e:	f000 f995 	bl	8004dac <__retarget_lock_release_recursive>
 8004a82:	4628      	mov	r0, r5
 8004a84:	bd70      	pop	{r4, r5, r6, pc}
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	da04      	bge.n	8004a94 <_puts_r+0x84>
 8004a8a:	69a2      	ldr	r2, [r4, #24]
 8004a8c:	429a      	cmp	r2, r3
 8004a8e:	dc06      	bgt.n	8004a9e <_puts_r+0x8e>
 8004a90:	290a      	cmp	r1, #10
 8004a92:	d004      	beq.n	8004a9e <_puts_r+0x8e>
 8004a94:	6823      	ldr	r3, [r4, #0]
 8004a96:	1c5a      	adds	r2, r3, #1
 8004a98:	6022      	str	r2, [r4, #0]
 8004a9a:	7019      	strb	r1, [r3, #0]
 8004a9c:	e7cf      	b.n	8004a3e <_puts_r+0x2e>
 8004a9e:	4622      	mov	r2, r4
 8004aa0:	4628      	mov	r0, r5
 8004aa2:	f000 f874 	bl	8004b8e <__swbuf_r>
 8004aa6:	3001      	adds	r0, #1
 8004aa8:	d1c9      	bne.n	8004a3e <_puts_r+0x2e>
 8004aaa:	e7df      	b.n	8004a6c <_puts_r+0x5c>
 8004aac:	6823      	ldr	r3, [r4, #0]
 8004aae:	250a      	movs	r5, #10
 8004ab0:	1c5a      	adds	r2, r3, #1
 8004ab2:	6022      	str	r2, [r4, #0]
 8004ab4:	701d      	strb	r5, [r3, #0]
 8004ab6:	e7db      	b.n	8004a70 <_puts_r+0x60>

08004ab8 <puts>:
 8004ab8:	4b02      	ldr	r3, [pc, #8]	; (8004ac4 <puts+0xc>)
 8004aba:	4601      	mov	r1, r0
 8004abc:	6818      	ldr	r0, [r3, #0]
 8004abe:	f7ff bfa7 	b.w	8004a10 <_puts_r>
 8004ac2:	bf00      	nop
 8004ac4:	20000134 	.word	0x20000134

08004ac8 <siprintf>:
 8004ac8:	b40e      	push	{r1, r2, r3}
 8004aca:	b500      	push	{lr}
 8004acc:	b09c      	sub	sp, #112	; 0x70
 8004ace:	ab1d      	add	r3, sp, #116	; 0x74
 8004ad0:	9002      	str	r0, [sp, #8]
 8004ad2:	9006      	str	r0, [sp, #24]
 8004ad4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004ad8:	4809      	ldr	r0, [pc, #36]	; (8004b00 <siprintf+0x38>)
 8004ada:	9107      	str	r1, [sp, #28]
 8004adc:	9104      	str	r1, [sp, #16]
 8004ade:	4909      	ldr	r1, [pc, #36]	; (8004b04 <siprintf+0x3c>)
 8004ae0:	f853 2b04 	ldr.w	r2, [r3], #4
 8004ae4:	9105      	str	r1, [sp, #20]
 8004ae6:	6800      	ldr	r0, [r0, #0]
 8004ae8:	9301      	str	r3, [sp, #4]
 8004aea:	a902      	add	r1, sp, #8
 8004aec:	f000 fab2 	bl	8005054 <_svfiprintf_r>
 8004af0:	9b02      	ldr	r3, [sp, #8]
 8004af2:	2200      	movs	r2, #0
 8004af4:	701a      	strb	r2, [r3, #0]
 8004af6:	b01c      	add	sp, #112	; 0x70
 8004af8:	f85d eb04 	ldr.w	lr, [sp], #4
 8004afc:	b003      	add	sp, #12
 8004afe:	4770      	bx	lr
 8004b00:	20000134 	.word	0x20000134
 8004b04:	ffff0208 	.word	0xffff0208

08004b08 <__sread>:
 8004b08:	b510      	push	{r4, lr}
 8004b0a:	460c      	mov	r4, r1
 8004b0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b10:	f000 f8fc 	bl	8004d0c <_read_r>
 8004b14:	2800      	cmp	r0, #0
 8004b16:	bfab      	itete	ge
 8004b18:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004b1a:	89a3      	ldrhlt	r3, [r4, #12]
 8004b1c:	181b      	addge	r3, r3, r0
 8004b1e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004b22:	bfac      	ite	ge
 8004b24:	6563      	strge	r3, [r4, #84]	; 0x54
 8004b26:	81a3      	strhlt	r3, [r4, #12]
 8004b28:	bd10      	pop	{r4, pc}

08004b2a <__swrite>:
 8004b2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b2e:	461f      	mov	r7, r3
 8004b30:	898b      	ldrh	r3, [r1, #12]
 8004b32:	05db      	lsls	r3, r3, #23
 8004b34:	4605      	mov	r5, r0
 8004b36:	460c      	mov	r4, r1
 8004b38:	4616      	mov	r6, r2
 8004b3a:	d505      	bpl.n	8004b48 <__swrite+0x1e>
 8004b3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b40:	2302      	movs	r3, #2
 8004b42:	2200      	movs	r2, #0
 8004b44:	f000 f8d0 	bl	8004ce8 <_lseek_r>
 8004b48:	89a3      	ldrh	r3, [r4, #12]
 8004b4a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004b4e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004b52:	81a3      	strh	r3, [r4, #12]
 8004b54:	4632      	mov	r2, r6
 8004b56:	463b      	mov	r3, r7
 8004b58:	4628      	mov	r0, r5
 8004b5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004b5e:	f000 b8e7 	b.w	8004d30 <_write_r>

08004b62 <__sseek>:
 8004b62:	b510      	push	{r4, lr}
 8004b64:	460c      	mov	r4, r1
 8004b66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b6a:	f000 f8bd 	bl	8004ce8 <_lseek_r>
 8004b6e:	1c43      	adds	r3, r0, #1
 8004b70:	89a3      	ldrh	r3, [r4, #12]
 8004b72:	bf15      	itete	ne
 8004b74:	6560      	strne	r0, [r4, #84]	; 0x54
 8004b76:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004b7a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004b7e:	81a3      	strheq	r3, [r4, #12]
 8004b80:	bf18      	it	ne
 8004b82:	81a3      	strhne	r3, [r4, #12]
 8004b84:	bd10      	pop	{r4, pc}

08004b86 <__sclose>:
 8004b86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b8a:	f000 b89d 	b.w	8004cc8 <_close_r>

08004b8e <__swbuf_r>:
 8004b8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b90:	460e      	mov	r6, r1
 8004b92:	4614      	mov	r4, r2
 8004b94:	4605      	mov	r5, r0
 8004b96:	b118      	cbz	r0, 8004ba0 <__swbuf_r+0x12>
 8004b98:	6a03      	ldr	r3, [r0, #32]
 8004b9a:	b90b      	cbnz	r3, 8004ba0 <__swbuf_r+0x12>
 8004b9c:	f7ff ff02 	bl	80049a4 <__sinit>
 8004ba0:	69a3      	ldr	r3, [r4, #24]
 8004ba2:	60a3      	str	r3, [r4, #8]
 8004ba4:	89a3      	ldrh	r3, [r4, #12]
 8004ba6:	071a      	lsls	r2, r3, #28
 8004ba8:	d525      	bpl.n	8004bf6 <__swbuf_r+0x68>
 8004baa:	6923      	ldr	r3, [r4, #16]
 8004bac:	b31b      	cbz	r3, 8004bf6 <__swbuf_r+0x68>
 8004bae:	6823      	ldr	r3, [r4, #0]
 8004bb0:	6922      	ldr	r2, [r4, #16]
 8004bb2:	1a98      	subs	r0, r3, r2
 8004bb4:	6963      	ldr	r3, [r4, #20]
 8004bb6:	b2f6      	uxtb	r6, r6
 8004bb8:	4283      	cmp	r3, r0
 8004bba:	4637      	mov	r7, r6
 8004bbc:	dc04      	bgt.n	8004bc8 <__swbuf_r+0x3a>
 8004bbe:	4621      	mov	r1, r4
 8004bc0:	4628      	mov	r0, r5
 8004bc2:	f000 fd5b 	bl	800567c <_fflush_r>
 8004bc6:	b9e0      	cbnz	r0, 8004c02 <__swbuf_r+0x74>
 8004bc8:	68a3      	ldr	r3, [r4, #8]
 8004bca:	3b01      	subs	r3, #1
 8004bcc:	60a3      	str	r3, [r4, #8]
 8004bce:	6823      	ldr	r3, [r4, #0]
 8004bd0:	1c5a      	adds	r2, r3, #1
 8004bd2:	6022      	str	r2, [r4, #0]
 8004bd4:	701e      	strb	r6, [r3, #0]
 8004bd6:	6962      	ldr	r2, [r4, #20]
 8004bd8:	1c43      	adds	r3, r0, #1
 8004bda:	429a      	cmp	r2, r3
 8004bdc:	d004      	beq.n	8004be8 <__swbuf_r+0x5a>
 8004bde:	89a3      	ldrh	r3, [r4, #12]
 8004be0:	07db      	lsls	r3, r3, #31
 8004be2:	d506      	bpl.n	8004bf2 <__swbuf_r+0x64>
 8004be4:	2e0a      	cmp	r6, #10
 8004be6:	d104      	bne.n	8004bf2 <__swbuf_r+0x64>
 8004be8:	4621      	mov	r1, r4
 8004bea:	4628      	mov	r0, r5
 8004bec:	f000 fd46 	bl	800567c <_fflush_r>
 8004bf0:	b938      	cbnz	r0, 8004c02 <__swbuf_r+0x74>
 8004bf2:	4638      	mov	r0, r7
 8004bf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004bf6:	4621      	mov	r1, r4
 8004bf8:	4628      	mov	r0, r5
 8004bfa:	f000 f805 	bl	8004c08 <__swsetup_r>
 8004bfe:	2800      	cmp	r0, #0
 8004c00:	d0d5      	beq.n	8004bae <__swbuf_r+0x20>
 8004c02:	f04f 37ff 	mov.w	r7, #4294967295
 8004c06:	e7f4      	b.n	8004bf2 <__swbuf_r+0x64>

08004c08 <__swsetup_r>:
 8004c08:	b538      	push	{r3, r4, r5, lr}
 8004c0a:	4b2a      	ldr	r3, [pc, #168]	; (8004cb4 <__swsetup_r+0xac>)
 8004c0c:	4605      	mov	r5, r0
 8004c0e:	6818      	ldr	r0, [r3, #0]
 8004c10:	460c      	mov	r4, r1
 8004c12:	b118      	cbz	r0, 8004c1c <__swsetup_r+0x14>
 8004c14:	6a03      	ldr	r3, [r0, #32]
 8004c16:	b90b      	cbnz	r3, 8004c1c <__swsetup_r+0x14>
 8004c18:	f7ff fec4 	bl	80049a4 <__sinit>
 8004c1c:	89a3      	ldrh	r3, [r4, #12]
 8004c1e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004c22:	0718      	lsls	r0, r3, #28
 8004c24:	d422      	bmi.n	8004c6c <__swsetup_r+0x64>
 8004c26:	06d9      	lsls	r1, r3, #27
 8004c28:	d407      	bmi.n	8004c3a <__swsetup_r+0x32>
 8004c2a:	2309      	movs	r3, #9
 8004c2c:	602b      	str	r3, [r5, #0]
 8004c2e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004c32:	81a3      	strh	r3, [r4, #12]
 8004c34:	f04f 30ff 	mov.w	r0, #4294967295
 8004c38:	e034      	b.n	8004ca4 <__swsetup_r+0x9c>
 8004c3a:	0758      	lsls	r0, r3, #29
 8004c3c:	d512      	bpl.n	8004c64 <__swsetup_r+0x5c>
 8004c3e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004c40:	b141      	cbz	r1, 8004c54 <__swsetup_r+0x4c>
 8004c42:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004c46:	4299      	cmp	r1, r3
 8004c48:	d002      	beq.n	8004c50 <__swsetup_r+0x48>
 8004c4a:	4628      	mov	r0, r5
 8004c4c:	f000 f8b0 	bl	8004db0 <_free_r>
 8004c50:	2300      	movs	r3, #0
 8004c52:	6363      	str	r3, [r4, #52]	; 0x34
 8004c54:	89a3      	ldrh	r3, [r4, #12]
 8004c56:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004c5a:	81a3      	strh	r3, [r4, #12]
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	6063      	str	r3, [r4, #4]
 8004c60:	6923      	ldr	r3, [r4, #16]
 8004c62:	6023      	str	r3, [r4, #0]
 8004c64:	89a3      	ldrh	r3, [r4, #12]
 8004c66:	f043 0308 	orr.w	r3, r3, #8
 8004c6a:	81a3      	strh	r3, [r4, #12]
 8004c6c:	6923      	ldr	r3, [r4, #16]
 8004c6e:	b94b      	cbnz	r3, 8004c84 <__swsetup_r+0x7c>
 8004c70:	89a3      	ldrh	r3, [r4, #12]
 8004c72:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004c76:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c7a:	d003      	beq.n	8004c84 <__swsetup_r+0x7c>
 8004c7c:	4621      	mov	r1, r4
 8004c7e:	4628      	mov	r0, r5
 8004c80:	f000 fd4a 	bl	8005718 <__smakebuf_r>
 8004c84:	89a0      	ldrh	r0, [r4, #12]
 8004c86:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004c8a:	f010 0301 	ands.w	r3, r0, #1
 8004c8e:	d00a      	beq.n	8004ca6 <__swsetup_r+0x9e>
 8004c90:	2300      	movs	r3, #0
 8004c92:	60a3      	str	r3, [r4, #8]
 8004c94:	6963      	ldr	r3, [r4, #20]
 8004c96:	425b      	negs	r3, r3
 8004c98:	61a3      	str	r3, [r4, #24]
 8004c9a:	6923      	ldr	r3, [r4, #16]
 8004c9c:	b943      	cbnz	r3, 8004cb0 <__swsetup_r+0xa8>
 8004c9e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004ca2:	d1c4      	bne.n	8004c2e <__swsetup_r+0x26>
 8004ca4:	bd38      	pop	{r3, r4, r5, pc}
 8004ca6:	0781      	lsls	r1, r0, #30
 8004ca8:	bf58      	it	pl
 8004caa:	6963      	ldrpl	r3, [r4, #20]
 8004cac:	60a3      	str	r3, [r4, #8]
 8004cae:	e7f4      	b.n	8004c9a <__swsetup_r+0x92>
 8004cb0:	2000      	movs	r0, #0
 8004cb2:	e7f7      	b.n	8004ca4 <__swsetup_r+0x9c>
 8004cb4:	20000134 	.word	0x20000134

08004cb8 <memset>:
 8004cb8:	4402      	add	r2, r0
 8004cba:	4603      	mov	r3, r0
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d100      	bne.n	8004cc2 <memset+0xa>
 8004cc0:	4770      	bx	lr
 8004cc2:	f803 1b01 	strb.w	r1, [r3], #1
 8004cc6:	e7f9      	b.n	8004cbc <memset+0x4>

08004cc8 <_close_r>:
 8004cc8:	b538      	push	{r3, r4, r5, lr}
 8004cca:	4d06      	ldr	r5, [pc, #24]	; (8004ce4 <_close_r+0x1c>)
 8004ccc:	2300      	movs	r3, #0
 8004cce:	4604      	mov	r4, r0
 8004cd0:	4608      	mov	r0, r1
 8004cd2:	602b      	str	r3, [r5, #0]
 8004cd4:	f7fd fc3d 	bl	8002552 <_close>
 8004cd8:	1c43      	adds	r3, r0, #1
 8004cda:	d102      	bne.n	8004ce2 <_close_r+0x1a>
 8004cdc:	682b      	ldr	r3, [r5, #0]
 8004cde:	b103      	cbz	r3, 8004ce2 <_close_r+0x1a>
 8004ce0:	6023      	str	r3, [r4, #0]
 8004ce2:	bd38      	pop	{r3, r4, r5, pc}
 8004ce4:	20000310 	.word	0x20000310

08004ce8 <_lseek_r>:
 8004ce8:	b538      	push	{r3, r4, r5, lr}
 8004cea:	4d07      	ldr	r5, [pc, #28]	; (8004d08 <_lseek_r+0x20>)
 8004cec:	4604      	mov	r4, r0
 8004cee:	4608      	mov	r0, r1
 8004cf0:	4611      	mov	r1, r2
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	602a      	str	r2, [r5, #0]
 8004cf6:	461a      	mov	r2, r3
 8004cf8:	f7fd fc52 	bl	80025a0 <_lseek>
 8004cfc:	1c43      	adds	r3, r0, #1
 8004cfe:	d102      	bne.n	8004d06 <_lseek_r+0x1e>
 8004d00:	682b      	ldr	r3, [r5, #0]
 8004d02:	b103      	cbz	r3, 8004d06 <_lseek_r+0x1e>
 8004d04:	6023      	str	r3, [r4, #0]
 8004d06:	bd38      	pop	{r3, r4, r5, pc}
 8004d08:	20000310 	.word	0x20000310

08004d0c <_read_r>:
 8004d0c:	b538      	push	{r3, r4, r5, lr}
 8004d0e:	4d07      	ldr	r5, [pc, #28]	; (8004d2c <_read_r+0x20>)
 8004d10:	4604      	mov	r4, r0
 8004d12:	4608      	mov	r0, r1
 8004d14:	4611      	mov	r1, r2
 8004d16:	2200      	movs	r2, #0
 8004d18:	602a      	str	r2, [r5, #0]
 8004d1a:	461a      	mov	r2, r3
 8004d1c:	f7fd fbe0 	bl	80024e0 <_read>
 8004d20:	1c43      	adds	r3, r0, #1
 8004d22:	d102      	bne.n	8004d2a <_read_r+0x1e>
 8004d24:	682b      	ldr	r3, [r5, #0]
 8004d26:	b103      	cbz	r3, 8004d2a <_read_r+0x1e>
 8004d28:	6023      	str	r3, [r4, #0]
 8004d2a:	bd38      	pop	{r3, r4, r5, pc}
 8004d2c:	20000310 	.word	0x20000310

08004d30 <_write_r>:
 8004d30:	b538      	push	{r3, r4, r5, lr}
 8004d32:	4d07      	ldr	r5, [pc, #28]	; (8004d50 <_write_r+0x20>)
 8004d34:	4604      	mov	r4, r0
 8004d36:	4608      	mov	r0, r1
 8004d38:	4611      	mov	r1, r2
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	602a      	str	r2, [r5, #0]
 8004d3e:	461a      	mov	r2, r3
 8004d40:	f7fd fbeb 	bl	800251a <_write>
 8004d44:	1c43      	adds	r3, r0, #1
 8004d46:	d102      	bne.n	8004d4e <_write_r+0x1e>
 8004d48:	682b      	ldr	r3, [r5, #0]
 8004d4a:	b103      	cbz	r3, 8004d4e <_write_r+0x1e>
 8004d4c:	6023      	str	r3, [r4, #0]
 8004d4e:	bd38      	pop	{r3, r4, r5, pc}
 8004d50:	20000310 	.word	0x20000310

08004d54 <__errno>:
 8004d54:	4b01      	ldr	r3, [pc, #4]	; (8004d5c <__errno+0x8>)
 8004d56:	6818      	ldr	r0, [r3, #0]
 8004d58:	4770      	bx	lr
 8004d5a:	bf00      	nop
 8004d5c:	20000134 	.word	0x20000134

08004d60 <__libc_init_array>:
 8004d60:	b570      	push	{r4, r5, r6, lr}
 8004d62:	4d0d      	ldr	r5, [pc, #52]	; (8004d98 <__libc_init_array+0x38>)
 8004d64:	4c0d      	ldr	r4, [pc, #52]	; (8004d9c <__libc_init_array+0x3c>)
 8004d66:	1b64      	subs	r4, r4, r5
 8004d68:	10a4      	asrs	r4, r4, #2
 8004d6a:	2600      	movs	r6, #0
 8004d6c:	42a6      	cmp	r6, r4
 8004d6e:	d109      	bne.n	8004d84 <__libc_init_array+0x24>
 8004d70:	4d0b      	ldr	r5, [pc, #44]	; (8004da0 <__libc_init_array+0x40>)
 8004d72:	4c0c      	ldr	r4, [pc, #48]	; (8004da4 <__libc_init_array+0x44>)
 8004d74:	f000 fd9e 	bl	80058b4 <_init>
 8004d78:	1b64      	subs	r4, r4, r5
 8004d7a:	10a4      	asrs	r4, r4, #2
 8004d7c:	2600      	movs	r6, #0
 8004d7e:	42a6      	cmp	r6, r4
 8004d80:	d105      	bne.n	8004d8e <__libc_init_array+0x2e>
 8004d82:	bd70      	pop	{r4, r5, r6, pc}
 8004d84:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d88:	4798      	blx	r3
 8004d8a:	3601      	adds	r6, #1
 8004d8c:	e7ee      	b.n	8004d6c <__libc_init_array+0xc>
 8004d8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d92:	4798      	blx	r3
 8004d94:	3601      	adds	r6, #1
 8004d96:	e7f2      	b.n	8004d7e <__libc_init_array+0x1e>
 8004d98:	08005fcc 	.word	0x08005fcc
 8004d9c:	08005fcc 	.word	0x08005fcc
 8004da0:	08005fcc 	.word	0x08005fcc
 8004da4:	08005fd0 	.word	0x08005fd0

08004da8 <__retarget_lock_init_recursive>:
 8004da8:	4770      	bx	lr

08004daa <__retarget_lock_acquire_recursive>:
 8004daa:	4770      	bx	lr

08004dac <__retarget_lock_release_recursive>:
 8004dac:	4770      	bx	lr
	...

08004db0 <_free_r>:
 8004db0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004db2:	2900      	cmp	r1, #0
 8004db4:	d044      	beq.n	8004e40 <_free_r+0x90>
 8004db6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004dba:	9001      	str	r0, [sp, #4]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	f1a1 0404 	sub.w	r4, r1, #4
 8004dc2:	bfb8      	it	lt
 8004dc4:	18e4      	addlt	r4, r4, r3
 8004dc6:	f000 f8df 	bl	8004f88 <__malloc_lock>
 8004dca:	4a1e      	ldr	r2, [pc, #120]	; (8004e44 <_free_r+0x94>)
 8004dcc:	9801      	ldr	r0, [sp, #4]
 8004dce:	6813      	ldr	r3, [r2, #0]
 8004dd0:	b933      	cbnz	r3, 8004de0 <_free_r+0x30>
 8004dd2:	6063      	str	r3, [r4, #4]
 8004dd4:	6014      	str	r4, [r2, #0]
 8004dd6:	b003      	add	sp, #12
 8004dd8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004ddc:	f000 b8da 	b.w	8004f94 <__malloc_unlock>
 8004de0:	42a3      	cmp	r3, r4
 8004de2:	d908      	bls.n	8004df6 <_free_r+0x46>
 8004de4:	6825      	ldr	r5, [r4, #0]
 8004de6:	1961      	adds	r1, r4, r5
 8004de8:	428b      	cmp	r3, r1
 8004dea:	bf01      	itttt	eq
 8004dec:	6819      	ldreq	r1, [r3, #0]
 8004dee:	685b      	ldreq	r3, [r3, #4]
 8004df0:	1949      	addeq	r1, r1, r5
 8004df2:	6021      	streq	r1, [r4, #0]
 8004df4:	e7ed      	b.n	8004dd2 <_free_r+0x22>
 8004df6:	461a      	mov	r2, r3
 8004df8:	685b      	ldr	r3, [r3, #4]
 8004dfa:	b10b      	cbz	r3, 8004e00 <_free_r+0x50>
 8004dfc:	42a3      	cmp	r3, r4
 8004dfe:	d9fa      	bls.n	8004df6 <_free_r+0x46>
 8004e00:	6811      	ldr	r1, [r2, #0]
 8004e02:	1855      	adds	r5, r2, r1
 8004e04:	42a5      	cmp	r5, r4
 8004e06:	d10b      	bne.n	8004e20 <_free_r+0x70>
 8004e08:	6824      	ldr	r4, [r4, #0]
 8004e0a:	4421      	add	r1, r4
 8004e0c:	1854      	adds	r4, r2, r1
 8004e0e:	42a3      	cmp	r3, r4
 8004e10:	6011      	str	r1, [r2, #0]
 8004e12:	d1e0      	bne.n	8004dd6 <_free_r+0x26>
 8004e14:	681c      	ldr	r4, [r3, #0]
 8004e16:	685b      	ldr	r3, [r3, #4]
 8004e18:	6053      	str	r3, [r2, #4]
 8004e1a:	440c      	add	r4, r1
 8004e1c:	6014      	str	r4, [r2, #0]
 8004e1e:	e7da      	b.n	8004dd6 <_free_r+0x26>
 8004e20:	d902      	bls.n	8004e28 <_free_r+0x78>
 8004e22:	230c      	movs	r3, #12
 8004e24:	6003      	str	r3, [r0, #0]
 8004e26:	e7d6      	b.n	8004dd6 <_free_r+0x26>
 8004e28:	6825      	ldr	r5, [r4, #0]
 8004e2a:	1961      	adds	r1, r4, r5
 8004e2c:	428b      	cmp	r3, r1
 8004e2e:	bf04      	itt	eq
 8004e30:	6819      	ldreq	r1, [r3, #0]
 8004e32:	685b      	ldreq	r3, [r3, #4]
 8004e34:	6063      	str	r3, [r4, #4]
 8004e36:	bf04      	itt	eq
 8004e38:	1949      	addeq	r1, r1, r5
 8004e3a:	6021      	streq	r1, [r4, #0]
 8004e3c:	6054      	str	r4, [r2, #4]
 8004e3e:	e7ca      	b.n	8004dd6 <_free_r+0x26>
 8004e40:	b003      	add	sp, #12
 8004e42:	bd30      	pop	{r4, r5, pc}
 8004e44:	20000318 	.word	0x20000318

08004e48 <sbrk_aligned>:
 8004e48:	b570      	push	{r4, r5, r6, lr}
 8004e4a:	4e0e      	ldr	r6, [pc, #56]	; (8004e84 <sbrk_aligned+0x3c>)
 8004e4c:	460c      	mov	r4, r1
 8004e4e:	6831      	ldr	r1, [r6, #0]
 8004e50:	4605      	mov	r5, r0
 8004e52:	b911      	cbnz	r1, 8004e5a <sbrk_aligned+0x12>
 8004e54:	f000 fcd8 	bl	8005808 <_sbrk_r>
 8004e58:	6030      	str	r0, [r6, #0]
 8004e5a:	4621      	mov	r1, r4
 8004e5c:	4628      	mov	r0, r5
 8004e5e:	f000 fcd3 	bl	8005808 <_sbrk_r>
 8004e62:	1c43      	adds	r3, r0, #1
 8004e64:	d00a      	beq.n	8004e7c <sbrk_aligned+0x34>
 8004e66:	1cc4      	adds	r4, r0, #3
 8004e68:	f024 0403 	bic.w	r4, r4, #3
 8004e6c:	42a0      	cmp	r0, r4
 8004e6e:	d007      	beq.n	8004e80 <sbrk_aligned+0x38>
 8004e70:	1a21      	subs	r1, r4, r0
 8004e72:	4628      	mov	r0, r5
 8004e74:	f000 fcc8 	bl	8005808 <_sbrk_r>
 8004e78:	3001      	adds	r0, #1
 8004e7a:	d101      	bne.n	8004e80 <sbrk_aligned+0x38>
 8004e7c:	f04f 34ff 	mov.w	r4, #4294967295
 8004e80:	4620      	mov	r0, r4
 8004e82:	bd70      	pop	{r4, r5, r6, pc}
 8004e84:	2000031c 	.word	0x2000031c

08004e88 <_malloc_r>:
 8004e88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004e8c:	1ccd      	adds	r5, r1, #3
 8004e8e:	f025 0503 	bic.w	r5, r5, #3
 8004e92:	3508      	adds	r5, #8
 8004e94:	2d0c      	cmp	r5, #12
 8004e96:	bf38      	it	cc
 8004e98:	250c      	movcc	r5, #12
 8004e9a:	2d00      	cmp	r5, #0
 8004e9c:	4607      	mov	r7, r0
 8004e9e:	db01      	blt.n	8004ea4 <_malloc_r+0x1c>
 8004ea0:	42a9      	cmp	r1, r5
 8004ea2:	d905      	bls.n	8004eb0 <_malloc_r+0x28>
 8004ea4:	230c      	movs	r3, #12
 8004ea6:	603b      	str	r3, [r7, #0]
 8004ea8:	2600      	movs	r6, #0
 8004eaa:	4630      	mov	r0, r6
 8004eac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004eb0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004f84 <_malloc_r+0xfc>
 8004eb4:	f000 f868 	bl	8004f88 <__malloc_lock>
 8004eb8:	f8d8 3000 	ldr.w	r3, [r8]
 8004ebc:	461c      	mov	r4, r3
 8004ebe:	bb5c      	cbnz	r4, 8004f18 <_malloc_r+0x90>
 8004ec0:	4629      	mov	r1, r5
 8004ec2:	4638      	mov	r0, r7
 8004ec4:	f7ff ffc0 	bl	8004e48 <sbrk_aligned>
 8004ec8:	1c43      	adds	r3, r0, #1
 8004eca:	4604      	mov	r4, r0
 8004ecc:	d155      	bne.n	8004f7a <_malloc_r+0xf2>
 8004ece:	f8d8 4000 	ldr.w	r4, [r8]
 8004ed2:	4626      	mov	r6, r4
 8004ed4:	2e00      	cmp	r6, #0
 8004ed6:	d145      	bne.n	8004f64 <_malloc_r+0xdc>
 8004ed8:	2c00      	cmp	r4, #0
 8004eda:	d048      	beq.n	8004f6e <_malloc_r+0xe6>
 8004edc:	6823      	ldr	r3, [r4, #0]
 8004ede:	4631      	mov	r1, r6
 8004ee0:	4638      	mov	r0, r7
 8004ee2:	eb04 0903 	add.w	r9, r4, r3
 8004ee6:	f000 fc8f 	bl	8005808 <_sbrk_r>
 8004eea:	4581      	cmp	r9, r0
 8004eec:	d13f      	bne.n	8004f6e <_malloc_r+0xe6>
 8004eee:	6821      	ldr	r1, [r4, #0]
 8004ef0:	1a6d      	subs	r5, r5, r1
 8004ef2:	4629      	mov	r1, r5
 8004ef4:	4638      	mov	r0, r7
 8004ef6:	f7ff ffa7 	bl	8004e48 <sbrk_aligned>
 8004efa:	3001      	adds	r0, #1
 8004efc:	d037      	beq.n	8004f6e <_malloc_r+0xe6>
 8004efe:	6823      	ldr	r3, [r4, #0]
 8004f00:	442b      	add	r3, r5
 8004f02:	6023      	str	r3, [r4, #0]
 8004f04:	f8d8 3000 	ldr.w	r3, [r8]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d038      	beq.n	8004f7e <_malloc_r+0xf6>
 8004f0c:	685a      	ldr	r2, [r3, #4]
 8004f0e:	42a2      	cmp	r2, r4
 8004f10:	d12b      	bne.n	8004f6a <_malloc_r+0xe2>
 8004f12:	2200      	movs	r2, #0
 8004f14:	605a      	str	r2, [r3, #4]
 8004f16:	e00f      	b.n	8004f38 <_malloc_r+0xb0>
 8004f18:	6822      	ldr	r2, [r4, #0]
 8004f1a:	1b52      	subs	r2, r2, r5
 8004f1c:	d41f      	bmi.n	8004f5e <_malloc_r+0xd6>
 8004f1e:	2a0b      	cmp	r2, #11
 8004f20:	d917      	bls.n	8004f52 <_malloc_r+0xca>
 8004f22:	1961      	adds	r1, r4, r5
 8004f24:	42a3      	cmp	r3, r4
 8004f26:	6025      	str	r5, [r4, #0]
 8004f28:	bf18      	it	ne
 8004f2a:	6059      	strne	r1, [r3, #4]
 8004f2c:	6863      	ldr	r3, [r4, #4]
 8004f2e:	bf08      	it	eq
 8004f30:	f8c8 1000 	streq.w	r1, [r8]
 8004f34:	5162      	str	r2, [r4, r5]
 8004f36:	604b      	str	r3, [r1, #4]
 8004f38:	4638      	mov	r0, r7
 8004f3a:	f104 060b 	add.w	r6, r4, #11
 8004f3e:	f000 f829 	bl	8004f94 <__malloc_unlock>
 8004f42:	f026 0607 	bic.w	r6, r6, #7
 8004f46:	1d23      	adds	r3, r4, #4
 8004f48:	1af2      	subs	r2, r6, r3
 8004f4a:	d0ae      	beq.n	8004eaa <_malloc_r+0x22>
 8004f4c:	1b9b      	subs	r3, r3, r6
 8004f4e:	50a3      	str	r3, [r4, r2]
 8004f50:	e7ab      	b.n	8004eaa <_malloc_r+0x22>
 8004f52:	42a3      	cmp	r3, r4
 8004f54:	6862      	ldr	r2, [r4, #4]
 8004f56:	d1dd      	bne.n	8004f14 <_malloc_r+0x8c>
 8004f58:	f8c8 2000 	str.w	r2, [r8]
 8004f5c:	e7ec      	b.n	8004f38 <_malloc_r+0xb0>
 8004f5e:	4623      	mov	r3, r4
 8004f60:	6864      	ldr	r4, [r4, #4]
 8004f62:	e7ac      	b.n	8004ebe <_malloc_r+0x36>
 8004f64:	4634      	mov	r4, r6
 8004f66:	6876      	ldr	r6, [r6, #4]
 8004f68:	e7b4      	b.n	8004ed4 <_malloc_r+0x4c>
 8004f6a:	4613      	mov	r3, r2
 8004f6c:	e7cc      	b.n	8004f08 <_malloc_r+0x80>
 8004f6e:	230c      	movs	r3, #12
 8004f70:	603b      	str	r3, [r7, #0]
 8004f72:	4638      	mov	r0, r7
 8004f74:	f000 f80e 	bl	8004f94 <__malloc_unlock>
 8004f78:	e797      	b.n	8004eaa <_malloc_r+0x22>
 8004f7a:	6025      	str	r5, [r4, #0]
 8004f7c:	e7dc      	b.n	8004f38 <_malloc_r+0xb0>
 8004f7e:	605b      	str	r3, [r3, #4]
 8004f80:	deff      	udf	#255	; 0xff
 8004f82:	bf00      	nop
 8004f84:	20000318 	.word	0x20000318

08004f88 <__malloc_lock>:
 8004f88:	4801      	ldr	r0, [pc, #4]	; (8004f90 <__malloc_lock+0x8>)
 8004f8a:	f7ff bf0e 	b.w	8004daa <__retarget_lock_acquire_recursive>
 8004f8e:	bf00      	nop
 8004f90:	20000314 	.word	0x20000314

08004f94 <__malloc_unlock>:
 8004f94:	4801      	ldr	r0, [pc, #4]	; (8004f9c <__malloc_unlock+0x8>)
 8004f96:	f7ff bf09 	b.w	8004dac <__retarget_lock_release_recursive>
 8004f9a:	bf00      	nop
 8004f9c:	20000314 	.word	0x20000314

08004fa0 <__ssputs_r>:
 8004fa0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004fa4:	688e      	ldr	r6, [r1, #8]
 8004fa6:	461f      	mov	r7, r3
 8004fa8:	42be      	cmp	r6, r7
 8004faa:	680b      	ldr	r3, [r1, #0]
 8004fac:	4682      	mov	sl, r0
 8004fae:	460c      	mov	r4, r1
 8004fb0:	4690      	mov	r8, r2
 8004fb2:	d82c      	bhi.n	800500e <__ssputs_r+0x6e>
 8004fb4:	898a      	ldrh	r2, [r1, #12]
 8004fb6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004fba:	d026      	beq.n	800500a <__ssputs_r+0x6a>
 8004fbc:	6965      	ldr	r5, [r4, #20]
 8004fbe:	6909      	ldr	r1, [r1, #16]
 8004fc0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004fc4:	eba3 0901 	sub.w	r9, r3, r1
 8004fc8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004fcc:	1c7b      	adds	r3, r7, #1
 8004fce:	444b      	add	r3, r9
 8004fd0:	106d      	asrs	r5, r5, #1
 8004fd2:	429d      	cmp	r5, r3
 8004fd4:	bf38      	it	cc
 8004fd6:	461d      	movcc	r5, r3
 8004fd8:	0553      	lsls	r3, r2, #21
 8004fda:	d527      	bpl.n	800502c <__ssputs_r+0x8c>
 8004fdc:	4629      	mov	r1, r5
 8004fde:	f7ff ff53 	bl	8004e88 <_malloc_r>
 8004fe2:	4606      	mov	r6, r0
 8004fe4:	b360      	cbz	r0, 8005040 <__ssputs_r+0xa0>
 8004fe6:	6921      	ldr	r1, [r4, #16]
 8004fe8:	464a      	mov	r2, r9
 8004fea:	f000 fc1d 	bl	8005828 <memcpy>
 8004fee:	89a3      	ldrh	r3, [r4, #12]
 8004ff0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004ff4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ff8:	81a3      	strh	r3, [r4, #12]
 8004ffa:	6126      	str	r6, [r4, #16]
 8004ffc:	6165      	str	r5, [r4, #20]
 8004ffe:	444e      	add	r6, r9
 8005000:	eba5 0509 	sub.w	r5, r5, r9
 8005004:	6026      	str	r6, [r4, #0]
 8005006:	60a5      	str	r5, [r4, #8]
 8005008:	463e      	mov	r6, r7
 800500a:	42be      	cmp	r6, r7
 800500c:	d900      	bls.n	8005010 <__ssputs_r+0x70>
 800500e:	463e      	mov	r6, r7
 8005010:	6820      	ldr	r0, [r4, #0]
 8005012:	4632      	mov	r2, r6
 8005014:	4641      	mov	r1, r8
 8005016:	f000 fbbb 	bl	8005790 <memmove>
 800501a:	68a3      	ldr	r3, [r4, #8]
 800501c:	1b9b      	subs	r3, r3, r6
 800501e:	60a3      	str	r3, [r4, #8]
 8005020:	6823      	ldr	r3, [r4, #0]
 8005022:	4433      	add	r3, r6
 8005024:	6023      	str	r3, [r4, #0]
 8005026:	2000      	movs	r0, #0
 8005028:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800502c:	462a      	mov	r2, r5
 800502e:	f000 fc09 	bl	8005844 <_realloc_r>
 8005032:	4606      	mov	r6, r0
 8005034:	2800      	cmp	r0, #0
 8005036:	d1e0      	bne.n	8004ffa <__ssputs_r+0x5a>
 8005038:	6921      	ldr	r1, [r4, #16]
 800503a:	4650      	mov	r0, sl
 800503c:	f7ff feb8 	bl	8004db0 <_free_r>
 8005040:	230c      	movs	r3, #12
 8005042:	f8ca 3000 	str.w	r3, [sl]
 8005046:	89a3      	ldrh	r3, [r4, #12]
 8005048:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800504c:	81a3      	strh	r3, [r4, #12]
 800504e:	f04f 30ff 	mov.w	r0, #4294967295
 8005052:	e7e9      	b.n	8005028 <__ssputs_r+0x88>

08005054 <_svfiprintf_r>:
 8005054:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005058:	4698      	mov	r8, r3
 800505a:	898b      	ldrh	r3, [r1, #12]
 800505c:	061b      	lsls	r3, r3, #24
 800505e:	b09d      	sub	sp, #116	; 0x74
 8005060:	4607      	mov	r7, r0
 8005062:	460d      	mov	r5, r1
 8005064:	4614      	mov	r4, r2
 8005066:	d50e      	bpl.n	8005086 <_svfiprintf_r+0x32>
 8005068:	690b      	ldr	r3, [r1, #16]
 800506a:	b963      	cbnz	r3, 8005086 <_svfiprintf_r+0x32>
 800506c:	2140      	movs	r1, #64	; 0x40
 800506e:	f7ff ff0b 	bl	8004e88 <_malloc_r>
 8005072:	6028      	str	r0, [r5, #0]
 8005074:	6128      	str	r0, [r5, #16]
 8005076:	b920      	cbnz	r0, 8005082 <_svfiprintf_r+0x2e>
 8005078:	230c      	movs	r3, #12
 800507a:	603b      	str	r3, [r7, #0]
 800507c:	f04f 30ff 	mov.w	r0, #4294967295
 8005080:	e0d0      	b.n	8005224 <_svfiprintf_r+0x1d0>
 8005082:	2340      	movs	r3, #64	; 0x40
 8005084:	616b      	str	r3, [r5, #20]
 8005086:	2300      	movs	r3, #0
 8005088:	9309      	str	r3, [sp, #36]	; 0x24
 800508a:	2320      	movs	r3, #32
 800508c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005090:	f8cd 800c 	str.w	r8, [sp, #12]
 8005094:	2330      	movs	r3, #48	; 0x30
 8005096:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800523c <_svfiprintf_r+0x1e8>
 800509a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800509e:	f04f 0901 	mov.w	r9, #1
 80050a2:	4623      	mov	r3, r4
 80050a4:	469a      	mov	sl, r3
 80050a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80050aa:	b10a      	cbz	r2, 80050b0 <_svfiprintf_r+0x5c>
 80050ac:	2a25      	cmp	r2, #37	; 0x25
 80050ae:	d1f9      	bne.n	80050a4 <_svfiprintf_r+0x50>
 80050b0:	ebba 0b04 	subs.w	fp, sl, r4
 80050b4:	d00b      	beq.n	80050ce <_svfiprintf_r+0x7a>
 80050b6:	465b      	mov	r3, fp
 80050b8:	4622      	mov	r2, r4
 80050ba:	4629      	mov	r1, r5
 80050bc:	4638      	mov	r0, r7
 80050be:	f7ff ff6f 	bl	8004fa0 <__ssputs_r>
 80050c2:	3001      	adds	r0, #1
 80050c4:	f000 80a9 	beq.w	800521a <_svfiprintf_r+0x1c6>
 80050c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80050ca:	445a      	add	r2, fp
 80050cc:	9209      	str	r2, [sp, #36]	; 0x24
 80050ce:	f89a 3000 	ldrb.w	r3, [sl]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	f000 80a1 	beq.w	800521a <_svfiprintf_r+0x1c6>
 80050d8:	2300      	movs	r3, #0
 80050da:	f04f 32ff 	mov.w	r2, #4294967295
 80050de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80050e2:	f10a 0a01 	add.w	sl, sl, #1
 80050e6:	9304      	str	r3, [sp, #16]
 80050e8:	9307      	str	r3, [sp, #28]
 80050ea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80050ee:	931a      	str	r3, [sp, #104]	; 0x68
 80050f0:	4654      	mov	r4, sl
 80050f2:	2205      	movs	r2, #5
 80050f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80050f8:	4850      	ldr	r0, [pc, #320]	; (800523c <_svfiprintf_r+0x1e8>)
 80050fa:	f7fb f881 	bl	8000200 <memchr>
 80050fe:	9a04      	ldr	r2, [sp, #16]
 8005100:	b9d8      	cbnz	r0, 800513a <_svfiprintf_r+0xe6>
 8005102:	06d0      	lsls	r0, r2, #27
 8005104:	bf44      	itt	mi
 8005106:	2320      	movmi	r3, #32
 8005108:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800510c:	0711      	lsls	r1, r2, #28
 800510e:	bf44      	itt	mi
 8005110:	232b      	movmi	r3, #43	; 0x2b
 8005112:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005116:	f89a 3000 	ldrb.w	r3, [sl]
 800511a:	2b2a      	cmp	r3, #42	; 0x2a
 800511c:	d015      	beq.n	800514a <_svfiprintf_r+0xf6>
 800511e:	9a07      	ldr	r2, [sp, #28]
 8005120:	4654      	mov	r4, sl
 8005122:	2000      	movs	r0, #0
 8005124:	f04f 0c0a 	mov.w	ip, #10
 8005128:	4621      	mov	r1, r4
 800512a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800512e:	3b30      	subs	r3, #48	; 0x30
 8005130:	2b09      	cmp	r3, #9
 8005132:	d94d      	bls.n	80051d0 <_svfiprintf_r+0x17c>
 8005134:	b1b0      	cbz	r0, 8005164 <_svfiprintf_r+0x110>
 8005136:	9207      	str	r2, [sp, #28]
 8005138:	e014      	b.n	8005164 <_svfiprintf_r+0x110>
 800513a:	eba0 0308 	sub.w	r3, r0, r8
 800513e:	fa09 f303 	lsl.w	r3, r9, r3
 8005142:	4313      	orrs	r3, r2
 8005144:	9304      	str	r3, [sp, #16]
 8005146:	46a2      	mov	sl, r4
 8005148:	e7d2      	b.n	80050f0 <_svfiprintf_r+0x9c>
 800514a:	9b03      	ldr	r3, [sp, #12]
 800514c:	1d19      	adds	r1, r3, #4
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	9103      	str	r1, [sp, #12]
 8005152:	2b00      	cmp	r3, #0
 8005154:	bfbb      	ittet	lt
 8005156:	425b      	neglt	r3, r3
 8005158:	f042 0202 	orrlt.w	r2, r2, #2
 800515c:	9307      	strge	r3, [sp, #28]
 800515e:	9307      	strlt	r3, [sp, #28]
 8005160:	bfb8      	it	lt
 8005162:	9204      	strlt	r2, [sp, #16]
 8005164:	7823      	ldrb	r3, [r4, #0]
 8005166:	2b2e      	cmp	r3, #46	; 0x2e
 8005168:	d10c      	bne.n	8005184 <_svfiprintf_r+0x130>
 800516a:	7863      	ldrb	r3, [r4, #1]
 800516c:	2b2a      	cmp	r3, #42	; 0x2a
 800516e:	d134      	bne.n	80051da <_svfiprintf_r+0x186>
 8005170:	9b03      	ldr	r3, [sp, #12]
 8005172:	1d1a      	adds	r2, r3, #4
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	9203      	str	r2, [sp, #12]
 8005178:	2b00      	cmp	r3, #0
 800517a:	bfb8      	it	lt
 800517c:	f04f 33ff 	movlt.w	r3, #4294967295
 8005180:	3402      	adds	r4, #2
 8005182:	9305      	str	r3, [sp, #20]
 8005184:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800524c <_svfiprintf_r+0x1f8>
 8005188:	7821      	ldrb	r1, [r4, #0]
 800518a:	2203      	movs	r2, #3
 800518c:	4650      	mov	r0, sl
 800518e:	f7fb f837 	bl	8000200 <memchr>
 8005192:	b138      	cbz	r0, 80051a4 <_svfiprintf_r+0x150>
 8005194:	9b04      	ldr	r3, [sp, #16]
 8005196:	eba0 000a 	sub.w	r0, r0, sl
 800519a:	2240      	movs	r2, #64	; 0x40
 800519c:	4082      	lsls	r2, r0
 800519e:	4313      	orrs	r3, r2
 80051a0:	3401      	adds	r4, #1
 80051a2:	9304      	str	r3, [sp, #16]
 80051a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80051a8:	4825      	ldr	r0, [pc, #148]	; (8005240 <_svfiprintf_r+0x1ec>)
 80051aa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80051ae:	2206      	movs	r2, #6
 80051b0:	f7fb f826 	bl	8000200 <memchr>
 80051b4:	2800      	cmp	r0, #0
 80051b6:	d038      	beq.n	800522a <_svfiprintf_r+0x1d6>
 80051b8:	4b22      	ldr	r3, [pc, #136]	; (8005244 <_svfiprintf_r+0x1f0>)
 80051ba:	bb1b      	cbnz	r3, 8005204 <_svfiprintf_r+0x1b0>
 80051bc:	9b03      	ldr	r3, [sp, #12]
 80051be:	3307      	adds	r3, #7
 80051c0:	f023 0307 	bic.w	r3, r3, #7
 80051c4:	3308      	adds	r3, #8
 80051c6:	9303      	str	r3, [sp, #12]
 80051c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80051ca:	4433      	add	r3, r6
 80051cc:	9309      	str	r3, [sp, #36]	; 0x24
 80051ce:	e768      	b.n	80050a2 <_svfiprintf_r+0x4e>
 80051d0:	fb0c 3202 	mla	r2, ip, r2, r3
 80051d4:	460c      	mov	r4, r1
 80051d6:	2001      	movs	r0, #1
 80051d8:	e7a6      	b.n	8005128 <_svfiprintf_r+0xd4>
 80051da:	2300      	movs	r3, #0
 80051dc:	3401      	adds	r4, #1
 80051de:	9305      	str	r3, [sp, #20]
 80051e0:	4619      	mov	r1, r3
 80051e2:	f04f 0c0a 	mov.w	ip, #10
 80051e6:	4620      	mov	r0, r4
 80051e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80051ec:	3a30      	subs	r2, #48	; 0x30
 80051ee:	2a09      	cmp	r2, #9
 80051f0:	d903      	bls.n	80051fa <_svfiprintf_r+0x1a6>
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d0c6      	beq.n	8005184 <_svfiprintf_r+0x130>
 80051f6:	9105      	str	r1, [sp, #20]
 80051f8:	e7c4      	b.n	8005184 <_svfiprintf_r+0x130>
 80051fa:	fb0c 2101 	mla	r1, ip, r1, r2
 80051fe:	4604      	mov	r4, r0
 8005200:	2301      	movs	r3, #1
 8005202:	e7f0      	b.n	80051e6 <_svfiprintf_r+0x192>
 8005204:	ab03      	add	r3, sp, #12
 8005206:	9300      	str	r3, [sp, #0]
 8005208:	462a      	mov	r2, r5
 800520a:	4b0f      	ldr	r3, [pc, #60]	; (8005248 <_svfiprintf_r+0x1f4>)
 800520c:	a904      	add	r1, sp, #16
 800520e:	4638      	mov	r0, r7
 8005210:	f3af 8000 	nop.w
 8005214:	1c42      	adds	r2, r0, #1
 8005216:	4606      	mov	r6, r0
 8005218:	d1d6      	bne.n	80051c8 <_svfiprintf_r+0x174>
 800521a:	89ab      	ldrh	r3, [r5, #12]
 800521c:	065b      	lsls	r3, r3, #25
 800521e:	f53f af2d 	bmi.w	800507c <_svfiprintf_r+0x28>
 8005222:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005224:	b01d      	add	sp, #116	; 0x74
 8005226:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800522a:	ab03      	add	r3, sp, #12
 800522c:	9300      	str	r3, [sp, #0]
 800522e:	462a      	mov	r2, r5
 8005230:	4b05      	ldr	r3, [pc, #20]	; (8005248 <_svfiprintf_r+0x1f4>)
 8005232:	a904      	add	r1, sp, #16
 8005234:	4638      	mov	r0, r7
 8005236:	f000 f879 	bl	800532c <_printf_i>
 800523a:	e7eb      	b.n	8005214 <_svfiprintf_r+0x1c0>
 800523c:	08005f90 	.word	0x08005f90
 8005240:	08005f9a 	.word	0x08005f9a
 8005244:	00000000 	.word	0x00000000
 8005248:	08004fa1 	.word	0x08004fa1
 800524c:	08005f96 	.word	0x08005f96

08005250 <_printf_common>:
 8005250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005254:	4616      	mov	r6, r2
 8005256:	4699      	mov	r9, r3
 8005258:	688a      	ldr	r2, [r1, #8]
 800525a:	690b      	ldr	r3, [r1, #16]
 800525c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005260:	4293      	cmp	r3, r2
 8005262:	bfb8      	it	lt
 8005264:	4613      	movlt	r3, r2
 8005266:	6033      	str	r3, [r6, #0]
 8005268:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800526c:	4607      	mov	r7, r0
 800526e:	460c      	mov	r4, r1
 8005270:	b10a      	cbz	r2, 8005276 <_printf_common+0x26>
 8005272:	3301      	adds	r3, #1
 8005274:	6033      	str	r3, [r6, #0]
 8005276:	6823      	ldr	r3, [r4, #0]
 8005278:	0699      	lsls	r1, r3, #26
 800527a:	bf42      	ittt	mi
 800527c:	6833      	ldrmi	r3, [r6, #0]
 800527e:	3302      	addmi	r3, #2
 8005280:	6033      	strmi	r3, [r6, #0]
 8005282:	6825      	ldr	r5, [r4, #0]
 8005284:	f015 0506 	ands.w	r5, r5, #6
 8005288:	d106      	bne.n	8005298 <_printf_common+0x48>
 800528a:	f104 0a19 	add.w	sl, r4, #25
 800528e:	68e3      	ldr	r3, [r4, #12]
 8005290:	6832      	ldr	r2, [r6, #0]
 8005292:	1a9b      	subs	r3, r3, r2
 8005294:	42ab      	cmp	r3, r5
 8005296:	dc26      	bgt.n	80052e6 <_printf_common+0x96>
 8005298:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800529c:	1e13      	subs	r3, r2, #0
 800529e:	6822      	ldr	r2, [r4, #0]
 80052a0:	bf18      	it	ne
 80052a2:	2301      	movne	r3, #1
 80052a4:	0692      	lsls	r2, r2, #26
 80052a6:	d42b      	bmi.n	8005300 <_printf_common+0xb0>
 80052a8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80052ac:	4649      	mov	r1, r9
 80052ae:	4638      	mov	r0, r7
 80052b0:	47c0      	blx	r8
 80052b2:	3001      	adds	r0, #1
 80052b4:	d01e      	beq.n	80052f4 <_printf_common+0xa4>
 80052b6:	6823      	ldr	r3, [r4, #0]
 80052b8:	6922      	ldr	r2, [r4, #16]
 80052ba:	f003 0306 	and.w	r3, r3, #6
 80052be:	2b04      	cmp	r3, #4
 80052c0:	bf02      	ittt	eq
 80052c2:	68e5      	ldreq	r5, [r4, #12]
 80052c4:	6833      	ldreq	r3, [r6, #0]
 80052c6:	1aed      	subeq	r5, r5, r3
 80052c8:	68a3      	ldr	r3, [r4, #8]
 80052ca:	bf0c      	ite	eq
 80052cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80052d0:	2500      	movne	r5, #0
 80052d2:	4293      	cmp	r3, r2
 80052d4:	bfc4      	itt	gt
 80052d6:	1a9b      	subgt	r3, r3, r2
 80052d8:	18ed      	addgt	r5, r5, r3
 80052da:	2600      	movs	r6, #0
 80052dc:	341a      	adds	r4, #26
 80052de:	42b5      	cmp	r5, r6
 80052e0:	d11a      	bne.n	8005318 <_printf_common+0xc8>
 80052e2:	2000      	movs	r0, #0
 80052e4:	e008      	b.n	80052f8 <_printf_common+0xa8>
 80052e6:	2301      	movs	r3, #1
 80052e8:	4652      	mov	r2, sl
 80052ea:	4649      	mov	r1, r9
 80052ec:	4638      	mov	r0, r7
 80052ee:	47c0      	blx	r8
 80052f0:	3001      	adds	r0, #1
 80052f2:	d103      	bne.n	80052fc <_printf_common+0xac>
 80052f4:	f04f 30ff 	mov.w	r0, #4294967295
 80052f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052fc:	3501      	adds	r5, #1
 80052fe:	e7c6      	b.n	800528e <_printf_common+0x3e>
 8005300:	18e1      	adds	r1, r4, r3
 8005302:	1c5a      	adds	r2, r3, #1
 8005304:	2030      	movs	r0, #48	; 0x30
 8005306:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800530a:	4422      	add	r2, r4
 800530c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005310:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005314:	3302      	adds	r3, #2
 8005316:	e7c7      	b.n	80052a8 <_printf_common+0x58>
 8005318:	2301      	movs	r3, #1
 800531a:	4622      	mov	r2, r4
 800531c:	4649      	mov	r1, r9
 800531e:	4638      	mov	r0, r7
 8005320:	47c0      	blx	r8
 8005322:	3001      	adds	r0, #1
 8005324:	d0e6      	beq.n	80052f4 <_printf_common+0xa4>
 8005326:	3601      	adds	r6, #1
 8005328:	e7d9      	b.n	80052de <_printf_common+0x8e>
	...

0800532c <_printf_i>:
 800532c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005330:	7e0f      	ldrb	r7, [r1, #24]
 8005332:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005334:	2f78      	cmp	r7, #120	; 0x78
 8005336:	4691      	mov	r9, r2
 8005338:	4680      	mov	r8, r0
 800533a:	460c      	mov	r4, r1
 800533c:	469a      	mov	sl, r3
 800533e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005342:	d807      	bhi.n	8005354 <_printf_i+0x28>
 8005344:	2f62      	cmp	r7, #98	; 0x62
 8005346:	d80a      	bhi.n	800535e <_printf_i+0x32>
 8005348:	2f00      	cmp	r7, #0
 800534a:	f000 80d4 	beq.w	80054f6 <_printf_i+0x1ca>
 800534e:	2f58      	cmp	r7, #88	; 0x58
 8005350:	f000 80c0 	beq.w	80054d4 <_printf_i+0x1a8>
 8005354:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005358:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800535c:	e03a      	b.n	80053d4 <_printf_i+0xa8>
 800535e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005362:	2b15      	cmp	r3, #21
 8005364:	d8f6      	bhi.n	8005354 <_printf_i+0x28>
 8005366:	a101      	add	r1, pc, #4	; (adr r1, 800536c <_printf_i+0x40>)
 8005368:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800536c:	080053c5 	.word	0x080053c5
 8005370:	080053d9 	.word	0x080053d9
 8005374:	08005355 	.word	0x08005355
 8005378:	08005355 	.word	0x08005355
 800537c:	08005355 	.word	0x08005355
 8005380:	08005355 	.word	0x08005355
 8005384:	080053d9 	.word	0x080053d9
 8005388:	08005355 	.word	0x08005355
 800538c:	08005355 	.word	0x08005355
 8005390:	08005355 	.word	0x08005355
 8005394:	08005355 	.word	0x08005355
 8005398:	080054dd 	.word	0x080054dd
 800539c:	08005405 	.word	0x08005405
 80053a0:	08005497 	.word	0x08005497
 80053a4:	08005355 	.word	0x08005355
 80053a8:	08005355 	.word	0x08005355
 80053ac:	080054ff 	.word	0x080054ff
 80053b0:	08005355 	.word	0x08005355
 80053b4:	08005405 	.word	0x08005405
 80053b8:	08005355 	.word	0x08005355
 80053bc:	08005355 	.word	0x08005355
 80053c0:	0800549f 	.word	0x0800549f
 80053c4:	682b      	ldr	r3, [r5, #0]
 80053c6:	1d1a      	adds	r2, r3, #4
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	602a      	str	r2, [r5, #0]
 80053cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80053d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80053d4:	2301      	movs	r3, #1
 80053d6:	e09f      	b.n	8005518 <_printf_i+0x1ec>
 80053d8:	6820      	ldr	r0, [r4, #0]
 80053da:	682b      	ldr	r3, [r5, #0]
 80053dc:	0607      	lsls	r7, r0, #24
 80053de:	f103 0104 	add.w	r1, r3, #4
 80053e2:	6029      	str	r1, [r5, #0]
 80053e4:	d501      	bpl.n	80053ea <_printf_i+0xbe>
 80053e6:	681e      	ldr	r6, [r3, #0]
 80053e8:	e003      	b.n	80053f2 <_printf_i+0xc6>
 80053ea:	0646      	lsls	r6, r0, #25
 80053ec:	d5fb      	bpl.n	80053e6 <_printf_i+0xba>
 80053ee:	f9b3 6000 	ldrsh.w	r6, [r3]
 80053f2:	2e00      	cmp	r6, #0
 80053f4:	da03      	bge.n	80053fe <_printf_i+0xd2>
 80053f6:	232d      	movs	r3, #45	; 0x2d
 80053f8:	4276      	negs	r6, r6
 80053fa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80053fe:	485a      	ldr	r0, [pc, #360]	; (8005568 <_printf_i+0x23c>)
 8005400:	230a      	movs	r3, #10
 8005402:	e012      	b.n	800542a <_printf_i+0xfe>
 8005404:	682b      	ldr	r3, [r5, #0]
 8005406:	6820      	ldr	r0, [r4, #0]
 8005408:	1d19      	adds	r1, r3, #4
 800540a:	6029      	str	r1, [r5, #0]
 800540c:	0605      	lsls	r5, r0, #24
 800540e:	d501      	bpl.n	8005414 <_printf_i+0xe8>
 8005410:	681e      	ldr	r6, [r3, #0]
 8005412:	e002      	b.n	800541a <_printf_i+0xee>
 8005414:	0641      	lsls	r1, r0, #25
 8005416:	d5fb      	bpl.n	8005410 <_printf_i+0xe4>
 8005418:	881e      	ldrh	r6, [r3, #0]
 800541a:	4853      	ldr	r0, [pc, #332]	; (8005568 <_printf_i+0x23c>)
 800541c:	2f6f      	cmp	r7, #111	; 0x6f
 800541e:	bf0c      	ite	eq
 8005420:	2308      	moveq	r3, #8
 8005422:	230a      	movne	r3, #10
 8005424:	2100      	movs	r1, #0
 8005426:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800542a:	6865      	ldr	r5, [r4, #4]
 800542c:	60a5      	str	r5, [r4, #8]
 800542e:	2d00      	cmp	r5, #0
 8005430:	bfa2      	ittt	ge
 8005432:	6821      	ldrge	r1, [r4, #0]
 8005434:	f021 0104 	bicge.w	r1, r1, #4
 8005438:	6021      	strge	r1, [r4, #0]
 800543a:	b90e      	cbnz	r6, 8005440 <_printf_i+0x114>
 800543c:	2d00      	cmp	r5, #0
 800543e:	d04b      	beq.n	80054d8 <_printf_i+0x1ac>
 8005440:	4615      	mov	r5, r2
 8005442:	fbb6 f1f3 	udiv	r1, r6, r3
 8005446:	fb03 6711 	mls	r7, r3, r1, r6
 800544a:	5dc7      	ldrb	r7, [r0, r7]
 800544c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005450:	4637      	mov	r7, r6
 8005452:	42bb      	cmp	r3, r7
 8005454:	460e      	mov	r6, r1
 8005456:	d9f4      	bls.n	8005442 <_printf_i+0x116>
 8005458:	2b08      	cmp	r3, #8
 800545a:	d10b      	bne.n	8005474 <_printf_i+0x148>
 800545c:	6823      	ldr	r3, [r4, #0]
 800545e:	07de      	lsls	r6, r3, #31
 8005460:	d508      	bpl.n	8005474 <_printf_i+0x148>
 8005462:	6923      	ldr	r3, [r4, #16]
 8005464:	6861      	ldr	r1, [r4, #4]
 8005466:	4299      	cmp	r1, r3
 8005468:	bfde      	ittt	le
 800546a:	2330      	movle	r3, #48	; 0x30
 800546c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005470:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005474:	1b52      	subs	r2, r2, r5
 8005476:	6122      	str	r2, [r4, #16]
 8005478:	f8cd a000 	str.w	sl, [sp]
 800547c:	464b      	mov	r3, r9
 800547e:	aa03      	add	r2, sp, #12
 8005480:	4621      	mov	r1, r4
 8005482:	4640      	mov	r0, r8
 8005484:	f7ff fee4 	bl	8005250 <_printf_common>
 8005488:	3001      	adds	r0, #1
 800548a:	d14a      	bne.n	8005522 <_printf_i+0x1f6>
 800548c:	f04f 30ff 	mov.w	r0, #4294967295
 8005490:	b004      	add	sp, #16
 8005492:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005496:	6823      	ldr	r3, [r4, #0]
 8005498:	f043 0320 	orr.w	r3, r3, #32
 800549c:	6023      	str	r3, [r4, #0]
 800549e:	4833      	ldr	r0, [pc, #204]	; (800556c <_printf_i+0x240>)
 80054a0:	2778      	movs	r7, #120	; 0x78
 80054a2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80054a6:	6823      	ldr	r3, [r4, #0]
 80054a8:	6829      	ldr	r1, [r5, #0]
 80054aa:	061f      	lsls	r7, r3, #24
 80054ac:	f851 6b04 	ldr.w	r6, [r1], #4
 80054b0:	d402      	bmi.n	80054b8 <_printf_i+0x18c>
 80054b2:	065f      	lsls	r7, r3, #25
 80054b4:	bf48      	it	mi
 80054b6:	b2b6      	uxthmi	r6, r6
 80054b8:	07df      	lsls	r7, r3, #31
 80054ba:	bf48      	it	mi
 80054bc:	f043 0320 	orrmi.w	r3, r3, #32
 80054c0:	6029      	str	r1, [r5, #0]
 80054c2:	bf48      	it	mi
 80054c4:	6023      	strmi	r3, [r4, #0]
 80054c6:	b91e      	cbnz	r6, 80054d0 <_printf_i+0x1a4>
 80054c8:	6823      	ldr	r3, [r4, #0]
 80054ca:	f023 0320 	bic.w	r3, r3, #32
 80054ce:	6023      	str	r3, [r4, #0]
 80054d0:	2310      	movs	r3, #16
 80054d2:	e7a7      	b.n	8005424 <_printf_i+0xf8>
 80054d4:	4824      	ldr	r0, [pc, #144]	; (8005568 <_printf_i+0x23c>)
 80054d6:	e7e4      	b.n	80054a2 <_printf_i+0x176>
 80054d8:	4615      	mov	r5, r2
 80054da:	e7bd      	b.n	8005458 <_printf_i+0x12c>
 80054dc:	682b      	ldr	r3, [r5, #0]
 80054de:	6826      	ldr	r6, [r4, #0]
 80054e0:	6961      	ldr	r1, [r4, #20]
 80054e2:	1d18      	adds	r0, r3, #4
 80054e4:	6028      	str	r0, [r5, #0]
 80054e6:	0635      	lsls	r5, r6, #24
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	d501      	bpl.n	80054f0 <_printf_i+0x1c4>
 80054ec:	6019      	str	r1, [r3, #0]
 80054ee:	e002      	b.n	80054f6 <_printf_i+0x1ca>
 80054f0:	0670      	lsls	r0, r6, #25
 80054f2:	d5fb      	bpl.n	80054ec <_printf_i+0x1c0>
 80054f4:	8019      	strh	r1, [r3, #0]
 80054f6:	2300      	movs	r3, #0
 80054f8:	6123      	str	r3, [r4, #16]
 80054fa:	4615      	mov	r5, r2
 80054fc:	e7bc      	b.n	8005478 <_printf_i+0x14c>
 80054fe:	682b      	ldr	r3, [r5, #0]
 8005500:	1d1a      	adds	r2, r3, #4
 8005502:	602a      	str	r2, [r5, #0]
 8005504:	681d      	ldr	r5, [r3, #0]
 8005506:	6862      	ldr	r2, [r4, #4]
 8005508:	2100      	movs	r1, #0
 800550a:	4628      	mov	r0, r5
 800550c:	f7fa fe78 	bl	8000200 <memchr>
 8005510:	b108      	cbz	r0, 8005516 <_printf_i+0x1ea>
 8005512:	1b40      	subs	r0, r0, r5
 8005514:	6060      	str	r0, [r4, #4]
 8005516:	6863      	ldr	r3, [r4, #4]
 8005518:	6123      	str	r3, [r4, #16]
 800551a:	2300      	movs	r3, #0
 800551c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005520:	e7aa      	b.n	8005478 <_printf_i+0x14c>
 8005522:	6923      	ldr	r3, [r4, #16]
 8005524:	462a      	mov	r2, r5
 8005526:	4649      	mov	r1, r9
 8005528:	4640      	mov	r0, r8
 800552a:	47d0      	blx	sl
 800552c:	3001      	adds	r0, #1
 800552e:	d0ad      	beq.n	800548c <_printf_i+0x160>
 8005530:	6823      	ldr	r3, [r4, #0]
 8005532:	079b      	lsls	r3, r3, #30
 8005534:	d413      	bmi.n	800555e <_printf_i+0x232>
 8005536:	68e0      	ldr	r0, [r4, #12]
 8005538:	9b03      	ldr	r3, [sp, #12]
 800553a:	4298      	cmp	r0, r3
 800553c:	bfb8      	it	lt
 800553e:	4618      	movlt	r0, r3
 8005540:	e7a6      	b.n	8005490 <_printf_i+0x164>
 8005542:	2301      	movs	r3, #1
 8005544:	4632      	mov	r2, r6
 8005546:	4649      	mov	r1, r9
 8005548:	4640      	mov	r0, r8
 800554a:	47d0      	blx	sl
 800554c:	3001      	adds	r0, #1
 800554e:	d09d      	beq.n	800548c <_printf_i+0x160>
 8005550:	3501      	adds	r5, #1
 8005552:	68e3      	ldr	r3, [r4, #12]
 8005554:	9903      	ldr	r1, [sp, #12]
 8005556:	1a5b      	subs	r3, r3, r1
 8005558:	42ab      	cmp	r3, r5
 800555a:	dcf2      	bgt.n	8005542 <_printf_i+0x216>
 800555c:	e7eb      	b.n	8005536 <_printf_i+0x20a>
 800555e:	2500      	movs	r5, #0
 8005560:	f104 0619 	add.w	r6, r4, #25
 8005564:	e7f5      	b.n	8005552 <_printf_i+0x226>
 8005566:	bf00      	nop
 8005568:	08005fa1 	.word	0x08005fa1
 800556c:	08005fb2 	.word	0x08005fb2

08005570 <__sflush_r>:
 8005570:	898a      	ldrh	r2, [r1, #12]
 8005572:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005576:	4605      	mov	r5, r0
 8005578:	0710      	lsls	r0, r2, #28
 800557a:	460c      	mov	r4, r1
 800557c:	d458      	bmi.n	8005630 <__sflush_r+0xc0>
 800557e:	684b      	ldr	r3, [r1, #4]
 8005580:	2b00      	cmp	r3, #0
 8005582:	dc05      	bgt.n	8005590 <__sflush_r+0x20>
 8005584:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005586:	2b00      	cmp	r3, #0
 8005588:	dc02      	bgt.n	8005590 <__sflush_r+0x20>
 800558a:	2000      	movs	r0, #0
 800558c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005590:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005592:	2e00      	cmp	r6, #0
 8005594:	d0f9      	beq.n	800558a <__sflush_r+0x1a>
 8005596:	2300      	movs	r3, #0
 8005598:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800559c:	682f      	ldr	r7, [r5, #0]
 800559e:	6a21      	ldr	r1, [r4, #32]
 80055a0:	602b      	str	r3, [r5, #0]
 80055a2:	d032      	beq.n	800560a <__sflush_r+0x9a>
 80055a4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80055a6:	89a3      	ldrh	r3, [r4, #12]
 80055a8:	075a      	lsls	r2, r3, #29
 80055aa:	d505      	bpl.n	80055b8 <__sflush_r+0x48>
 80055ac:	6863      	ldr	r3, [r4, #4]
 80055ae:	1ac0      	subs	r0, r0, r3
 80055b0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80055b2:	b10b      	cbz	r3, 80055b8 <__sflush_r+0x48>
 80055b4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80055b6:	1ac0      	subs	r0, r0, r3
 80055b8:	2300      	movs	r3, #0
 80055ba:	4602      	mov	r2, r0
 80055bc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80055be:	6a21      	ldr	r1, [r4, #32]
 80055c0:	4628      	mov	r0, r5
 80055c2:	47b0      	blx	r6
 80055c4:	1c43      	adds	r3, r0, #1
 80055c6:	89a3      	ldrh	r3, [r4, #12]
 80055c8:	d106      	bne.n	80055d8 <__sflush_r+0x68>
 80055ca:	6829      	ldr	r1, [r5, #0]
 80055cc:	291d      	cmp	r1, #29
 80055ce:	d82b      	bhi.n	8005628 <__sflush_r+0xb8>
 80055d0:	4a29      	ldr	r2, [pc, #164]	; (8005678 <__sflush_r+0x108>)
 80055d2:	410a      	asrs	r2, r1
 80055d4:	07d6      	lsls	r6, r2, #31
 80055d6:	d427      	bmi.n	8005628 <__sflush_r+0xb8>
 80055d8:	2200      	movs	r2, #0
 80055da:	6062      	str	r2, [r4, #4]
 80055dc:	04d9      	lsls	r1, r3, #19
 80055de:	6922      	ldr	r2, [r4, #16]
 80055e0:	6022      	str	r2, [r4, #0]
 80055e2:	d504      	bpl.n	80055ee <__sflush_r+0x7e>
 80055e4:	1c42      	adds	r2, r0, #1
 80055e6:	d101      	bne.n	80055ec <__sflush_r+0x7c>
 80055e8:	682b      	ldr	r3, [r5, #0]
 80055ea:	b903      	cbnz	r3, 80055ee <__sflush_r+0x7e>
 80055ec:	6560      	str	r0, [r4, #84]	; 0x54
 80055ee:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80055f0:	602f      	str	r7, [r5, #0]
 80055f2:	2900      	cmp	r1, #0
 80055f4:	d0c9      	beq.n	800558a <__sflush_r+0x1a>
 80055f6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80055fa:	4299      	cmp	r1, r3
 80055fc:	d002      	beq.n	8005604 <__sflush_r+0x94>
 80055fe:	4628      	mov	r0, r5
 8005600:	f7ff fbd6 	bl	8004db0 <_free_r>
 8005604:	2000      	movs	r0, #0
 8005606:	6360      	str	r0, [r4, #52]	; 0x34
 8005608:	e7c0      	b.n	800558c <__sflush_r+0x1c>
 800560a:	2301      	movs	r3, #1
 800560c:	4628      	mov	r0, r5
 800560e:	47b0      	blx	r6
 8005610:	1c41      	adds	r1, r0, #1
 8005612:	d1c8      	bne.n	80055a6 <__sflush_r+0x36>
 8005614:	682b      	ldr	r3, [r5, #0]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d0c5      	beq.n	80055a6 <__sflush_r+0x36>
 800561a:	2b1d      	cmp	r3, #29
 800561c:	d001      	beq.n	8005622 <__sflush_r+0xb2>
 800561e:	2b16      	cmp	r3, #22
 8005620:	d101      	bne.n	8005626 <__sflush_r+0xb6>
 8005622:	602f      	str	r7, [r5, #0]
 8005624:	e7b1      	b.n	800558a <__sflush_r+0x1a>
 8005626:	89a3      	ldrh	r3, [r4, #12]
 8005628:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800562c:	81a3      	strh	r3, [r4, #12]
 800562e:	e7ad      	b.n	800558c <__sflush_r+0x1c>
 8005630:	690f      	ldr	r7, [r1, #16]
 8005632:	2f00      	cmp	r7, #0
 8005634:	d0a9      	beq.n	800558a <__sflush_r+0x1a>
 8005636:	0793      	lsls	r3, r2, #30
 8005638:	680e      	ldr	r6, [r1, #0]
 800563a:	bf08      	it	eq
 800563c:	694b      	ldreq	r3, [r1, #20]
 800563e:	600f      	str	r7, [r1, #0]
 8005640:	bf18      	it	ne
 8005642:	2300      	movne	r3, #0
 8005644:	eba6 0807 	sub.w	r8, r6, r7
 8005648:	608b      	str	r3, [r1, #8]
 800564a:	f1b8 0f00 	cmp.w	r8, #0
 800564e:	dd9c      	ble.n	800558a <__sflush_r+0x1a>
 8005650:	6a21      	ldr	r1, [r4, #32]
 8005652:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005654:	4643      	mov	r3, r8
 8005656:	463a      	mov	r2, r7
 8005658:	4628      	mov	r0, r5
 800565a:	47b0      	blx	r6
 800565c:	2800      	cmp	r0, #0
 800565e:	dc06      	bgt.n	800566e <__sflush_r+0xfe>
 8005660:	89a3      	ldrh	r3, [r4, #12]
 8005662:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005666:	81a3      	strh	r3, [r4, #12]
 8005668:	f04f 30ff 	mov.w	r0, #4294967295
 800566c:	e78e      	b.n	800558c <__sflush_r+0x1c>
 800566e:	4407      	add	r7, r0
 8005670:	eba8 0800 	sub.w	r8, r8, r0
 8005674:	e7e9      	b.n	800564a <__sflush_r+0xda>
 8005676:	bf00      	nop
 8005678:	dfbffffe 	.word	0xdfbffffe

0800567c <_fflush_r>:
 800567c:	b538      	push	{r3, r4, r5, lr}
 800567e:	690b      	ldr	r3, [r1, #16]
 8005680:	4605      	mov	r5, r0
 8005682:	460c      	mov	r4, r1
 8005684:	b913      	cbnz	r3, 800568c <_fflush_r+0x10>
 8005686:	2500      	movs	r5, #0
 8005688:	4628      	mov	r0, r5
 800568a:	bd38      	pop	{r3, r4, r5, pc}
 800568c:	b118      	cbz	r0, 8005696 <_fflush_r+0x1a>
 800568e:	6a03      	ldr	r3, [r0, #32]
 8005690:	b90b      	cbnz	r3, 8005696 <_fflush_r+0x1a>
 8005692:	f7ff f987 	bl	80049a4 <__sinit>
 8005696:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d0f3      	beq.n	8005686 <_fflush_r+0xa>
 800569e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80056a0:	07d0      	lsls	r0, r2, #31
 80056a2:	d404      	bmi.n	80056ae <_fflush_r+0x32>
 80056a4:	0599      	lsls	r1, r3, #22
 80056a6:	d402      	bmi.n	80056ae <_fflush_r+0x32>
 80056a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80056aa:	f7ff fb7e 	bl	8004daa <__retarget_lock_acquire_recursive>
 80056ae:	4628      	mov	r0, r5
 80056b0:	4621      	mov	r1, r4
 80056b2:	f7ff ff5d 	bl	8005570 <__sflush_r>
 80056b6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80056b8:	07da      	lsls	r2, r3, #31
 80056ba:	4605      	mov	r5, r0
 80056bc:	d4e4      	bmi.n	8005688 <_fflush_r+0xc>
 80056be:	89a3      	ldrh	r3, [r4, #12]
 80056c0:	059b      	lsls	r3, r3, #22
 80056c2:	d4e1      	bmi.n	8005688 <_fflush_r+0xc>
 80056c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80056c6:	f7ff fb71 	bl	8004dac <__retarget_lock_release_recursive>
 80056ca:	e7dd      	b.n	8005688 <_fflush_r+0xc>

080056cc <__swhatbuf_r>:
 80056cc:	b570      	push	{r4, r5, r6, lr}
 80056ce:	460c      	mov	r4, r1
 80056d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80056d4:	2900      	cmp	r1, #0
 80056d6:	b096      	sub	sp, #88	; 0x58
 80056d8:	4615      	mov	r5, r2
 80056da:	461e      	mov	r6, r3
 80056dc:	da0d      	bge.n	80056fa <__swhatbuf_r+0x2e>
 80056de:	89a3      	ldrh	r3, [r4, #12]
 80056e0:	f013 0f80 	tst.w	r3, #128	; 0x80
 80056e4:	f04f 0100 	mov.w	r1, #0
 80056e8:	bf0c      	ite	eq
 80056ea:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80056ee:	2340      	movne	r3, #64	; 0x40
 80056f0:	2000      	movs	r0, #0
 80056f2:	6031      	str	r1, [r6, #0]
 80056f4:	602b      	str	r3, [r5, #0]
 80056f6:	b016      	add	sp, #88	; 0x58
 80056f8:	bd70      	pop	{r4, r5, r6, pc}
 80056fa:	466a      	mov	r2, sp
 80056fc:	f000 f862 	bl	80057c4 <_fstat_r>
 8005700:	2800      	cmp	r0, #0
 8005702:	dbec      	blt.n	80056de <__swhatbuf_r+0x12>
 8005704:	9901      	ldr	r1, [sp, #4]
 8005706:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800570a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800570e:	4259      	negs	r1, r3
 8005710:	4159      	adcs	r1, r3
 8005712:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005716:	e7eb      	b.n	80056f0 <__swhatbuf_r+0x24>

08005718 <__smakebuf_r>:
 8005718:	898b      	ldrh	r3, [r1, #12]
 800571a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800571c:	079d      	lsls	r5, r3, #30
 800571e:	4606      	mov	r6, r0
 8005720:	460c      	mov	r4, r1
 8005722:	d507      	bpl.n	8005734 <__smakebuf_r+0x1c>
 8005724:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005728:	6023      	str	r3, [r4, #0]
 800572a:	6123      	str	r3, [r4, #16]
 800572c:	2301      	movs	r3, #1
 800572e:	6163      	str	r3, [r4, #20]
 8005730:	b002      	add	sp, #8
 8005732:	bd70      	pop	{r4, r5, r6, pc}
 8005734:	ab01      	add	r3, sp, #4
 8005736:	466a      	mov	r2, sp
 8005738:	f7ff ffc8 	bl	80056cc <__swhatbuf_r>
 800573c:	9900      	ldr	r1, [sp, #0]
 800573e:	4605      	mov	r5, r0
 8005740:	4630      	mov	r0, r6
 8005742:	f7ff fba1 	bl	8004e88 <_malloc_r>
 8005746:	b948      	cbnz	r0, 800575c <__smakebuf_r+0x44>
 8005748:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800574c:	059a      	lsls	r2, r3, #22
 800574e:	d4ef      	bmi.n	8005730 <__smakebuf_r+0x18>
 8005750:	f023 0303 	bic.w	r3, r3, #3
 8005754:	f043 0302 	orr.w	r3, r3, #2
 8005758:	81a3      	strh	r3, [r4, #12]
 800575a:	e7e3      	b.n	8005724 <__smakebuf_r+0xc>
 800575c:	89a3      	ldrh	r3, [r4, #12]
 800575e:	6020      	str	r0, [r4, #0]
 8005760:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005764:	81a3      	strh	r3, [r4, #12]
 8005766:	9b00      	ldr	r3, [sp, #0]
 8005768:	6163      	str	r3, [r4, #20]
 800576a:	9b01      	ldr	r3, [sp, #4]
 800576c:	6120      	str	r0, [r4, #16]
 800576e:	b15b      	cbz	r3, 8005788 <__smakebuf_r+0x70>
 8005770:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005774:	4630      	mov	r0, r6
 8005776:	f000 f837 	bl	80057e8 <_isatty_r>
 800577a:	b128      	cbz	r0, 8005788 <__smakebuf_r+0x70>
 800577c:	89a3      	ldrh	r3, [r4, #12]
 800577e:	f023 0303 	bic.w	r3, r3, #3
 8005782:	f043 0301 	orr.w	r3, r3, #1
 8005786:	81a3      	strh	r3, [r4, #12]
 8005788:	89a3      	ldrh	r3, [r4, #12]
 800578a:	431d      	orrs	r5, r3
 800578c:	81a5      	strh	r5, [r4, #12]
 800578e:	e7cf      	b.n	8005730 <__smakebuf_r+0x18>

08005790 <memmove>:
 8005790:	4288      	cmp	r0, r1
 8005792:	b510      	push	{r4, lr}
 8005794:	eb01 0402 	add.w	r4, r1, r2
 8005798:	d902      	bls.n	80057a0 <memmove+0x10>
 800579a:	4284      	cmp	r4, r0
 800579c:	4623      	mov	r3, r4
 800579e:	d807      	bhi.n	80057b0 <memmove+0x20>
 80057a0:	1e43      	subs	r3, r0, #1
 80057a2:	42a1      	cmp	r1, r4
 80057a4:	d008      	beq.n	80057b8 <memmove+0x28>
 80057a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80057aa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80057ae:	e7f8      	b.n	80057a2 <memmove+0x12>
 80057b0:	4402      	add	r2, r0
 80057b2:	4601      	mov	r1, r0
 80057b4:	428a      	cmp	r2, r1
 80057b6:	d100      	bne.n	80057ba <memmove+0x2a>
 80057b8:	bd10      	pop	{r4, pc}
 80057ba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80057be:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80057c2:	e7f7      	b.n	80057b4 <memmove+0x24>

080057c4 <_fstat_r>:
 80057c4:	b538      	push	{r3, r4, r5, lr}
 80057c6:	4d07      	ldr	r5, [pc, #28]	; (80057e4 <_fstat_r+0x20>)
 80057c8:	2300      	movs	r3, #0
 80057ca:	4604      	mov	r4, r0
 80057cc:	4608      	mov	r0, r1
 80057ce:	4611      	mov	r1, r2
 80057d0:	602b      	str	r3, [r5, #0]
 80057d2:	f7fc feca 	bl	800256a <_fstat>
 80057d6:	1c43      	adds	r3, r0, #1
 80057d8:	d102      	bne.n	80057e0 <_fstat_r+0x1c>
 80057da:	682b      	ldr	r3, [r5, #0]
 80057dc:	b103      	cbz	r3, 80057e0 <_fstat_r+0x1c>
 80057de:	6023      	str	r3, [r4, #0]
 80057e0:	bd38      	pop	{r3, r4, r5, pc}
 80057e2:	bf00      	nop
 80057e4:	20000310 	.word	0x20000310

080057e8 <_isatty_r>:
 80057e8:	b538      	push	{r3, r4, r5, lr}
 80057ea:	4d06      	ldr	r5, [pc, #24]	; (8005804 <_isatty_r+0x1c>)
 80057ec:	2300      	movs	r3, #0
 80057ee:	4604      	mov	r4, r0
 80057f0:	4608      	mov	r0, r1
 80057f2:	602b      	str	r3, [r5, #0]
 80057f4:	f7fc fec9 	bl	800258a <_isatty>
 80057f8:	1c43      	adds	r3, r0, #1
 80057fa:	d102      	bne.n	8005802 <_isatty_r+0x1a>
 80057fc:	682b      	ldr	r3, [r5, #0]
 80057fe:	b103      	cbz	r3, 8005802 <_isatty_r+0x1a>
 8005800:	6023      	str	r3, [r4, #0]
 8005802:	bd38      	pop	{r3, r4, r5, pc}
 8005804:	20000310 	.word	0x20000310

08005808 <_sbrk_r>:
 8005808:	b538      	push	{r3, r4, r5, lr}
 800580a:	4d06      	ldr	r5, [pc, #24]	; (8005824 <_sbrk_r+0x1c>)
 800580c:	2300      	movs	r3, #0
 800580e:	4604      	mov	r4, r0
 8005810:	4608      	mov	r0, r1
 8005812:	602b      	str	r3, [r5, #0]
 8005814:	f7fc fed2 	bl	80025bc <_sbrk>
 8005818:	1c43      	adds	r3, r0, #1
 800581a:	d102      	bne.n	8005822 <_sbrk_r+0x1a>
 800581c:	682b      	ldr	r3, [r5, #0]
 800581e:	b103      	cbz	r3, 8005822 <_sbrk_r+0x1a>
 8005820:	6023      	str	r3, [r4, #0]
 8005822:	bd38      	pop	{r3, r4, r5, pc}
 8005824:	20000310 	.word	0x20000310

08005828 <memcpy>:
 8005828:	440a      	add	r2, r1
 800582a:	4291      	cmp	r1, r2
 800582c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005830:	d100      	bne.n	8005834 <memcpy+0xc>
 8005832:	4770      	bx	lr
 8005834:	b510      	push	{r4, lr}
 8005836:	f811 4b01 	ldrb.w	r4, [r1], #1
 800583a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800583e:	4291      	cmp	r1, r2
 8005840:	d1f9      	bne.n	8005836 <memcpy+0xe>
 8005842:	bd10      	pop	{r4, pc}

08005844 <_realloc_r>:
 8005844:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005848:	4680      	mov	r8, r0
 800584a:	4614      	mov	r4, r2
 800584c:	460e      	mov	r6, r1
 800584e:	b921      	cbnz	r1, 800585a <_realloc_r+0x16>
 8005850:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005854:	4611      	mov	r1, r2
 8005856:	f7ff bb17 	b.w	8004e88 <_malloc_r>
 800585a:	b92a      	cbnz	r2, 8005868 <_realloc_r+0x24>
 800585c:	f7ff faa8 	bl	8004db0 <_free_r>
 8005860:	4625      	mov	r5, r4
 8005862:	4628      	mov	r0, r5
 8005864:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005868:	f000 f81b 	bl	80058a2 <_malloc_usable_size_r>
 800586c:	4284      	cmp	r4, r0
 800586e:	4607      	mov	r7, r0
 8005870:	d802      	bhi.n	8005878 <_realloc_r+0x34>
 8005872:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005876:	d812      	bhi.n	800589e <_realloc_r+0x5a>
 8005878:	4621      	mov	r1, r4
 800587a:	4640      	mov	r0, r8
 800587c:	f7ff fb04 	bl	8004e88 <_malloc_r>
 8005880:	4605      	mov	r5, r0
 8005882:	2800      	cmp	r0, #0
 8005884:	d0ed      	beq.n	8005862 <_realloc_r+0x1e>
 8005886:	42bc      	cmp	r4, r7
 8005888:	4622      	mov	r2, r4
 800588a:	4631      	mov	r1, r6
 800588c:	bf28      	it	cs
 800588e:	463a      	movcs	r2, r7
 8005890:	f7ff ffca 	bl	8005828 <memcpy>
 8005894:	4631      	mov	r1, r6
 8005896:	4640      	mov	r0, r8
 8005898:	f7ff fa8a 	bl	8004db0 <_free_r>
 800589c:	e7e1      	b.n	8005862 <_realloc_r+0x1e>
 800589e:	4635      	mov	r5, r6
 80058a0:	e7df      	b.n	8005862 <_realloc_r+0x1e>

080058a2 <_malloc_usable_size_r>:
 80058a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80058a6:	1f18      	subs	r0, r3, #4
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	bfbc      	itt	lt
 80058ac:	580b      	ldrlt	r3, [r1, r0]
 80058ae:	18c0      	addlt	r0, r0, r3
 80058b0:	4770      	bx	lr
	...

080058b4 <_init>:
 80058b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058b6:	bf00      	nop
 80058b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058ba:	bc08      	pop	{r3}
 80058bc:	469e      	mov	lr, r3
 80058be:	4770      	bx	lr

080058c0 <_fini>:
 80058c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058c2:	bf00      	nop
 80058c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058c6:	bc08      	pop	{r3}
 80058c8:	469e      	mov	lr, r3
 80058ca:	4770      	bx	lr
